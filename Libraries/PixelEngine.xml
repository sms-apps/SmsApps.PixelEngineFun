<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PixelEngine</name>
    </assembly>
    <members>
        <member name="T:PixelEngine.Examples.Beeping">
            <summary> Example that uses the audio system to create a beepin tone. </summary>
        </member>
        <member name="M:PixelEngine.Examples.Beeping.Run(System.String[])">
            <summary> Entry point, formerly Main. </summary>
        </member>
        <member name="M:PixelEngine.Examples.Beeping.OnCreate">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.Beeping.OnSoundCreate(System.Int32,System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.Beeping.OnSoundFilter(System.Int32,System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="T:PixelEngine.Examples.ChaosGame">
            <summary> Example class that creates the Sierpinski triangle </summary>
        </member>
        <member name="M:PixelEngine.Examples.ChaosGame.Run(System.String[])">
            <summary> Entry point, formerly Main. </summary>
        </member>
        <member name="M:PixelEngine.Examples.ChaosGame.OnCreate">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.ChaosGame.OnUpdate(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:PixelEngine.Examples.Dodger">
            <summary> Example simple box dodger game </summary>
        </member>
        <member name="M:PixelEngine.Examples.Dodger.Run(System.String[])">
            <summary> Entry point, formerly Main. </summary>
        </member>
        <member name="M:PixelEngine.Examples.Dodger.OnCreate">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.Dodger.OnUpdate(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:PixelEngine.Examples.GameOfLife">
            <summary> Example that simulates Conway's Game of Life cellular automata. </summary>
        </member>
        <member name="M:PixelEngine.Examples.GameOfLife.Run(System.String[])">
            <summary> Entry point, formerly Main. </summary>
        </member>
        <member name="M:PixelEngine.Examples.GameOfLife.OnCreate">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.GameOfLife.OnUpdate(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.GameOfLife.OnMousePress(PixelEngine.Mouse)">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.GameOfLife.OnKeyPress(PixelEngine.Key)">
            <inheritdoc />
        </member>
        <member name="T:PixelEngine.Examples.Matrix">
            <summary> Example that lets you see the code, circa 1999. </summary>
        </member>
        <member name="M:PixelEngine.Examples.Matrix.Run(System.String[])">
            <summary> Entry point, formerly Main. </summary>
        </member>
        <member name="M:PixelEngine.Examples.Matrix.OnCreate">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.Matrix.OnUpdate(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:PixelEngine.Examples.MatrixRedux">
            <summary> Example that lets you see the code, circa 1999. </summary>
        </member>
        <member name="M:PixelEngine.Examples.MatrixRedux.Run(System.String[])">
            <summary> Entry point, formerly Main. </summary>
        </member>
        <member name="M:PixelEngine.Examples.MatrixRedux.OnCreate">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.MatrixRedux.OnUpdate(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:PixelEngine.Examples.Mazes">
            <summary> Example maze generator that uses a random walk to sculpt a maze out of a grid </summary>
        </member>
        <member name="M:PixelEngine.Examples.Mazes.Run(System.String[])">
            <summary> Entry point, formerly Main. </summary>
        </member>
        <member name="M:PixelEngine.Examples.Mazes.#ctor">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.Mazes.OnCreate">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.Mazes.OnKeyPress(PixelEngine.Key)">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.Mazes.OnUpdate(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:PixelEngine.Examples.PalettePanning">
            <summary> Example class containing Palette panning example </summary>
        </member>
        <member name="M:PixelEngine.Examples.PalettePanning.Run(System.String[])">
            <summary> Entry point. </summary>
        </member>
        <member name="M:PixelEngine.Examples.PalettePanning.#ctor">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.PalettePanning.OnUpdate(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:PixelEngine.Examples.PerlinNoise">
            <summary> Example that makes pretty colors using noise </summary>
        </member>
        <member name="M:PixelEngine.Examples.PerlinNoise.Run(System.String[])">
            <summary> Entry point, formerly Main. </summary>
        </member>
        <member name="M:PixelEngine.Examples.PerlinNoise.OnUpdate(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:PixelEngine.Examples.RandomPixels">
            <summary> Draw a bunch of random colors to the screen every frame </summary>
        </member>
        <member name="M:PixelEngine.Examples.RandomPixels.Run(System.String[])">
            <summary> Entry point, formerly Main. </summary>
        </member>
        <member name="M:PixelEngine.Examples.RandomPixels.OnUpdate(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:PixelEngine.Examples.SaveFileExample">
            <summary> Example class showing how to work with save files. </summary>
        </member>
        <member name="M:PixelEngine.Examples.SaveFileExample.Run(System.String[])">
            <summary> Entry point </summary>
        </member>
        <member name="T:PixelEngine.Examples.SaveFileExample.GameData">
            <summary> Class holding game data. This will get serialized out to the save file </summary>
        </member>
        <member name="F:PixelEngine.Examples.SaveFileExample.GameData.money">
            <summary> Current money in pocket </summary>
        </member>
        <member name="F:PixelEngine.Examples.SaveFileExample.GameData.clicks">
            <summary> Total clicks since game start </summary>
        </member>
        <member name="F:PixelEngine.Examples.SaveFileExample.GameData.things">
            <summary> Things found by the player </summary>
        </member>
        <member name="F:PixelEngine.Examples.SaveFileExample.GameData.powerups">
            <summary> Powerups bought by the player </summary>
        </member>
        <member name="T:PixelEngine.Examples.SaveFileExample.Thing">
            <summary> Some Thing the player found. Structs can be saved/loaded as well. </summary>
        </member>
        <member name="F:PixelEngine.Examples.SaveFileExample.buttons">
            <summary> Little UI system </summary>
        </member>
        <member name="F:PixelEngine.Examples.SaveFileExample.gameData">
            <summary> Current game data </summary>
        </member>
        <member name="F:PixelEngine.Examples.SaveFileExample.best">
            <summary> Current best thing </summary>
        </member>
        <member name="F:PixelEngine.Examples.SaveFileExample.totalThingPower">
            <summary> Total power of all owned Things </summary>
        </member>
        <member name="F:PixelEngine.Examples.SaveFileExample.income">
            <summary> Base click money earning ability </summary>
        </member>
        <member name="F:PixelEngine.Examples.SaveFileExample.dropChance">
            <summary> Drop chance per click </summary>
        </member>
        <member name="F:PixelEngine.Examples.SaveFileExample.nextCost">
            <summary> Cost of next powerup </summary>
        </member>
        <member name="M:PixelEngine.Examples.SaveFileExample.#ctor">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Examples.SaveFileExample.saveFile">
            <summary> Place to save the file... </summary>
        </member>
        <member name="M:PixelEngine.Examples.SaveFileExample.OnCreate">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.SaveFileExample.OnDestroy">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.SaveFileExample.OnUpdate(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.SaveFileExample.Clicked">
            <summary> Function to call when the main button is clicked. </summary>
        </member>
        <member name="M:PixelEngine.Examples.SaveFileExample.DropThing">
            <summary> Called to give the player a new Thing </summary>
        </member>
        <member name="M:PixelEngine.Examples.SaveFileExample.TryBuyPowerup">
            <summary> Called when the player clicks the buy powerup button </summary>
        </member>
        <member name="M:PixelEngine.Examples.SaveFileExample.Recalc">
            <summary> Recalculates information derived from game state. </summary>
        </member>
        <member name="M:PixelEngine.Examples.SaveFileExample.CombineRatio(System.Single,System.Single)">
            <summary> Combine ratios so they never reach 100% </summary>
        </member>
        <member name="M:PixelEngine.Examples.SaveFileExample.DropChance(System.Int32,System.Int32)">
            <summary> Calculate current thing chance </summary>
        </member>
        <member name="M:PixelEngine.Examples.SaveFileExample.BestThing(System.Collections.Generic.List{PixelEngine.Examples.SaveFileExample.Thing})">
            <summary> Find the user's best Thing, or null if they have none. </summary>
        </member>
        <member name="M:PixelEngine.Examples.SaveFileExample.TotalThingPower(System.Collections.Generic.List{PixelEngine.Examples.SaveFileExample.Thing})">
            <summary> SUM ALL THE THINGS power. </summary>
        </member>
        <member name="M:PixelEngine.Examples.SaveFileExample.BaseIncome(System.Single,System.Int32)">
            <summary> Calculate baseIncome from thing power. </summary>
        </member>
        <member name="M:PixelEngine.Examples.SaveFileExample.PowerUpCost(System.Int32)">
            <summary> Get the cost of the next Power Up </summary>
        </member>
        <member name="M:PixelEngine.Examples.SaveFileExample.CenterText(PixelEngine.Utilities.Vector2,System.String,PixelEngine.Pixel)">
            <summary> Draw some text centered on a position </summary>
        </member>
        <member name="T:PixelEngine.Examples.SaveFileExample.Button">
            <summary> UI Helper class </summary>
        </member>
        <member name="T:PixelEngine.Examples.Snake">
            <summary> Example simple snake game </summary>
        </member>
        <member name="M:PixelEngine.Examples.Snake.Run(System.String[])">
            <summary> Entry point, formerly Main. </summary>
        </member>
        <member name="M:PixelEngine.Examples.Snake.#ctor">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.Snake.OnCreate">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.Snake.OnUpdate(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:PixelEngine.Examples.Transformations">
            <summary> Example showing matrix transformations. Make sure there is a file 'car.png' in the working directory of the program.
            Call <see cref="M:System.IO.Directory.GetCurrentDirectory"/> and <see cref="M:System.IO.Directory.SetCurrentDirectory(System.String)"/>
            There is a <see cref="M:PixelEngine.WindowsInfo.SourceFileDirectory(System.String)"/> Helper method. </summary>
        </member>
        <member name="M:PixelEngine.Examples.Transformations.Run(System.String[])">
            <summary> Entry point, formerly Main. </summary>
        </member>
        <member name="M:PixelEngine.Examples.Transformations.OnCreate">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.Transformations.OnKeyDown(PixelEngine.Key)">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.Transformations.OnUpdate(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:PixelEngine.Examples.Tron">
            <summary> Example for riding cycles of light, circa 1982</summary>
        </member>
        <member name="M:PixelEngine.Examples.Tron.Run(System.String[])">
            <summary> Entry point, formerly Main. </summary>
        </member>
        <member name="M:PixelEngine.Examples.Tron.#ctor">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.Tron.OnCreate">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.Tron.OnUpdate(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.Tron.OnKeyPress(PixelEngine.Key)">
            <inheritdoc />
        </member>
        <member name="T:PixelEngine.Examples.Mode7">
            <summary> Example that simulates the SNES HDMA/Mode7 effect used to create a fake-3d horizon line in many games. 
            Make sure there is are files 'Sky.png' and 'Ground.png' in the working directory of the program. 
            Call <see cref="M:System.IO.Directory.GetCurrentDirectory"/> and <see cref="M:System.IO.Directory.SetCurrentDirectory(System.String)"/>
            There is a <see cref="M:PixelEngine.WindowsInfo.SourceFileDirectory(System.String)"/> Helper method. </summary>
        </member>
        <member name="M:PixelEngine.Examples.Mode7.Run(System.String[])">
            <summary> Entry point, formerly Main. </summary>
        </member>
        <member name="M:PixelEngine.Examples.Mode7.#ctor">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.Mode7.OnCreate">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.Mode7.OnUpdate(System.Single)">
            <inheritdoc />
        </member>
        <member name="T:PixelEngine.Examples.WireWorld">
            <summary> Example running the 'Wire World' Cellular automata. </summary>
        </member>
        <member name="M:PixelEngine.Examples.WireWorld.Run(System.String[])">
            <summary> Entry point, formerly Main. </summary>
        </member>
        <member name="M:PixelEngine.Examples.WireWorld.OnCreate">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.WireWorld.OnUpdate(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Examples.WireWorld.OnKeyPress(PixelEngine.Key)">
            <inheritdoc />
        </member>
        <member name="T:PixelEngine.Font">
            <summary> Class that holds information about a pixel font </summary>
        </member>
        <member name="F:PixelEngine.Font.Initialized">
            <summary> Workaround for avoiding static constructor penalty </summary>
        </member>
        <member name="M:PixelEngine.Font.Init">
            <summary> Workaround for avoiding static constructor penalty </summary>
        </member>
        <member name="F:PixelEngine.Font.retro">
            <summary> Lazy loader for <see cref="F:PixelEngine.Font.Presets.Retro"/></summary>
        </member>
        <member name="F:PixelEngine.Font.modern">
            <summary> Lazy loader for <see cref="F:PixelEngine.Font.Presets.Modern"/></summary>
        </member>
        <member name="F:PixelEngine.Font.formal">
            <summary> Lazy loader for <see cref="F:PixelEngine.Font.Presets.Formal"/></summary>
        </member>
        <member name="F:PixelEngine.Font.handwritten">
            <summary> Lazy loader for <see cref="F:PixelEngine.Font.Presets.Handwritten"/></summary>
        </member>
        <member name="T:PixelEngine.Font.Presets">
            <summary> Enum for preset font </summary>
        </member>
        <member name="M:PixelEngine.Font.op_Implicit(PixelEngine.Font.Presets)~PixelEngine.Font">
            <summary> Helper conversion from <see cref="T:PixelEngine.Font.Presets"/> enum into <see cref="T:PixelEngine.Font"/></summary>
            <param name="p"> Preset to convert </param>
        </member>
        <member name="F:PixelEngine.Font.Glyphs">
            <summary> Sprites representing each character in the font </summary>
        </member>
        <member name="P:PixelEngine.Font.CharHeight">
            <summary> Height of a line of text rendered with this font </summary>
        </member>
        <member name="M:PixelEngine.Font.Measure(System.String)">
            <summary> Measures total Width/Height of the given <paramref name="text"/> rendered with this <see cref="T:PixelEngine.Font"/>. </summary>
        </member>
        <member name="M:PixelEngine.Font.TextWidth(System.String)">
            <summary> Measures the width of a string of text when rendered with this font, if it was all on one line. </summary>
            <param name="text"> Text to measure  </param>
            <returns> Width, in pixels, of text </returns>
        </member>
        <member name="M:PixelEngine.Font.TextHeight(System.String)">
            <summary> Measures the height of a string of text when rendered with this font. </summary>
            <param name="text"> Text to measure  </param>
            <returns> Height, in pixels, of text </returns>
        </member>
        <member name="M:PixelEngine.Font.CreateRetro">
            <summary> Load preset retro font </summary>
            <returns> Loaded font </returns>
        </member>
        <member name="M:PixelEngine.Font.CreateModern">
            <summary> Load preset modern font </summary>
            <returns> Loaded font </returns>
        </member>
        <member name="M:PixelEngine.Font.CreateFormal">
            <summary> Load preset formal font </summary>
            <returns> Loaded font </returns>
        </member>
        <member name="M:PixelEngine.Font.CreateHandwritten">
            <summary> Load preset handwritten font </summary>
            <returns> Loaded font </returns>
        </member>
        <member name="T:PixelEngine.Utilities.Animation`1">
            <summary> Helper class for animating things. Updates an internal value over time using a <see cref="T:System.Threading.Tasks.Task"/> </summary>
            <typeparam name="T"> Generic type parameter </typeparam>
            <remarks> This is kind of a poor way to animate things, since it will cause more work to be done than is really necessary. </remarks>
        </member>
        <member name="P:PixelEngine.Utilities.Animation`1.Value">
            <summary> Current animation value at given moment </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Animation`1.Running">
            <summary> Is the animation running? </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Animation`1.Loop">
            <summary> Will the animation loop? </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Animation`1.Automatic">
            <summary> Was this animation started with a duration? </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Animation`1.values">
            <summary> Values to iterate </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Animation`1.index">
            <summary> Current index </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Animation`1.interval">
            <summary> ms interval to update on </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Animation`1.#ctor(`0[])">
            <summary> Creates a new animation that will iterate the given <paramref name="values"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Animation`1.#ctor(`0[],System.Single)">
            <summary> Creates a new animation that will iterate the given <paramref name="values"/> over the given <paramref name="duration"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Animation`1.Start">
            <summary> Start this animation running in a separate task.  </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Animation`1.Update">
            <summary> Update this animation manually. Stops running task, if present. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Animation`1.Stop">
            <summary> Stop the task running the animation. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Animation`1.Animate">
            <summary> Async update for this animation. Runs in its own 'thread' </summary>
        </member>
        <member name="T:PixelEngine.Utilities.IntFlags">
            <summary> Backed by a single <see cref="T:System.Int32"/> to provide 32 <see cref="T:System.Boolean"/>s under one name. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.IntFlags.op_Implicit(System.Int32)~PixelEngine.Utilities.IntFlags">
            <summary> Operator to convert <see cref="T:System.Int32"/> to <see cref="T:PixelEngine.Utilities.IntFlags"/> for easy assignment </summary>
        </member>
        <member name="M:PixelEngine.Utilities.IntFlags.op_Implicit(PixelEngine.Utilities.IntFlags)~System.Int32">
            <summary> Operator to convert <see cref="T:PixelEngine.Utilities.IntFlags"/> to <see cref="T:System.Int32"/> for easy assignment </summary>
        </member>
        <member name="F:PixelEngine.Utilities.IntFlags.data">
            <summary> Data backing this struct instance </summary>
        </member>
        <member name="F:PixelEngine.Utilities.IntFlags.SIZE">
            <summary> Size of a single int in bits </summary>
        </member>
        <member name="P:PixelEngine.Utilities.IntFlags.Item(System.Int32)">
            <summary> Indexer into packed bits </summary>
        </member>
        <member name="T:PixelEngine.Utilities.LongFlags">
            <summary> Backed by a single <see cref="T:System.Int64"/> to provide 64 <see cref="T:System.Boolean"/>s under one name. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.LongFlags.op_Implicit(System.Int64)~PixelEngine.Utilities.LongFlags">
            <summary> Operator to convert <see cref="T:System.Int64"/> to <see cref="T:PixelEngine.Utilities.LongFlags"/> for easy assignment </summary>
        </member>
        <member name="M:PixelEngine.Utilities.LongFlags.op_Implicit(PixelEngine.Utilities.LongFlags)~System.Int64">
            <summary> Operator to convert <see cref="T:PixelEngine.Utilities.LongFlags"/> to <see cref="T:System.Int64"/> for easy assignment </summary>
        </member>
        <member name="F:PixelEngine.Utilities.LongFlags.data">
            <summary> Data backing this struct instance </summary>
        </member>
        <member name="F:PixelEngine.Utilities.LongFlags.SIZE">
            <summary> Size of a single long in bits </summary>
        </member>
        <member name="P:PixelEngine.Utilities.LongFlags.Item(System.Int32)">
            <summary> Indexer into packed bits </summary>
        </member>
        <member name="T:PixelEngine.Utilities.Bitflags">
            <summary> Highly packed bitflags for large numbers of flags. 8 Times more efficient packing than <see cref="T:System.Boolean"/>[]. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Bitflags.flags">
            <summary> Array containing flags </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Bitflags.Capacity">
            <summary> Maximum amount of individual bitflags that can be indexed </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Bitflags.Blocks">
            <summary> Gets the number of int sized blocks in this bitflags </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Bitflags.BLOCKSIZE">
            <summary> Size of a single int block </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Bitflags.CopyFlags">
            <summary> Creates a copy of the flags </summary>
            <returns> Array of ints containing the flag data. </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Bitflags.#ctor(System.Int32)">
            <summary> Constructs a bitflags with at least <paramref name="numFlags"/> in capacity. </summary>
            <param name="numFlags"> Number of required flags </param>
        </member>
        <member name="M:PixelEngine.Utilities.Bitflags.#ctor(System.Int32[])">
            <summary> Constructs a bitflags with a copy of the given flags </summary>
            <param name="data"> Flags to copy </param>
        </member>
        <member name="M:PixelEngine.Utilities.Bitflags.Expand">
            <summary> Expand the Bitflags by one block </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Bitflags.MaybeExpand(System.Int32)">
            <summary> Might expand the bitflags. Expands if just one more block is needed to have <paramref name="desiredIndex"/> within <see cref="P:PixelEngine.Utilities.Bitflags.Capacity"/>. </summary>
            <param name="desiredIndex"> Index desired to access </param>
            <returns> True, if <paramref name="desiredIndex"/> is now valid, false otherwise. </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Bitflags.InspectBlock(System.Int32)">
            <summary> Gets the int block at the given index in the underlying array. </summary>
            <param name="index"> Index to get. Must be inside [0, <see cref="P:PixelEngine.Utilities.Bitflags.Blocks"/>-1] </param>
            <returns> int value at block </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Bitflags.UpdateBlock(System.Int32,System.Int32)">
            <summary> Sets the int block at the given index in the underlying array. </summary>
            <param name="index"> Index to set. Must be inside [0, <see cref="P:PixelEngine.Utilities.Bitflags.Blocks"/>-1] </param>
            <param name="value"> int value to set at block </param>
        </member>
        <member name="P:PixelEngine.Utilities.Bitflags.Item(System.Int32)">
            <summary> Gets or updates a single flag  </summary>
            <param name="index"> Absolute index of bit to set or get </param>
            <returns> bit value at index </returns>
        </member>
        <member name="T:PixelEngine.Utilities.JsonType">
            <summary>Enum of all types supported by XtoJSON</summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonType.String">
            <summary> Represents a string value </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonType.Boolean">
            <summary> Represents a true/false value </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonType.Number">
            <summary> Represents a numeric value </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonType.Object">
            <summary> Represents an arbitrary object type </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonType.Array">
            <summary> Represents an array of arbitrary values </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonType.Null">
            <summary> Represents a missing value </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonType.Function">
            <summary> Represents a function value </summary>
        </member>
        <member name="T:PixelEngine.Utilities.Json">
            <summary> Quick access to Json parsing and reflection, and other information  </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Json.MAJOR">
            <summary> Major version number </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Json.MINOR">
            <summary> Minor version number </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Json.REV">
            <summary> Sub-minor version Revision number </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Json.VERSION">
            <summary> String representation of current version of library </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Json.Parse(System.String)">
            <summary> Parse a json string into its JsonValue representation. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Json.Parse``1(System.String)">
            <summary> Parses a JSON formatted string directly into a JsonValue derivitive type. </summary>
            <typeparam name="T"> Expected result type. </typeparam>
            <param name="json"> JSON formatted string to parse </param>
            <returns> Object of type T, or null. </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Json.To``1(System.String)">
            <summary> Parses a string, directly into an arbitrary type. Hurr, get it? Json.To&lt;X&gt;</summary>
            <typeparam name="X"> Expected result type. </typeparam>
            <param name="json"> JSON formatted string to parse </param>
            <returns> Object of type T, from data in <paramref name="json"/> </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Json.ToJson(System.Object)">
            <summary> Converts pretty much anything to a JSON string representation of itself </summary>
            <param name="obj"> Value to convert to Json. </param>
            <returns> Json string representation of <paramref name="obj"/>. </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Json.TryParse(System.String)">
            <summary> Trys to parse a json string into a JsonValue representation. 
            if it fails, catches the exception that was thrown, and returns a null</summary>
        </member>
        <member name="M:PixelEngine.Utilities.Json.Reflect(System.Object)">
            <summary> Reflect a code object into a JsonValue representation. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Json.GetValue(PixelEngine.Utilities.JsonValue,System.Type)">
            <summary> Reflect a JsonValue into a specified type.  </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Json.GetValue``1(PixelEngine.Utilities.JsonValue)">
            <summary> Reflect a JsonValue into a specified type. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Json.ReflectInto(PixelEngine.Utilities.JsonObject,System.Object)">
            <summary> Reflect information in a JsonObject into a desitnation code object. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Json.Serialize(System.Object)">
            <summary> Convert some object to a JSON string </summary>
            <param name="o">object to convert</param>
            <returns>Json-formed string or element representing the object parameter</returns>
        </member>
        <member name="M:PixelEngine.Utilities.Json.Deserialize``1(System.String)">
            <summary> Deserializes a JSON string into an object of a given type. </summary>
            <typeparam name="T">Generic type to deserialize as</typeparam>
            <param name="json">Json-Format data string</param>
            <returns>A 'T' object deserialized from the given string.</returns>
        </member>
        <member name="M:PixelEngine.Utilities.Json.Clone``1(System.Object)">
            <summary>
            Creates a clone of the object by reflecting its internal values, and constructing a new object
            using the same values.
            </summary>
            <typeparam name="T">Type of object to get back</typeparam>
            <param name="o">Source data to use</param>
            <returns>A T object with the data provided by o</returns>
        </member>
        <member name="M:PixelEngine.Utilities.Json.ExpectedReflectedType(System.Type)">
            <summary> Get the expected reflected <see cref="T:PixelEngine.Utilities.JsonType"/> of a given <see cref="T:System.Type"/></summary>
        </member>
        <member name="M:PixelEngine.Utilities.Json.ReflectedType(System.Object)">
            <summary> Get the expected type of the reflection of a code object. </summary>
        </member>
        <member name="T:PixelEngine.Utilities.JsonValue">
            <summary> Base class for all representations of Json values </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonValue.NULL">
            <summary> Base JsonNull null reference </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.#ctor">
            <summary> Hidden constructor. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonValue.isNumber">
            <summary> Is this JsonValue a JsonNumber? </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonValue.isString">
            <summary> Is this JsonValue a JsonString? </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonValue.isBool">
            <summary> Is this JsonValue a JsonBoolean? </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonValue.isObject">
            <summary> Is this JsonValue a JsonObject? </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonValue.isArray">
            <summary> Is this JsonValue a JsonArray? </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonValue.isNull">
            <summary> Is this a null? </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonValue.isFunction">
            <summary> Is this a function? </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonValue.Count">
            <summary> How many items are in this JsonValue, given it is a collection? </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonValue.Item(PixelEngine.Utilities.JsonValue)">
            <summary>Indexes the JsonValue with another JsonValue as the index</summary>
            <param name="index">JsonValue to use as an index. Converted to a string for JsonObject, and converted to an int for JsonArray </param>
            <returns>Item at the given index, if the type can be indexed. </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.ContainsKey(System.String)">
            <summary> Does this JsonValue have a given key, when treated as a JsonObject </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.ContainsAllKeys(System.String[])">
            <summary> Does this JsonValue contain all of the keys in a given array, when treated as a JsonObject </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.ContainsAnyKeys(System.String[])">
            <summary> Does this JsonValue contain any of the keys in a given array, when treated as a JsonObject </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.GetString(System.String)">
            <summary> Treat this JsonValue as a JsonObject, and retrieve a string at a given key </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.GetBoolean(System.String)">
            <summary> Treat this JsonValue as a JsonObject, and retrieve a bool at a given key </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.GetFloat(System.String)">
            <summary> Treat this JsonValue as a JsonObject, and retrieve a float at a given key. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.GetInt(System.String)">
            <summary> Treat this JsonValue as a JsonObject, and retrieve an int at a given key. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.GetNumber(System.String)">
            <summary> Treat this JsonValue as a JsonObject, and retrieve a double at a given key. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonValue.boolVal">
            <summary> Get the boolean value of this JsonValue </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonValue.numVal">
            <summary> Get the double value of this JsonValue </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonValue.floatVal">
            <summary> Get the float value of this JsonValue </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonValue.doubleVal">
            <summary> Get the double value of this JsonValue </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonValue.intVal">
            <summary> Get the integer value of this JsonValue </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonValue.stringVal">
            <summary> Get the string value of this JsonValue </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonValue.JsonType">
            <summary> Get the JsonType of this JsonValue. Fixed, based on the subclass. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.ToString">
            <summary> Get the string representation of this JsonValue. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.PrettyPrint">
            <summary> Get a pretty string representation of this JsonValue. Defaults to indentLevel = 0 </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.op_Implicit(System.String)~PixelEngine.Utilities.JsonValue">
            <summary> Implicit conversion from string to JsonValue </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.op_Implicit(System.Boolean)~PixelEngine.Utilities.JsonValue">
            <summary> Implicit conversion from bool to JsonValue </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.op_Implicit(System.Double)~PixelEngine.Utilities.JsonValue">
            <summary> Implicit conversion from double to JsonValue </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.op_Implicit(System.Single)~PixelEngine.Utilities.JsonValue">
            <summary> Implicit conversion from float to JsonValue </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.op_Implicit(System.Int32)~PixelEngine.Utilities.JsonValue">
            <summary> Implicit conversion from int to JsonValue </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.op_Implicit(PixelEngine.Utilities.JsonValue)~System.String">
            <summary> implicit conversion from JsonValue to string </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.op_Implicit(PixelEngine.Utilities.JsonValue)~System.Boolean">
            <summary> implicit conversion from JsonValue to bool </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.op_Implicit(PixelEngine.Utilities.JsonValue)~System.Double">
            <summary> implicit conversion from JsonValue to double </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.op_Implicit(PixelEngine.Utilities.JsonValue)~System.Decimal">
            <summary> implicit conversion from JsonValue to decimal </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.op_Implicit(PixelEngine.Utilities.JsonValue)~System.Single">
            <summary> implicit conversion from JsonValue to float </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.op_Implicit(PixelEngine.Utilities.JsonValue)~System.Int32">
            <summary> implicit conversion from JsonValue to int </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.op_Addition(PixelEngine.Utilities.JsonValue,PixelEngine.Utilities.JsonValue)">
            <summary> Plus operator on JsonValues </summary>
            <param name="lhs">Left Hand Side</param>
            <param name="rhs">Right Hand Side</param>
            <returns> Javascript equivlent of LHS + RHS </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.op_Subtraction(PixelEngine.Utilities.JsonValue,PixelEngine.Utilities.JsonValue)">
            <summary> Minus operator on JsonValues </summary>
            <param name="lhs">Left Hand Side</param>
            <param name="rhs">Right Hand Side</param>
            <returns> Javascript equivlent of LHS - RHS </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.op_Multiply(PixelEngine.Utilities.JsonValue,PixelEngine.Utilities.JsonValue)">
            <summary> Minus operator on JsonValues </summary>
            <param name="lhs">Left Hand Side</param>
            <param name="rhs">Right Hand Side</param>
            <returns> Javascript equivlent of LHS * RHS </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.op_Division(PixelEngine.Utilities.JsonValue,PixelEngine.Utilities.JsonValue)">
            <summary> Minus operator on JsonValues </summary>
            <param name="lhs">Left Hand Side</param>
            <param name="rhs">Right Hand Side</param>
            <returns> Javascript equivlent of LHS / RHS </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.op_Inequality(PixelEngine.Utilities.JsonValue,System.Object)">
            <summary> not-equal operator for JsonValues </summary>
            <param name="a">Left Hand Side</param>
            <param name="b">Right Hand Side</param>
            <returns>the inversion of (a == b) </returns>
        </member>
        <member name="F:PixelEngine.Utilities.JsonValue.NUMBER_TOLERANCE">
            <summary> Maximum PERCENTAGE difference for two JsonNumbers to be considered equal. Default is 1E-16, or .0000000000001% </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.op_Equality(PixelEngine.Utilities.JsonValue,System.Object)">
            <summary> Override for == operator.
            If a and b are of compatible types, attempts to compare their equality.
            It first checks their references, and returns true if both are the same address.
            
            Then:
            If they are numbers, it takes their difference over their sum, and returns true if it differes by a very small percentage (1E-16).
            If they are bools or strings, in compares their internal representations.
            If one is null, it checks against the JsonNull special value.
            </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.Equals(System.Object)">
            <summary>
            Equality Comparison from any JsonValue type to any object
            This is more in depth than a plain '==' comparison, which defaults to references
            Recursively checks for equality on arrays/objects.
            </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.GetHashCode">
            <summary> Uses base implementation of GetHashCode. This method is overidden here since Equals is overidden, but only objects/arrays will inherit this version. </summary>
            <returns> Base 'object' hash code. </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValue.DeepCopy">
            <summary> Creates a 'deep copy' of this object, in terms of JsonObject and JsonArray references. </summary>
            <returns> Deep copy of this object. </returns>
        </member>
        <member name="T:PixelEngine.Utilities.JsonFunction">
            <summary> Represents a function in the context of a JsonObject, with parameters contained in a JsonArray. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonFunction.EMPTY_FUNCTION">
            <summary> Empty Function that does nothing and returns null. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonFunction.func">
            <summary> Function reference. Parameters are (context, params), returns a JsonValue </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonFunction.boundContext">
            <summary> A context object that has been bound to this function, if any. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonFunction.#ctor">
            <summary> Default constructor that wraps <see cref="F:PixelEngine.Utilities.JsonFunction.EMPTY_FUNCTION"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonFunction.#ctor(System.Func{PixelEngine.Utilities.JsonValue})">
            <summary> Constructor that wraps a function just returning a JsonValue. </summary>
            <param name="func"> Function to wrap that takes no context/parameters and returns a JsonValue. </param>
        </member>
        <member name="M:PixelEngine.Utilities.JsonFunction.#ctor(System.Func{PixelEngine.Utilities.JsonObject,PixelEngine.Utilities.JsonValue})">
            <summary> Constructor that wraps a function taking a JsonObject and returning a JsonValue. </summary>
            <param name="func"> Function that takes a JsonObject context, but no parameters, and returns a JsonValue. </param>
        </member>
        <member name="M:PixelEngine.Utilities.JsonFunction.#ctor(System.Func{PixelEngine.Utilities.JsonObject,PixelEngine.Utilities.JsonArray,PixelEngine.Utilities.JsonValue})">
            <summary> Constructor that wraps a function taking a JsonObject and JsonArray, and returning a JsonValue. </summary>
            <param name="func"> Function that takes a JsonObject context, and JsonArray parameters, and returns a JsonValue. </param>
        </member>
        <member name="M:PixelEngine.Utilities.JsonFunction.Invoke(PixelEngine.Utilities.JsonObject,PixelEngine.Utilities.JsonArray)">
            <summary> Invokes the wrapped function with the given <paramref name="context"/> and <paramref name="prams"/>. </summary>
            <param name="context"> JsonObject holding the context of the invocation, if one has not been bound. </param>
            <param name="prams"> Parameters passed into the function </param>
            <returns> JsonValue generated by the function call </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonFunction.Bind(PixelEngine.Utilities.JsonObject)">
            <summary> Creates a copy of this function, bound to a given context </summary>
            <param name="context"> Context object to bind the function to </param>
            <returns> Copy of this JsonFunction, bound to a given context object. </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonFunction.Unbind">
            <summary> Pretty sure this is yagni, but creates a copy of this function, bound to no context. </summary>
            <returns> Copy of this JsonFunction, with no bound context object. </returns>
        </member>
        <member name="P:PixelEngine.Utilities.JsonFunction.JsonType">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.JsonFunction.PrettyPrint">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.JsonFunction.ToString">
            <inheritdoc />
        </member>
        <member name="T:PixelEngine.Utilities.JsonValueCollection">
            <summary> Base class for JsonValues that hold a group of objects </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonValueCollection.JsonVALUE_SEPARATOR">
            <summary> Internal value separator </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValueCollection.#ctor">
            <summary> Hidden internal constructor </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValueCollection.CollectionToPrettyPrint">
            <summary> Create a pretty string representation of this collection </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValueCollection.CollectionToString">
            <summary> Create a compact string representation of this collection </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValueCollection.ToString">
            <summary> Create a compact string representation of this collection </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonValueCollection.PrettyPrint">
            <summary> Create a pretty string representation of this collection </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonValueCollection.BeginMarker">
            <summary> Definition for begining marker character </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonValueCollection.EndMarker">
            <summary> Definition for ending marker character </summary>
        </member>
        <member name="T:PixelEngine.Utilities.JsonNull">
            <summary> Represents a null as a JsonObject </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonNull._value">
            <summary> internal representatino </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonNull.instance">
            <summary> Reference to only instance of JsonNull </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonNull.#ctor">
            <summary> private constructor </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonNull.numVal">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.JsonNull.doubleVal">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.JsonNull.floatVal">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.JsonNull.intVal">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.JsonNull.stringVal">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.JsonNull.JsonType">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.JsonNull.ToString">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.JsonNull.PrettyPrint">
            <inheritdoc />
        </member>
        <member name="T:PixelEngine.Utilities.JsonBool">
            <summary> bool type represented as a JsonValue. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonBool._value">
            <summary> internal representation </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonBool.TRUE">
            <summary> 'true' instance </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonBool.FALSE">
            <summary> 'false' instance </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonBool.stringVal">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.JsonBool.intVal">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.JsonBool.numVal">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.JsonBool.floatVal">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.JsonBool.doubleVal">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.JsonBool.boolVal">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.JsonBool.JsonType">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.JsonBool.op_Implicit(System.Boolean)~PixelEngine.Utilities.JsonBool">
            <summary> Implicit conversion from bool to JsonBool </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonBool.Get(System.Boolean)">
            <summary> Use a boolean value to access one of the JsonBool instances </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonBool.#ctor(System.Boolean)">
            <summary> Private constructor </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonBool.ToString">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.JsonBool.PrettyPrint">
            <inheritdoc />
        </member>
        <member name="T:PixelEngine.Utilities.JsonNumber">
            <summary> Representation of a number as a JsonValue </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonNumber.JsonType">
            <inheritdoc />
        </member>
        <member name="F:PixelEngine.Utilities.JsonNumber.formatter">
            <summary> Conversion between strings and numbers </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonNumber._value">
            <summary> Internal representation </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonNumber.stringVal">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.JsonNumber.numVal">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.JsonNumber.doubleVal">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.JsonNumber.floatVal">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.JsonNumber.intVal">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.JsonNumber.#ctor(System.Double)">
            <summary> Internal hidden constructor </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonNumber.#ctor(System.Int32)">
            <summary> int constructor </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonNumber.#ctor(System.Single)">
            <summary> float constructor </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonNumber.#ctor(System.Decimal)">
            <summary> decimal constructor </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonNumber.#ctor(System.Byte)">
            <summary> byte constructor </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonNumber.ToString">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.JsonNumber.PrettyPrint">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.JsonNumber.op_Implicit(System.Double)~PixelEngine.Utilities.JsonNumber">
            <summary> Implicit conversion from double to JsonNumber </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonNumber.op_Implicit(System.Decimal)~PixelEngine.Utilities.JsonNumber">
            <summary> Implicit conversion from double to JsonNumber </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonNumber.op_Implicit(System.Single)~PixelEngine.Utilities.JsonNumber">
            <summary> Implicit conversion from double to JsonNumber </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonNumber.op_Implicit(System.Int32)~PixelEngine.Utilities.JsonNumber">
            <summary> Implicit conversion from double to JsonNumber </summary>
        </member>
        <member name="T:PixelEngine.Utilities.JsonString">
            <summary> Representation of a string as a JsonValue </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonString._value">
            <summary> Internal representation </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonString.numVal">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.JsonString.doubleVal">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.JsonString.intVal">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.JsonString.floatVal">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.JsonString.stringVal">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.JsonString.JsonType">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.JsonString.op_Implicit(System.String)~PixelEngine.Utilities.JsonString">
            <summary> Implicit conversion from string to JsonString </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonString.op_Implicit(PixelEngine.Utilities.JsonString)~System.String">
            <summary> Implicit conversion from JsonString to string </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonString.#ctor(System.String)">
            <summary> Constructor </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonString.GetHashCode">
            <summary> Get the hash code of this object. Wraps through to the string inside of it. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonString.ToString">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.JsonString.PrettyPrint">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.JsonString.ToJsonString(System.String)">
            <summary> Conversion for representation inside of Json </summary>
        </member>
        <member name="T:PixelEngine.Utilities.JsonObject">
            <summary> Representation of arbitrary object types as JsonObjects </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.ParseCSV(System.String,System.Char,System.Int32)">
            <summary>
            Parses a standard CSV-format spreadsheet into a JsonObject.
            Requires that the top row is a header row with names for the columns.
            Each row in the CSV becomes another JsonObject, inserted into the first object
            based on the value in a specified column.
            For any row, if a column is not present, it does not add a key/value pair for that column.
            The separator can also be specified.
            Defaults to using the left-most column as the index, and a comma (',') as the separator.
            </summary>
            <param name="csv">string containing CSV formatted spreadsheet to parse</param>
            <param name="sep">separator character. defaults to ','</param>
            <param name="keyIndex">index of column to use as a 'key'</param>
            <returns>CSV formatted spreadsheet converted into a JsonObject</returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.DefaultGenerator">
            <summary> Default method for generating a Dictionary used to store data. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonObject._DictionaryGenerator">
            <summary> Private reference to the </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonObject.DictionaryGenerator">
            <summary> The current storage Dictionary generator that is being used. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonObject.data">
            <summary> Internal representation of information. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonObject.JsonType">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.JsonObject.Count">
            <summary> Number of Key/Value pairs in the JsonObject </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonObject.IsEmpty">
            <summary> Returns true if the collection is empty. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonObject.Item(PixelEngine.Utilities.JsonValue)">
            <summary> Indexes this JsonObject with a given key. Strings are perferred, but any JsonValue will be converted to a String and used. </summary>
            <param name="key"> JsonValue to use to index this JsonObject. </param>
            <returns> JsonValue existing at the given <paramref name="key"/>, or JsonNull.instance if the key is not in the object. </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.ContainsKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.ContainsAnyKeys(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.ContainsAllKeys(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Has(System.String)">
            <summary> Does this object have a property defined as <paramref name="key"/>?</summary>
            <param name="key"> Name of property to check. </param>
            <returns> True if property exists, false otherwise. </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Has``1(System.String)">
            <summary> Does this object have a property defined as <paramref name="key"/> that matches <typeparamref name="T"/>? </summary>
            <typeparam name="T"> JsonValue based type to match </typeparam>
            <param name="key"> Key to check </param>
            <returns> true if <paramref name="key"/> exists, and matches the given type, otherwise false </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.HasAll(System.String[])">
            <summary> Does this object contain all of the given keys? </summary>
            <param name="keys"> Array of keys to check </param>
            <returns> True if this object has all of the keys, false otherwise </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.HasAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary> Does this object contain all of the given keys? </summary>
            <param name="keys"> Collection of keys to check </param>
            <returns> True if this object has all of the keys, false otherwise </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.HasAny(System.String[])">
            <summary> Does this object contain any of the given keys? </summary>
            <param name="keys"> Array of keys to check </param>
            <returns> True if this object has any single key, false if the object contains NONE of the keys. </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.HasAny(System.Collections.Generic.IEnumerable{System.String})">
            <summary> Does this object contain any of the given keys? </summary>
            <param name="keys"> Array of keys to check </param>
            <returns> True if this object has any single key, false if the object contains NONE of the keys. </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.#ctor">
            <summary> Default Constructor, creates an empty JsonObject with the standard Dictionary. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.#ctor(PixelEngine.Utilities.JsonObject)">
            <summary> Copy infomration from another JsonObject. This is a shallow copy. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.#ctor(System.Collections.Generic.IDictionary{PixelEngine.Utilities.JsonString,PixelEngine.Utilities.JsonValue})">
            <summary> Create an JsonObject, setting its data to the parameter. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.#ctor(PixelEngine.Utilities.JsonValue[])">
            <summary> Initialize with an array of key,value pairs</summary>
            <param name="pairs">Pairs of values to use. Must be even in length, and contain 'JsonString,JsonValue' pairs</param>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Clone">
            <summary> Create a shallow copy of this object </summary>
            <returns> Shallow copy of this object </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Add(PixelEngine.Utilities.JsonString,PixelEngine.Utilities.JsonValue)">
            <summary> Add a key:value pair </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.AddAll``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,``0}})">
            <summary> Adds all of the entries in a Dictionary &lt;string, JsonValue&gt;
            or other type of Enumerable group of pairs of &lt;string, JsonValue&gt; </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.AddAllReflect``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,``0}})">
            <summary> Add all of the entries in a grouping of &lt;string, object&gt; pairs, reflecting each value. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Get``1(System.String)">
            <summary> Attempt to get a T from a given key. Reflects the JsonValue into a T </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.GetPrimitive``1(System.String)">
            <summary> Attempt to get a primitive type from a given key. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.GetPrimitive(System.String,System.Type)">
            <summary> Attempt to get a primitive type from a given key and given type.</summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Add(PixelEngine.Utilities.JsonObject)">
            <summary> Add all information from another JsonObject. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary> Add all information from an IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt; </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Double}})">
            <summary> Add all information from an IEnumerable&lt;KeyValuePair&lt;string, double&gt;&gt; </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Int16}})">
            <summary> Add all information from an IEnumerable&lt;KeyValuePair&lt;string, short&gt;&gt; </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Single}})">
            <summary> Add all information from an IEnumerable&lt;KeyValuePair&lt;string, float&gt;&gt; </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Int64}})">
            <summary> Add all information from an IEnumerable&lt;KeyValuePair&lt;string, long&gt;&gt; </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Byte}})">
            <summary> Add all information from an IEnumerable&lt;KeyValuePair&lt;string, byte&gt;&gt; </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Int32}})">
            <summary> Add all information from an IEnumerable&lt;KeyValuePair&lt;string, int&gt;&gt; </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Extract``1(System.String,``0)">
            <summary>Try to get a T from this object. 
            Returns the T if it can be found.
            If a T cannot be found, returns a default value. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Pull``1(System.String,``0)">
            <summary>Try to get a T from this object. 
            Returns the T if it can be found.
            If a T cannot be found, returns a default value. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.ToJsonArray">
            <summary> Converts this JsonObject into a JsonArray, containing only the values in the object, in an arbitrary order. </summary>
            <returns>JsonArray containing all JsonValues in this JsonObject</returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.System#Collections#IEnumerable#GetEnumerator">
            <summary> Returns the internal Dictionary's Enumerator </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.GetEnumerator">
            <summary> Returns the internal Dictionary's Enumerator</summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonObject.Pairs">
            <summary> Returns the internal Dictionary's Enumerator </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.GetData">
            <summary> Returns the internal dictionary. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.ToDictOfBool">
            <summary> Gets a collection of all &lt;string, bool&gt; pairs </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.ToDictOfString">
            <summary> Gets a collection of all &lt;string, string&gt; pairs </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.ToDictOfDouble">
            <summary> Gets a collection of all &lt;string, double&gt; pairs </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.ToDictOfFloat">
            <summary> Gets a collection of all &lt;string, float&gt; pairs </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.ToDictOfInt">
            <summary> Gets a collection of all &lt;string, int&gt; pairs </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Remove(System.String)">
            <summary> Removes the KeyValue pair associated with the given key </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Mask(System.Collections.Generic.IEnumerable{PixelEngine.Utilities.JsonString})">
            <summary> Creates a new JsonObject that has a subset of the original's KeyValue pairs </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Mask(System.Collections.Generic.IEnumerable{System.String})">
            <summary> Creates a new JsonObject that has a subset of the original's KeyValue pairs,
            using a list of strings as the mask. </summary>
            <param name="mask">collection of strings to use as the mask</param>
            <returns>A copy of the original JsonObject, only containing keys that are in the mask. </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Mask(PixelEngine.Utilities.JsonObject)">
            <summary> Creates a new JsonObject that has a subset of the original's Key value pairs,
            using the boolean value of pairs within another JsonObject </summary>
            <param name="mask">JsonObject containing mask pairs. Only considers pairs of (string, bool) </param>
            <returns>A copy of the original JsonObject with the mask applied to it. </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Clear">
            <summary> Removes all KeyValue pairs from the JsonObject. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.SetRecursively(PixelEngine.Utilities.JsonObject)">
            <summary> Sets keys of this JsonObject, and any children in both it and other </summary>
            <param name="other">Other data to override this object's data with</param>
            <returns>A reference to the original JsonObject, after it has been modified with the values from 'other'</returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.CombineRecursively(PixelEngine.Utilities.JsonObject)">
            <summary> Combines this and <paramref name="other"/> into a new JsonObject, recursively </summary>
            <param name="other">other JsonObject to combine with </param>
            <returns>A new JsonObject with the combined values of this and other (in order) </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.CombineRecursively(PixelEngine.Utilities.JsonObject,PixelEngine.Utilities.JsonObject)">
            <summary> Combines <paramref name="first"/> and <paramref name="second"/> into a new JsonObject, recursively </summary>
            <param name="first">First JsonObject</param>
            <param name="second">Second JsonObject</param>
            <returns>A new JsonObject with the combined values of first and second (in order)</returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Combine(PixelEngine.Utilities.JsonObject)">
            <summary> Combines this JsonObject with <paramref name="other"/>, into a new JsonObject. </summary>
            <param name="other">Other JsonObject to combine with </param>
            <returns>A new JsonObject containing values from this and <paramref name="other"/> </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Combine(PixelEngine.Utilities.JsonObject,PixelEngine.Utilities.JsonObject)">
            <summary> Combines <paramref name="first"/> and <paramref name="second"/> into a new JsonObject </summary>
            <param name="first">First JsonObject</param>
            <param name="second">Second JsonObject</param>
            <returns>A new JsonObject with the combined values of first and second (in order)</returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Set(PixelEngine.Utilities.JsonObject)">
            <summary> Takes all of the KeyValue pairs from the other object, and sets this object to have the same values for those keys. </summary>
            <param name="other">Other object holding values to set</param>
            <returns>The same object that this method was called on, after it has been modified</returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Set(PixelEngine.Utilities.JsonObject,System.String[])">
            <summary> Takes a given subset of key/value pairs from another object and applies them to his object. </summary>
            <param name="other">Other object holding values to set </param>
            <param name="lim">Subset of keys to set on the current object, given <paramref name="other"/> also contains them.</param>
            <returns>The same object that this method was called on, after it has been modified</returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Set``1(System.Collections.Generic.Dictionary{System.String,``0})">
            <summary> Takes all of the pairs from a dictionary, 
            and sets this object to have the JsonValue version of the Values associated with the key </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Set(System.String,PixelEngine.Utilities.JsonValue)">
            <summary> Sets a key to a value. Supports assignment when indexers are not available. </summary>
            <returns> The same object that it was called on.</returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.Same(PixelEngine.Utilities.JsonObject,System.String[])">
            <summary>
            Compares keys between two JsonObjects
            If the values of the keys are the same (including 'not being there'), returns true.
            If any of the keys exists in one but not the other, or values at the keys are different, returns false.
            Optionally, an array of keys can be provided to tell it what set to check.
            </summary>
            <param name="other">Other object to chec </param>
            <param name="stuff">Subset of keys to check. Optional</param>
            <returns></returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.ToString">
            <summary> Turns this JsonObject into a compact string. </summary>
            <returns> String containing begin/end braces, All Key/Value pairs inside of the current JsonObject, without any excess whitespace. </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonObject.PrettyPrint">
            <summary> Pretty prints the given JsonObject into a easily human-readable string. </summary>
            <returns> PrettyPrinted string version of this object </returns>
        </member>
        <member name="T:PixelEngine.Utilities.JsonArray">
            <summary> Representation of an array of objects </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.ParseCSV(System.String,System.Char)">
            <summary>
            Parses a standard CSV-format spreadsheet into a JsonArray.
            Requires that the top row is a header row with names for the columns.
            Each row in the CSV becomes another JsonObject, inserted into the array.
            For any row, if a column is not present, it does not add a key/value pair for that column.
            The separator can also be specified.
            Defaults to using a comma (',') as the separator.
            </summary>
            <param name="csv">string containing CSV formatted spreadsheet to parse</param>
            <param name="sep">separator character. defaults to ','</param>
            <returns>CSV formatted spreadsheet converted into a JsonArray</returns>
        </member>
        <member name="F:PixelEngine.Utilities.JsonArray.list">
            <summary> Internal representation of data </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.GetList">
            <summary> Get the internal representation of data </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonArray.JsonType">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.JsonArray.Count">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.JsonArray.Item(PixelEngine.Utilities.JsonValue)">
            <summary> Index this JsonArray with a given JsonValue. Integers are preferred, but any value will be converted to an integer and then used. </summary>
            <param name="index"> Index to check at </param>
            <returns> The JsonValue that exists at the given <paramref name="index"/>, or JsonNull.instance if the index is out of range. </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.#ctor">
            <summary> Default Constructor, creates an empty list </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.#ctor(System.Collections.Generic.List{PixelEngine.Utilities.JsonValue})">
            <summary> Creates a new JsonArray using a given list as its internal data. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.#ctor(PixelEngine.Utilities.JsonArray)">
            <summary> Creates a new JsonArray and copies all elements from another list. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.#ctor(PixelEngine.Utilities.JsonValue[])">
            <summary> Creates a new JsonArray with an array of values</summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.op_Implicit(System.Array)~PixelEngine.Utilities.JsonArray">
            <summary> Convert arbitrary Array to JsonArray </summary>
            <param name="a">Array to convert </param>
            <returns>JsonArray with reflections of all objects in <paramref name="a"/></returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.Clone">
            <summary> Creates a copy of this JsonArray </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.Add(PixelEngine.Utilities.JsonValue)">
            <summary> Adds a single JsonValue into this list </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.AddAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary> Add all items in an arbitrary array, and return the modified object. </summary>
            <param name="arr">Array to add</param>
            <returns>The object on which this method was called</returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.AddAllReflect``1(System.Collections.Generic.IEnumerable{``0})">
            <summary> Add reflections of all objects that are contained in a collection </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.Clear">
            <summary> Remove all objects from this JsonArray </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.Contains(PixelEngine.Utilities.JsonValue)">
            <summary> Does this array contain a specific JsonValue? </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.IndexOf(PixelEngine.Utilities.JsonValue)">
            <summary> What is the index of a specific JsonValue </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.Remove(PixelEngine.Utilities.JsonValue)">
            <summary> Remove a given JsonValue from the JsonArray </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.Insert(System.Int32,PixelEngine.Utilities.JsonValue)">
            <summary> Insert a JsonValue at a specific position </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.RemoveAt(System.Int32)">
            <summary> Remove a JsonValue from a specific index </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.System#Collections#IEnumerable#GetEnumerator">
            <summary> Returns the internal list's Enumerator </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.GetEnumerator">
            <summary> Returns the internal list's Enumerator </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.Get``1(System.Int32)">
            <summary> Get an object at a given <paramref name="index"/>, as a the given type <typeparamref name="T"/>. </summary>
            <typeparam name="T"> Generic type parameter of object to get </typeparam>
            <param name="index"> Index in this array to use </param>
            <returns> Object at the given <paramref name="index"/>, interpreted as type <typeparamref name="T"/> </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.Pull``1(System.Int32,``0)">
            <summary> Pulls a value from this array at the given index, as the given type, or the given default value. </summary>
            <typeparam name="T"> Generic type parameter </typeparam>
            <param name="index"> Index in this array to use </param>
            <param name="defaultValue"> Default value if not present or conversion is not possible </param>
            <returns></returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.FindObjectBy(System.String,System.String)">
            <summary>
            Searches through the array for an object with a key matching a string value
            </summary>
            <param name="key">Key to search for </param>
            <param name="value">String to search for </param>
            <returns>first object containing the (key:value) pair</returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.FindObjectBy(System.String,System.Double,System.Double)">
            <summary>
            Searches through the array for an object with a key matching a string value
            </summary>
            <param name="key">Key to search for </param>
            <param name="value">Value to search for </param>
            <param name="tolerance">tolerance of comparison (default = .001)</param>
            <returns>first object containing the (key:value) pair inside of the tolerance range</returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.FindObjectsBy(System.String,System.String)">
            <summary>
            Finds ALL objects that have a pair with (key:value)
            </summary>
            <param name="key">Key to look for </param>
            <param name="value">Value to look for </param>
            <returns>JsonArray of all matching objects, or an empty JsonArray if none match</returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.FindObjectsBy(System.String,System.Double,System.Double)">
            <summary>
            Finds ALL objects that have a pair with (key:value)
            </summary>
            <param name="key">Key to look for </param>
            <param name="value">Value to look for </param>
            <param name="tolerance">tolerance of comparison (default = .001)</param>
            <returns>JsonArray of all matching objects, or an empty JsonArray if none match</returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.OnlyNumbersToArray">
            <summary> Get an array of all JsonNumbers as double values  </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.OnlyNumbersToList">
            <summary> Get a list of all JsonNumbers as double values </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.OnlyIntToArray">
            <summary> Get an array of all JsonNumbers as int values  </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.OnlyIntToList">
            <summary> Get a list of all JsonNumbers as int values  </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.OnlyFloatsToArray">
            <summary> Get an array of all JsonNumbers as float values  </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.OnlyFloatToList">
            <summary> Get an list of all JsonNumbers as float values  </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.OnlyBoolToArray">
            <summary> Get an array of all JsonBooleans as bool values  </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.OnlyBoolToList">
            <summary> Get a list of all JsonBooleans as bool values  </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.OnlyStringsToArray">
            <summary> Get an array of all JsonStrings as string values  </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.OnlyStringToList">
            <summary> Get a list of all JsonStrings as string values  </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.ToStringArray">
            <summary> Get an array of all primitive elements in the JsonArray as strings </summary>
            <returns> A string[] of all primitive elements in the JsonArray as strings </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.ToStringList">
            <summary> Get a List&lt;string&gt; of all primitive elements in the JsonArray as strings. </summary>
            <returns> List&lt;string&gt; of all primitive values in the JsonArray as strings </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.OnlyObjectToArray">
            <summary> Get an array of only JsonObjects values  </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.OnlyObjectToList">
            <summary> Get a list of only JsonObjects values  </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.ToArrayOf``1">
            <summary> Get an array of all JsonObjects as T values  </summary>
            <returns> T[] of all of the JsonObjects in this JsonArray reflected into objects of type 'T' </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.ToListOf``1">
            <summary> Get a list of all JsonObjects as T values  </summary>
            <returns> List&lt;T&gt; of all of the JsonObjects in this JsonArray reflected into objects of type 'T' </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.ToObjectArray(System.Type)">
            <summary> Get an array of all JsonObjects as object values  </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.ToObjectList(System.Type)">
            <summary> Get a list of all JsonObjects as object values  </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.ToString">
            <summary> Prints out this JsonArray into a string with only one line. </summary>
            <returns> String containing all of the ToString'd elements of the contents of this JsonArray. </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonArray.PrettyPrint">
            <summary> PrettyPrints the content of this JsonArray into an easily human readable string. </summary>
            <returns> PrettyPrinted string containing the content of this JsonArray</returns>
        </member>
        <member name="T:PixelEngine.Utilities.JsonPrettyPrinter">
            <summary> Provides thread-safe pretty printing </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonPrettyPrinter.indentLevel">
            <summary> Current indent level </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonPrettyPrinter.PrettyPrint(PixelEngine.Utilities.JsonObject,System.Text.StringBuilder)">
            <summary> PrettyPrints a given JsonObject. </summary>
            <param name="obj">JsonObject to PrettyPrint</param>
            <param name="str">StringBuilder to append to. If null, a new StringBuilder is created. This is also returned when the function ends.</param>
            <returns>String builder holding pretty printed information</returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonPrettyPrinter.PrettyPrint(PixelEngine.Utilities.JsonArray,System.Text.StringBuilder)">
            <summary> PrettyPrints a given JsonArray.</summary>
            <param name="arr">JsonArray to PrettyPrint</param>
            <param name="str">StringBuilder to append to. If null, a new StringBuilder is created. This is also returned when the function ends.</param>
            <returns>String builder holding pretty printed information</returns>
        </member>
        <member name="T:PixelEngine.Utilities.JsonReflector">
            <summary> Class containing Reflection Code </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonReflector.toArrayOf">
            <summary> Grab method info for JsonArray.ToArrayOf&lt;T&gt;() for generic insertion  </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonReflector.toListOf">
            <summary> Grab method info for JsonArray.ToListOf&lt;T&gt;() for generic insertion  </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonReflector.toNullable">
            <summary> Grab method info for JsonReflector.ToNullable&lt;T&gt;() for generic insertion </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonReflector.publicMembers">
            <summary> Binding flags for easy usage </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonReflector.publicMember">
            <summary> Binding flags for easy usage </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonReflector.blacklist">
            <summary> Contains all blacklisted types (reflect to null by default) </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonReflector.generators">
            <summary> Custom generators for types. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonReflector.RegisterGenerator``1(System.Func{PixelEngine.Utilities.JsonValue,System.Object})">
            <summary> Registers a custom generator for the given type </summary>
            <typeparam name="T"> Generic type to know what type to bind to </typeparam>
            <param name="generator"> Function taking a JsonValue and yielding a T </param>
        </member>
        <member name="M:PixelEngine.Utilities.JsonReflector.UnregisterGenerator``1">
            <summary> Removes the generator for the given type, if you need to clean up your mess. </summary>
            <typeparam name="T"> Generic type to know what type to unbind </typeparam>
        </member>
        <member name="M:PixelEngine.Utilities.JsonReflector.Blacklist(System.Type)">
            <summary> Blacklist a given type from being reflected </summary>
            <param name="t">Type to blacklist</param>
        </member>
        <member name="M:PixelEngine.Utilities.JsonReflector.UnBlacklist(System.Type)">
            <summary> Remove a given type from being blacklisted</summary>
            <param name="t">Type to unblacklist</param>
        </member>
        <member name="M:PixelEngine.Utilities.JsonReflector.NullableOfNull``1">
            <summary> Create an empty nullable of any struct type </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonReflector.ToNullable``1(PixelEngine.Utilities.JsonValue)">
            <summary> Coerce a JsonValue into a nullable struct </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonReflector.IsNullableType(System.Type)">
            <summary> Is the given type a nullable, generic type? </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonReflector.loaded">
            <summary> Did the Load() function run? (Should always return true) </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonReflector.GetReflectedValue(PixelEngine.Utilities.JsonValue,System.Type)">
            <summary> Reflect a JsonValue based on a given type. Attempts to return an object, 
            so return value may be null even if a value type is requested. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonReflector.ReflectInto(PixelEngine.Utilities.JsonObject,System.Object)">
            <summary> Reflect value stored in source JsonObject into a destination object. 
            Will recusively reflect parallel objects into their fields when applicable. </summary>
            <param name="source">JsonObject with data</param>
            <param name="destination">Object to apply data from source to</param>
        </member>
        <member name="M:PixelEngine.Utilities.JsonReflector.Reflect(System.Object)">
            <summary> Get a JsonRepresentation of a given code object. 
            Creates a new JsonValue based on what is needed. </summary>
            <param name="source">object to reflect</param>
            <returns>JsonValue representing the same data as the source object</returns>
        </member>
        <member name="T:PixelEngine.Utilities.JsonDeserializeFailedException">
            <summary> Exception thrown by <see cref="T:PixelEngine.Utilities.JsonDeserializer"/> when it is given bad input </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonDeserializeFailedException.state">
            <summary> Current parser state </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonDeserializeFailedException.line">
            <summary> Current line number </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonDeserializeFailedException.col">
            <summary> Current number of characters read on line </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonDeserializeFailedException.#ctor(System.String,PixelEngine.Utilities.JsonDeserializer)">
            <summary> Constructor </summary>
        </member>
        <member name="T:PixelEngine.Utilities.JsonDeserializer">
            <summary> Class holding logic for parsing Json text into JsonValues 
            A new instance of this class is created automatically by Json.Parse() </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonDeserializer.json">
            <summary> Json text that is being parsed </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonDeserializer.__index">
            <summary> Internal index. Do not modify outside of <see cref="P:PixelEngine.Utilities.JsonDeserializer.index"/>.set </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonDeserializer.index">
            <summary> Current position. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonDeserializer.line">
            <summary> Current line number </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonDeserializer.col">
            <summary> Current number of characters read on line </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonDeserializer.cur">
            <summary> quick access to the current character </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonDeserializer.prev">
            <summary> quick access to the previous character, or a nullchar </summary>
        </member>
        <member name="P:PixelEngine.Utilities.JsonDeserializer.next">
            <summary> quick access to the next character, or a nullchar </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonDeserializer.#ctor(System.String)">
            <summary> Constructor. Starts parsing from the begining of a given string </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonDeserializer.Deserialize">
            <summary> Deserialize the Json text, and get back the resulting JsonValue </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonDeserializer.ProcessValue">
            <summary> Process the next JsonValue, and recursively process any other necessary 
            JsonValues stored within. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonDeserializer.ProcessString">
            <summary> Logic for parsing content of a string </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonDeserializer.ProcessArray">
            <summary> Logic for parsing contents of a JsonArray </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonDeserializer.ProcessObject">
            <summary> Logic for parsing the contents of a JsonObject</summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonDeserializer.MoveNext">
            <summary> Logic for moving over characters until the next control character </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonDeserializer.IsAlpha(System.Char)">
            <summary> Helper for testing 'alpha' characters (which can start keys directly) </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonDeserializer.IsAlphaNum(System.Char)">
            <summary> Helper for testing 'alpha' characters (which are valid direct key characters) </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonDeserializer.AtComment">
            <summary> Helper for determining being at a comment marker </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonDeserializer.ProcessKey">
            <summary> Logic for extracting a string value from the text </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonDeserializer.SkipWhitespaceEnd">
            <summary> Logic to skip over whitespace until a non whitespace character or the end of the file. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonDeserializer.SkipWhitespace">
            <summary> Logic to skip to the next non-whitepace character </summary>
        </member>
        <member name="T:PixelEngine.Utilities.JsonHelpers">
            <summary> Class containing some helper functions. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonHelpers.TOESCAPE">
            <summary> Escape characters to escape inside of Json text </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonHelpers.ESCAPE_CODES">
            <summary> Escape character codes to use for escapes</summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonHelpers.IsOf(System.Object,System.Type)">
            <summary> Is the type of an object is a given type? </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonHelpers.IsTypeOfEnum(System.Object)">
            <summary> Is an object is of an enum type? </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonHelpers.IsTypeOfArray(System.Object)">
            <summary> Is an object of an array type? </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonHelpers.JsonEscapeString(System.String)">
            <summary> Replace all escapeable characters with their escaped versions. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonHelpers.JsonUnescapeString(System.String)">
            <summary> Replace all escaped characters with their unescaped versions. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.JsonHelpers.numericTypes">
            <summary> Array of numeric types </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonHelpers.IsNumeric(System.Type)">
            <summary> is a type a numeric type? </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonHelpers.IsJsonType(System.Type)">
            <summary> Is the type an actual JSON type? (primitive, object, or array) </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonHelpers.GetNumericValue(System.Object)">
            <summary> Get the numeric value of an object, as a double, regardless of the type that underpins it. </summary>
            <param name="num"> Object containing some numeric data. </param>
            <returns> double value of num </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonHelpers.IsObsolete(System.Reflection.MemberInfo)">
            <summary> Checks a MemberInfo for the System.ObsoleteAttribute </summary>
            <param name="info"> MemberInfo object to inspect </param>
            <returns> True, if the MemberInfo has the System.ObsoleteAttribute decorator, false otherwise. </returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonHelpers.GetNewInstance(System.Type)">
            <summary> Call the constructor of a Type, calling an empty constructor if it exists. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonHelpers.IsWritable(System.Reflection.PropertyInfo)">
            <summary> See if a property has a SET function </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonHelpers.IsReadable(System.Reflection.PropertyInfo)">
            <summary> See if a property has a GET function </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonHelpers.TryListOfWhat(System.Type,System.Type@)">
            <summary> 
            Test if a type implements IListT and determine the type of T. Taken from stack overflow 
            https://stackoverflow.com/questions/1043755/c-sharp-generic-list-t-how-to-get-the-type-of-t/13608408#13608408
            </summary>
            <param name="type">Unknown Type to check</param>
            <param name="innerType">Place to write back to once InnerType of the IList&lt;T&gt; is discovered</param>
            <returns>True If the Unknown Type is an IList&lt;T&gt;, false otherwise</returns>
        </member>
        <member name="T:PixelEngine.Utilities.JsonOperations">
            <summary> Class containing 'functional' operations 
            these operations process numeric information between multiple JsonObjects </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonOperations.Negate(PixelEngine.Utilities.JsonObject,PixelEngine.Utilities.JsonArray)">
            <summary> Get a version of the given object with all of its numbers' sign changed. 
            lim is an optional parameter that limits what fields are used
            if present, all of the strings in it will be processed into the result.
            if absent, all of the strings that are mapped to numbers will be processed into the result. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonOperations.SumOfNumbers(PixelEngine.Utilities.JsonObject,PixelEngine.Utilities.JsonArray)">
            <summary> Sums numbers that are inside of a JsonObject.
            Optionally, another parameter can be provided, lim.
            lim defines what keys are used in the sum. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonOperations.Scale(PixelEngine.Utilities.JsonObject,PixelEngine.Utilities.JsonObject,PixelEngine.Utilities.JsonArray)">
            <summary>
            Multiply two 'vectors' componentwise, and return the result.
            Optionally, another parameter can be provided, lim
            lim defines which dimensions are present in the result.
            without lim, the result contains the INTERSECTION between lhs and rhs as vectors.
            </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonOperations.Multiply(PixelEngine.Utilities.JsonObject,PixelEngine.Utilities.JsonObject,PixelEngine.Utilities.JsonArray)">
            <summary> Multiply the left side object (as a 'vector') by the right hand side object (as a 'matrix').
            a 'vector' is a JsonObject with only string:float value pairs considered.
            a 'matrix' is a JsonObject with only string:'vector' pairs considered.
            Optionally, another parameter can be provided, lim.
            lim defines what the 'dimensions' of the multiplication are.
            if not present, all 'dimensions' are used. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonOperations.MultiplyRow(PixelEngine.Utilities.JsonObject,PixelEngine.Utilities.JsonObject)">
            <summary> Calculates one result of a multiplication of one 'vector' times one 'row' of a matrix </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonOperations.AddNumbers(PixelEngine.Utilities.JsonObject,PixelEngine.Utilities.JsonObject,PixelEngine.Utilities.JsonArray)">
            <summary> Creates the result of the left 'vector' plus the right 'vector' 
            lim is an optional parameter that can be provided to define the 'dimensions' that are used.
            if present, each string contained will be a 'dimension' in the result.
            if absent, the full range of each 'vector' will be considered.
            </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonOperations.Clamp(System.Double,System.Double,System.Double)">
            <summary> Clamp a value. by default range is [0, 1]</summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonOperations.CombineRatios(PixelEngine.Utilities.JsonObject,PixelEngine.Utilities.JsonObject,PixelEngine.Utilities.JsonArray)">
            <summary> Combine two 'vector' JsonObjects as if each number is a ratio between [0, 1]
            combines each 'dimension' as (1 - (1 - a) * (1 - b))
            so if one vector has .5 and the other one has .2, the result will be .6 </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonOperations.GetMatchingKeys(PixelEngine.Utilities.JsonObject,PixelEngine.Utilities.JsonObject)">
            <summary> Gets a list of keys from a JsonObject that match a given rule </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonOperations.ReduceArrays(PixelEngine.Utilities.JsonObject,System.String[],System.Func{PixelEngine.Utilities.JsonArray,PixelEngine.Utilities.JsonValue})">
            <summary> Reduces arrays to single values for the given set of fields </summary>
            <param name="source"> Source Object to reduce arrays within </param>
            <param name="fields"> Fields to check for arrays to reduce </param>
            <param name="reductor"> Function to use to pick a value from the arrays </param>
            <returns></returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonOperations.Xpath(PixelEngine.Utilities.JsonValue,System.String)">
            <summary> Traverses down a path in the given value </summary>
            <param name="src"> Source value to trace </param>
            <param name="path"> path to try to jump down from where we are. </param>
            <returns> Reached JsonValue. <see cref="F:PixelEngine.Utilities.JsonNull.instance"/> if any jump fails</returns>
        </member>
        <member name="M:PixelEngine.Utilities.JsonOperations.XPath``1(PixelEngine.Utilities.JsonValue,System.String)">
            <summary> Traverses down a path in the given value, and coerce the result into the target type. </summary>
            <typeparam name="T">Generic type parameter </typeparam>
            <param name="src"> Source value to trace </param>
            <param name="path"> path to try to jump down from where we are. </param>
            <returns> Reached JsonValue. <see cref="F:PixelEngine.Utilities.JsonNull.instance"/> if any jump fails</returns>
        </member>
        <member name="T:PixelEngine.Utilities.JsonExtensions">
            <summary> Holds extensions for types outside of the JsonValue derived types </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonExtensions.ApplyValues``1(System.Object,``0)">
            <summary> Extension on object to copy arbitrary fields into it from another object. </summary>
            <typeparam name="T"> Generic Type </typeparam>
            <param name="target"> Target to recieve data </param>
            <param name="data"> Object providing the data </param>
        </member>
        <member name="M:PixelEngine.Utilities.JsonExtensions.ParseJson(System.String)">
            <summary> More formal name for Parse() </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonExtensions.DeserializeJson(System.String)">
            <summary> More formal name for Parse() </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonExtensions.ReflectJson(System.Object)">
            <summary> More formal name for Reflect() </summary>
        </member>
        <member name="M:PixelEngine.Utilities.JsonExtensions.SerializeJson(System.Object)">
            <summary> More formal name for Reflect() </summary>
        </member>
        <member name="T:PixelEngine.Utilities.Algorithms">
            <summary> PixelEngine Class to hold some helper algorithms </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Algorithms.Concat``1(``0[][])">
            <summary> Concat some number of arrays together </summary>
            <typeparam name="T"> Generic type parameter </typeparam>
            <param name="items"> Arrays to combine, comma separated </param>
            <returns> One array, with content of all given arrays </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Algorithms.Concat``1(System.Collections.Generic.List{``0}[])">
            <summary> Concat some number of Lists together </summary>
            <typeparam name="T"> Generic type parameter </typeparam>
            <param name="items"> Lists to combine, comma separated </param>
            <returns> One List, with content of all given Lists </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Algorithms.Sort``1(``0[])">
            <summary> Sort a given array </summary> <typeparam name="T"> Generic type parameter </typeparam> <param name="items"> Array to sort </param>
        </member>
        <member name="M:PixelEngine.Utilities.Algorithms.Sort``1(System.Collections.Generic.List{``0})">
            <summary> Sort a given list </summary> <typeparam name="T"> Generic type parameter </typeparam> <param name="items"> List to sort </param>
        </member>
        <member name="M:PixelEngine.Utilities.Algorithms.Sort``1(``0[],System.Comparison{``0})">
            <summary> Sort a given array with a given comparison function </summary> <typeparam name="T"> Generic type parameter </typeparam> 
            <param name="items"> Array to sort </param><param name="comparision">Custom compare function to use</param>
        </member>
        <member name="M:PixelEngine.Utilities.Algorithms.Sort``1(System.Collections.Generic.List{``0},System.Comparison{``0})">
            <summary> Sort a given List with a given comparison function </summary> <typeparam name="T"> Generic type parameter </typeparam> 
            <param name="items"> List to sort </param><param name="comparision">Custom compare function to use</param>
        </member>
        <member name="M:PixelEngine.Utilities.Algorithms.Randomize``1(``0[])">
            <summary> Randomize an array by performing <see cref="P:System.Array.Length"/> random swaps. </summary>
            <typeparam name="T"> Generic type parameter </typeparam>
            <param name="items"> Array to randomize </param>
        </member>
        <member name="M:PixelEngine.Utilities.Algorithms.Randomize``1(System.Collections.Generic.List{``0})">
            <summary> Randomize a list by performing <see cref="P:System.Collections.Generic.List`1.Count"/> random swaps. </summary>
            <typeparam name="T"> Generic type parameter </typeparam>
            <param name="items"> List to randomize </param>
        </member>
        <member name="M:PixelEngine.Utilities.Algorithms.Search``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary> Search a collection for a given item. </summary> <typeparam name="T"> Generic type parameter </typeparam>
            <param name="items"> Collection to search </param> <param name="item"> Item to find </param>
            <returns> First matching item if found, or default value if not found </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Algorithms.Search``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary> Search a collection for an item matching a condition. </summary> <typeparam name="T"> Generic type parameter </typeparam>
            <param name="items"> Collection to search </param> <param name="condition"> Condition to match </param>
            <returns> first item matching condition if found, or default value if not found </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Algorithms.Search``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary> Search a collection for an item matching a condition. </summary> <typeparam name="T"> Generic type parameter </typeparam>
            <param name="items"> Collection to search </param> <param name="condition"> Condition to match </param>
            <returns> first item matching condition if found, or default value if not found </returns>
        </member>
        <member name="T:PixelEngine.Utilities.Noise">
            <summary> Helper class for noise functions </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Noise.ORIGINAL_PERM">
            <summary> Lookup table for permutations. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Noise.perm">
            <summary> Lookup table for permutations. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Noise.Initialized">
            <summary> Workaround for static constructor  </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Noise.Init">
            <summary> Workaround for static constructor  </summary> <returns>true</returns>
        </member>
        <member name="F:PixelEngine.Utilities.Noise.xOff">
            <summary> Current offsets </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Noise.yOff">
            <summary> Current offsets </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Noise.zOff">
            <summary> Current offsets </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Noise.rnd">
            <summary> Randomizer </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Noise.Octaves">
            <summary> Fractal octaves to apply </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Noise.Persistence">
            <summary> Persistance of fractal octaves </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Noise.Seed">
            <summary> Reset the noise </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Noise.Seed(System.Int32)">
            <summary> Reset the noise with a given seed </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Noise.Sample(System.Single)">
            <summary> 1d noise sample </summary>
            <param name="x"> Coordinate of sample </param>
            <returns> Output of Perlin sample </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Noise.Sample(System.Single,System.Single)">
            <summary> 2d noise sample </summary>
            <param name="x"> x coordinate of sample </param>
            <param name="y"> y coordinate of sample </param>
            <returns> Output of Perlin sample </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Noise.Sample(System.Single,System.Single,System.Single)">
            <summary> 3d noise sample </summary>
            <param name="x"> x coordinate of sample </param>
            <param name="y"> y coordinate of sample </param>
            <param name="z"> z coordinate of sample </param>
        </member>
        <member name="M:PixelEngine.Utilities.Noise.FBM(System.Single)">
            <summary> 1d Fractal Brownian Motion noise </summary>
            <param name="x"> coordinate of sample </param>
            <returns> Output of fractal noise sample </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Noise.FBM(System.Single,System.Single)">
            <summary> 2d Fractal Brownian Motion noise </summary>
            <param name="x"> x coordinate of sample </param>
            <param name="y"> y coordinate of sample </param>
            <returns> Output of fractal noise sample </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Noise.FBM(System.Single,System.Single,System.Single)">
            <summary> 3d Fractal Brownian Motion noise </summary>
            <param name="x"> x coordinate of sample </param>
            <param name="y"> y coordinate of sample </param>
            <param name="z"> z coordinate of sample </param>
            <returns> Output of fractal noise sample </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Noise.CreateOffset">
            <summary> Initialize offsets to (0, 100) </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Noise.Fade(System.Single)">
            <summary> Gradiant fading for a given sample </summary>
            <param name="t"> Sample to fade </param>
            <returns> Amount to blend between neighboring samples </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Noise.Lerp(System.Single,System.Single,System.Single)">
            <summary> Linear Interpolation </summary>
            <param name="t"> Proportion to interpolate between left/right values [0..1]</param>
            <param name="a"> "Left" value </param>
            <param name="b"> "Right" value </param>
            <returns> Interpolated value on line between <paramref name="a"/> and <paramref name="b"/> </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Noise.Grad(System.Int32,System.Single)">
            <summary> 1d gradiant sample </summary>
            <param name="hash"> 'random' hash </param>
            <param name="x"> x position </param>
            <returns> Gradient sample for 1d noise </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Noise.Grad(System.Int32,System.Single,System.Single)">
            <summary> 2d gradiant sample </summary>
            <param name="hash"> 'random' hash </param>
            <param name="x"> x position </param>
            <param name="y"> y position </param>
            <returns> Gradient sample for 2d noise </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Noise.Grad(System.Int32,System.Single,System.Single,System.Single)">
            <summary> 3d gradiant sample </summary>
            <param name="hash"> 'random' hash </param>
            <param name="x"> x position </param>
            <param name="y"> y position </param>
            <param name="z"> z position </param>
            <returns> Gradient sample for 3d noise </returns>
        </member>
        <member name="T:PixelEngine.Utilities.StateMachine`1">
            <summary> Helper state machine over an Enum </summary>
            <typeparam name="T"> Generic Enum type </typeparam>
        </member>
        <member name="F:PixelEngine.Utilities.StateMachine`1.ALL_STATES">
            <summary> All possible states. Workaround to avoid static constructor penalty. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.StateMachine`1.Initialize">
            <summary> Gets all possible states. Workaround to avoid static constructor penalty. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.StateMachine`1.CurrentState">
            <summary> Current state </summary>
        </member>
        <member name="F:PixelEngine.Utilities.StateMachine`1.states">
            <summary> Allowed states </summary>
        </member>
        <member name="F:PixelEngine.Utilities.StateMachine`1.transition">
            <summary> Transition function </summary>
        </member>
        <member name="M:PixelEngine.Utilities.StateMachine`1.#ctor">
            <summary> Create a new state machine that can be in any state of the given Enum </summary>
        </member>
        <member name="M:PixelEngine.Utilities.StateMachine`1.#ctor(`0[])">
            <summary> Create a new state machine with a subset of states </summary>
            <param name="states"> Subset of states to use </param>
        </member>
        <member name="M:PixelEngine.Utilities.StateMachine`1.OnTransition(System.Action{`0})">
            <summary> Add a transition callback </summary>
            <param name="transition"> Callback to add to transition function </param>
        </member>
        <member name="M:PixelEngine.Utilities.StateMachine`1.Switch(`0)">
            <summary> Switch into a new state, if possible, and invokes transition function </summary>
            <param name="newState"> New state to switch into. </param>
        </member>
        <member name="T:PixelEngine.Utilities.Clock">
            <summary> Clock helper for timing things. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Clock.#ctor">
            <summary> Create a new Clock </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Clock.Start">
            <summary> Get starting time of clock. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Clock.Last">
            <summary> Last time this clock was sampled. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Clock.Tick">
            <summary> Tick the clock. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Clock.ElapsedSpan">
            <summary> Get the time elapsed since clock was created. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Clock.DeltaSpan">
            <summary> Get the delta since the <see cref="P:PixelEngine.Utilities.Clock.Last"/> <see cref="M:PixelEngine.Utilities.Clock.Tick"/>. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Clock.Elapsed">
            <summary> Get the total time in seconds sinc the <see cref="P:PixelEngine.Utilities.Clock.Start"/> of this clock. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Clock.Delta">
            <summary> Get the delta time in seconds sinc the <see cref="P:PixelEngine.Utilities.Clock.Last"/> <see cref="M:PixelEngine.Utilities.Clock.Tick"/></summary>
        </member>
        <member name="T:PixelEngine.Utilities.Mathf">
            <summary> Like UnityEngine.Mathf, Wrap <see cref="T:System.Math"/> functions to deal with float/int, and some custom functions. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Mathf.PI">
            <summary> PI constant (3.14159274f) </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Mathf.E">
            <summary> PI constant (2.71828182f) </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Mathf.EPSILON">
            <summary> Epsilon constant for normalization (1E-05f) </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Mathf.SQR_EPSILON">
            <summary> Epsilon constant for sqr comaprisons (1E-15f) </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Mathf.COMPARE_EPSILON">
            <summary> Epsilon constant for equality comparisons (9.99999944E-11f) </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Mathf.Infinity">
            <summary> Infinity </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Mathf.NegativeInfinity">
            <summary> Negative Infinity </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Mathf.Deg2Rad">
            <summary> Multiplicative constant for Degrees to Radians conversion ((2f * PI) / 360f) </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Mathf.Rad2Deg">
            <summary> Multiplicative constant for Radians to Degrees conversion (360f / (PI * 2f)) </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Sin(System.Single)">
            <summary> Float wrapper for <see cref="M:System.Math.Sin(System.Double)"/></summary> <param name="f"> Angle in radians </param> <returns> Sin Ratio of angle </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Cos(System.Single)">
            <summary> Float wrapper for <see cref="M:System.Math.Cos(System.Double)"/></summary> <param name="f"> Angle in radians </param> <returns> Cos Ratio of angle </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Tan(System.Single)">
            <summary> Float wrapper for <see cref="M:System.Math.Tan(System.Double)"/></summary> <param name="f"> Angle in radians </param> <returns> Tan Ratio of angle </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Asin(System.Single)">
            <summary> Float wrapper for <see cref="M:System.Math.Asin(System.Double)"/></summary> <param name="f"> Sin Ratio </param> <returns> Angle in radians that produces ratio </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Acos(System.Single)">
            <summary> Float wrapper for <see cref="M:System.Math.Acos(System.Double)"/></summary> <param name="f"> Cos Ratio </param> <returns> Angle in radians that produces ratio </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Atan(System.Single)">
            <summary> Float wrapper for <see cref="M:System.Math.Atan(System.Double)"/></summary> <param name="f"> Tan Ratio </param> <returns> Angle in radians that produces ratio </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Atan2(System.Single,System.Single)">
            <summary> Float wrapper for <see cref="M:System.Math.Atan2(System.Double,System.Double)"/></summary> 
            <param name="x"> x part of ratio </param> <param name="y"> y part of ratio </param> 
            <returns> Angle in radians that produces given ratio </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Sqrt(System.Single)">
            <summary> Float wrapper for <see cref="M:System.Math.Sqrt(System.Double)"/></summary> <param name="f"> Number </param> <returns> Square root of number </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Abs(System.Single)">
            <summary> Float wrapper for <see cref="M:System.Math.Abs(System.Double)"/></summary> <param name="f"> Number </param> <returns> Absolute value of number </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Abs(System.Int32)">
            <summary> wrapper for <see cref="M:System.Math.Abs(System.Int32)"/></summary> <param name="f"> Number </param> <returns> Absolute value of number </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Pow(System.Single,System.Single)">
            <summary> Wrapper for <see cref="M:System.Math.Pow(System.Double,System.Double)"/> </summary>
            <param name="f"> base to raise </param> <param name="p"> power to raise to </param> <returns> Base raised to given power </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Exp(System.Single)">
            <summary> wrapper for <see cref="M:System.Math.Exp(System.Double)"/></summary> <param name="power"> power </param> <returns> e raised to power </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Log(System.Single,System.Single)">
            <summary> Wrapper for <see cref="M:System.Math.Log(System.Double,System.Double)"/></summary> <param name="f"> Number </param> <param name="b"> base</param> <returns> Log_base of number</returns>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Log(System.Single)">
            <summary> Wrapper for <see cref="M:System.Math.Log(System.Double)"/></summary> <param name="f"> Number </param> <returns> Natural log of number </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Log10(System.Single)">
            <summary> Wrapper for <see cref="M:System.Math.Log10(System.Double)"/></summary> <param name="f"> Number </param> <returns> Log10 of number </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Ceil(System.Single)">
            <summary> Wrapper for <see cref="M:System.Math.Ceiling(System.Double)"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.CeilToInt(System.Single)">
            <summary> Wrapper for <see cref="M:System.Math.Ceiling(System.Double)"/>, cast to <see cref="T:System.Int32"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Floor(System.Single)">
            <summary> Wrapper for <see cref="M:System.Math.Floor(System.Double)"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.FloorToInt(System.Single)">
            <summary> Wrapper for <see cref="M:System.Math.Floor(System.Double)"/>, cast to <see cref="T:System.Int32"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Round(System.Single)">
            <summary> Wrapper for <see cref="M:System.Math.Round(System.Double)"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.RoundToInt(System.Single)">
            <summary> Wrapper for <see cref="M:System.Math.Round(System.Double)"/>, cast to <see cref="T:System.Int32"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Min(System.Single,System.Single)">
            <summary> Pick the minimum of two <see cref="T:System.Single"/> values</summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Min(System.Single,System.Single,System.Single)">
            <summary> Pick the minimum of three <see cref="T:System.Single"/> values</summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Max(System.Single,System.Single)">
            <summary> Pick the maximum of two <see cref="T:System.Single"/> values</summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Max(System.Single,System.Single,System.Single)">
            <summary> Pick the maximum of three <see cref="T:System.Single"/> values</summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Min(System.Int32,System.Int32)">
            <summary> Pick the minimum of two <see cref="T:System.Int32"/> values</summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Min(System.Int32,System.Int32,System.Int32)">
            <summary> Pick the minimum of three <see cref="T:System.Int32"/> values</summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Max(System.Int32,System.Int32)">
            <summary> Pick the maximum of two <see cref="T:System.Int32"/> values</summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Max(System.Int32,System.Int32,System.Int32)">
            <summary> Pick the maximum of three <see cref="T:System.Int32"/> values</summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Repeat(System.Single,System.Single)">
            <summary> Repeat a number <paramref name="f"/> over range [0, <paramref name="length"/>). </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.PingPong(System.Single,System.Single)">
            <summary> Make a number <paramref name="f"/> go back and forth between range [0, <paramref name="length"/>). </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Sign(System.Single)">
            <summary> Gets the sign of the number <paramref name="f"/> as -1 if negative or +1 if positive/zero </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Clamp01(System.Single)">
            <summary> Clamp a number <paramref name="f"/> between [0, 1] </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Clamp(System.Single,System.Single,System.Single)">
            <summary> Clamp a number <paramref name="f"/> between [<paramref name="min"/>, <paramref name="max"/>] </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary> Clamp a number <paramref name="f"/> between [<paramref name="min"/>, <paramref name="max"/>] </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.DeltaAngle(System.Single,System.Single)">
            <summary> Get the real difference between two angles (in degrees) </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Approximately(System.Single,System.Single)">
            <summary> Check two numbers for aproximate equivelancy. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Map(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary> Map <paramref name="val"/> from [<paramref name="a"/>, <paramref name="b"/>] space into [<paramref name="x"/>, <paramref name="y"/>] space</summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Lerp(System.Single,System.Single,System.Single)">
            <summary> Linearly interpolate <paramref name="f"/> between [<paramref name="a"/>, <paramref name="b"/>]. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.InverseLerp(System.Single,System.Single,System.Single)">
            <summary> Get the proportion <paramref name="value"/> is at between [<paramref name="a"/>, <paramref name="b"/>]. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.LerpUnclamped(System.Single,System.Single,System.Single)">
            <summary> Linearly interpolate <paramref name="f"/> between [<paramref name="a"/>, <paramref name="b"/>], without constraint inside [0,1] </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.SmoothStep(System.Single,System.Single,System.Single)">
            <summary> Smoothly interpolate <paramref name="f"/> between [<paramref name="a"/>, <paramref name="b"/>]. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.LerpAngle(System.Single,System.Single,System.Single)">
            <summary> Linearly interpolate, as an angle, <paramref name="f"/> between [<paramref name="a"/>, <paramref name="b"/>]. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.MoveTowards(System.Single,System.Single,System.Single)">
            <summary> Raw step <paramref name="current"/> towards <paramref name="target"/>, at most changing by <paramref name="maxDelta"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.MoveTowardsAngle(System.Single,System.Single,System.Single)">
            <summary> Raw step, as an angle, <paramref name="current"/> towards <paramref name="target"/>, at most changing by <paramref name="maxDelta"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Gamma(System.Single,System.Single,System.Single)">
            <summary> Real part of the Gamma function. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Damp(System.Single,System.Single,System.Single@,System.Single,System.Single,System.Single)">
            <summary> Smoothly dampen <paramref name="current"/> to <paramref name="target"/>. Uses and updates <paramref name="currentVelocity"/>, and steps over the given <paramref name="deltaTime"/>.
            Current will reach the target in approximately <paramref name="smoothTime"/>, unless the <paramref name="maxSpeed"/> is used to clamp changes. </summary>
            <param name="current"> Current position </param>
            <param name="target"> Target to reach </param>
            <param name="currentVelocity"> Current velocity reference. Modified by the function every time it is called. </param>
            <param name="smoothTime"> Appxoimately the time to reach the target in seconds. Smaller time reaches the target faster. </param>
            <param name="deltaTime"> Time since the last update. </param>
            <param name="maxSpeed"> Optionally allows the change speed to be clamped. </param>
            <returns> Position after timestep has been applied. </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.DampAngle(System.Single,System.Single,System.Single@,System.Single,System.Single,System.Single)">
            <summary> Smoothly dampens the given <paramref name="current"/> angle towards the <paramref name="target"/> angle. 
            Internally uses <see cref="M:PixelEngine.Utilities.Mathf.Damp(System.Single,System.Single,System.Single@,System.Single,System.Single,System.Single)"/> with values treated in angle space. </summary>
            <param name="current"> Current angle </param>
            <param name="target"> Target angle to reach </param>
            <param name="currentVelocity"> Current angular velocity reference. Modified by the function every time it is called. </param>
            <param name="smoothTime"> Appxoimately the time to reach the target in seconds. Smaller time reaches the target faster. </param>
            <param name="deltaTime"> Time since the last update. </param>
            <param name="maxSpeed"> Optionally allows the change speed to be clamped. </param>
            <returns> Angle after timestep has been applied. </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Mathf.Spring(System.Single,System.Single,System.Single@,System.Single,System.Single,System.Single)">
            <summary> Apply a spring function to the <paramref name="value"/>, stabilizing at <paramref name="target"/>. 
            Uses the given <paramref name="velocity"/>, and applied over the given <paramref name="deltaTime"/>. 
            optionally a speciifc <paramref name="strength"/> and <paramref name="dampening"/> value can be set. </summary>
            <param name="value"> Current value </param>
            <param name="target"> Stability target </param>
            <param name="velocity"> Current motion </param>
            <param name="deltaTime"> Last time step </param>
            <param name="strength"> Spring force multiplier </param>
            <param name="dampening"> Spring force removal base power (out of 10000) </param>
            <returns> Updated value after timestep has been applied. </returns>
        </member>
        <member name="T:PixelEngine.Utilities.Vector2">
            <summary> Surrogate Vector2 class, similar to UnityEngine.Vector2. Stores two <see cref="T:System.Single"/> components, and provides some math functions. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector2.zero">
            <summary> Zero <see cref="T:PixelEngine.Utilities.Vector2"/> (0, 0) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector2.one">
            <summary> One unit <see cref="T:PixelEngine.Utilities.Vector2"/> (1, 1) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector2.up">
            <summary> Up unit <see cref="T:PixelEngine.Utilities.Vector2"/> (0, 1) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector2.down">
            <summary> Down unit <see cref="T:PixelEngine.Utilities.Vector2"/> (0, -1) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector2.left">
            <summary> Left unit <see cref="T:PixelEngine.Utilities.Vector2"/> (-1, 0) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector2.right">
            <summary> Right unit <see cref="T:PixelEngine.Utilities.Vector2"/> (1, 0) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector2.negativeInfinity">
            <summary> Negative Infinity Unit <see cref="T:PixelEngine.Utilities.Vector2"/> (-inf, -inf) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector2.positiveInfinity">
            <summary> Positive Infinity Unit <see cref="T:PixelEngine.Utilities.Vector2"/> (+inf, +inf) </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Vector2.x">
            <summary> Vector component  </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Vector2.y">
            <summary> Vector component  </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.#ctor(System.Single,System.Single)">
            <summary> Create a <see cref="T:PixelEngine.Utilities.Vector2"/> with the given components  </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector2.magnitude">
            <summary> <see cref="T:PixelEngine.Utilities.Vector2"/> length by distance formula (Sqrt(x*x + y*y)) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector2.sqrMagnitude">
            <summary> <see cref="T:PixelEngine.Utilities.Vector2"/> squared length, partial distance formula (x*x + y*y), faster for length comparison than using <see cref="M:PixelEngine.Utilities.Mathf.Sqrt(System.Single)"/> </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector2.normalized">
            <summary> Create a <see cref="T:PixelEngine.Utilities.Vector2"/> with length 1 in the same direction as this vector, or zero if the vector is really short. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector2.Item(System.Int32)">
            <summary> Index-wise access to <see cref="T:PixelEngine.Utilities.Vector2"/> components. Index must be in range [0, 1] </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.Equals(PixelEngine.Utilities.Vector2)">
            <summary> Compare <see cref="T:PixelEngine.Utilities.Vector2"/> by component values. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.ToString">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.Normalize">
            <summary> Normalizes this <see cref="T:PixelEngine.Utilities.Vector2"/> in-place. Modifies the x/y in the memory location it is called on. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.Set(System.Single,System.Single)">
            <summary> Sets the x/y component of the <see cref="T:PixelEngine.Utilities.Vector2"/> in-place. Modifies the x/y in the memory location it is called on. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.Scale(System.Single,System.Single)">
            <summary> Scales this <see cref="T:PixelEngine.Utilities.Vector2"/> in-place to be (<paramref name="a"/>*<see cref="F:PixelEngine.Utilities.Vector2.x"/>, <paramref name="b"/>*<see cref="F:PixelEngine.Utilities.Vector2.y"/>). Modifies the x/y in the memory location it is called on. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.Scale(PixelEngine.Utilities.Vector2)">
            <summary> Scales this <see cref="T:PixelEngine.Utilities.Vector2"/> in-place by another vector <paramref name="s"/>, component wise. Modifies the x/y in the memory location it is called on. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.Clamp(PixelEngine.Utilities.Vector2,PixelEngine.Utilities.Vector2)">
            <summary> Clamps this <see cref="T:PixelEngine.Utilities.Vector2"/> in-place. Modifies the x/y in the memory location it is called on. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.FloorToInt">
            <summary> <see cref="M:PixelEngine.Utilities.Mathf.FloorToInt(System.Single)"/>'s each component in this <see cref="T:PixelEngine.Utilities.Vector2"/> to produce a <see cref="T:PixelEngine.Utilities.Vector2Int"/></summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.CeilToInt">
            <summary> <see cref="M:PixelEngine.Utilities.Mathf.CeilToInt(System.Single)"/>'s each component in this <see cref="T:PixelEngine.Utilities.Vector2"/> to produce a <see cref="T:PixelEngine.Utilities.Vector2Int"/></summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.RoundToInt">
            <summary> <see cref="M:PixelEngine.Utilities.Mathf.RoundToInt(System.Single)"/>'s each component in this <see cref="T:PixelEngine.Utilities.Vector2"/> to produce a <see cref="T:PixelEngine.Utilities.Vector2Int"/></summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.Abs">
            <summary> Get component-wise absolute value of this <see cref="T:PixelEngine.Utilities.Vector2"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.Abs(PixelEngine.Utilities.Vector2)">
            <summary> Get component-wise absolute value of given <see cref="T:PixelEngine.Utilities.Vector2"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.Dot(PixelEngine.Utilities.Vector2,PixelEngine.Utilities.Vector2)">
            <summary> Calculate dot product between <see cref="T:PixelEngine.Utilities.Vector2"/>s <paramref name="a"/> and <paramref name="b"/></summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.Min(PixelEngine.Utilities.Vector2,PixelEngine.Utilities.Vector2)">
            <summary> Componentwise Min between <see cref="T:PixelEngine.Utilities.Vector2"/>s <paramref name="a"/> and <paramref name="b"/></summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.Max(PixelEngine.Utilities.Vector2,PixelEngine.Utilities.Vector2)">
            <summary> Componentwise Max between <see cref="T:PixelEngine.Utilities.Vector2"/>s <paramref name="a"/> and <paramref name="b"/></summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.Lerp(PixelEngine.Utilities.Vector2,PixelEngine.Utilities.Vector2,System.Single)">
            <summary> Linearly interpolate between <see cref="T:PixelEngine.Utilities.Vector2"/>s <paramref name="a"/> and <paramref name="b"/> by proportion <paramref name="f"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.LerpUnclamped(PixelEngine.Utilities.Vector2,PixelEngine.Utilities.Vector2,System.Single)">
            <summary> Linearly interpolate between <see cref="T:PixelEngine.Utilities.Vector2"/>s <paramref name="a"/> and <paramref name="b"/> by proportion <paramref name="f"/>, without a <see cref="M:PixelEngine.Utilities.Mathf.Clamp01(System.Single)"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.MoveTowards(PixelEngine.Utilities.Vector2,PixelEngine.Utilities.Vector2,System.Single)">
            <summary> Steps <paramref name="current"/> <see cref="T:PixelEngine.Utilities.Vector2"/> towards <paramref name="target"/>, at most moving <paramref name="maxDistanceDelta"/>. </summary>
            <param name="current"> Current <see cref="T:PixelEngine.Utilities.Vector2"/> location </param>
            <param name="target"> Target <see cref="T:PixelEngine.Utilities.Vector2"/> location </param>
            <param name="maxDistanceDelta"> Maximum distance to move </param>
            <returns> <paramref name="current"/> stepped towards <paramref name="target"/>, at most by <paramref name="maxDistanceDelta"/> units. </returns>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.Scale(PixelEngine.Utilities.Vector2,PixelEngine.Utilities.Vector2)">
            <summary> Scales one <see cref="T:PixelEngine.Utilities.Vector2"/> <paramref name="a"/>componentwise by another <paramref name="b"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.ClampMagnitude(PixelEngine.Utilities.Vector2,System.Single)">
            <summary> Clamps the length of the <paramref name="vector"/> so it is not longer than <paramref name="maxLength"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.Reflect(PixelEngine.Utilities.Vector2,PixelEngine.Utilities.Vector2)">
            <summary> Reflect a <paramref name="dir"/>ection <see cref="T:PixelEngine.Utilities.Vector2"/> about a surface <paramref name="normal"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.Project(PixelEngine.Utilities.Vector2,PixelEngine.Utilities.Vector2)">
            <summary> Project a <paramref name="dir"/>ection <see cref="T:PixelEngine.Utilities.Vector2"/> along another direction, <paramref name="normal"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.Perpendicular(PixelEngine.Utilities.Vector2)">
            <summary> Create a <see cref="T:PixelEngine.Utilities.Vector2"/> that is perpindicular to the given <paramref name="dir"/>ection. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.Distance(PixelEngine.Utilities.Vector2,PixelEngine.Utilities.Vector2)">
            <summary> Calculate distance between <see cref="T:PixelEngine.Utilities.Vector2"/>s <paramref name="a"/> and <paramref name="b"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.Angle(PixelEngine.Utilities.Vector2,PixelEngine.Utilities.Vector2)">
            <summary> Calculate absolute angle between <see cref="T:PixelEngine.Utilities.Vector2"/>s <paramref name="from"/> and <paramref name="to"/> when placed at origin. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.SignedAngle(PixelEngine.Utilities.Vector2,PixelEngine.Utilities.Vector2)">
            <summary> Calculate signed angle between two <see cref="T:PixelEngine.Utilities.Vector2"/>s <paramref name="from"/> and <paramref name="to"/> when placed at origin. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.op_UnaryNegation(PixelEngine.Utilities.Vector2)">
            <summary> Negate both components of the given <see cref="T:PixelEngine.Utilities.Vector2"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.op_Addition(PixelEngine.Utilities.Vector2,PixelEngine.Utilities.Vector2)">
            <summary> Add <see cref="T:PixelEngine.Utilities.Vector2"/>s <paramref name="a"/> and <paramref name="b"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.op_Subtraction(PixelEngine.Utilities.Vector2,PixelEngine.Utilities.Vector2)">
            <summary> Subtract <see cref="T:PixelEngine.Utilities.Vector2"/> <paramref name="b"/> from <paramref name="a"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.op_Multiply(PixelEngine.Utilities.Vector2,PixelEngine.Utilities.Vector2)">
            <summary> Multiply <see cref="T:PixelEngine.Utilities.Vector2"/>s <paramref name="a"/> and <paramref name="b"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.op_Division(PixelEngine.Utilities.Vector2,PixelEngine.Utilities.Vector2)">
            <summary> Divide <see cref="T:PixelEngine.Utilities.Vector2"/> <paramref name="a"/> by <paramref name="b"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.op_Multiply(PixelEngine.Utilities.Vector2,System.Single)">
            <summary> Multiply <see cref="T:PixelEngine.Utilities.Vector2"/> <paramref name="a"/> by float <paramref name="f"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.op_Multiply(System.Single,PixelEngine.Utilities.Vector2)">
            <summary> Multiply <see cref="T:PixelEngine.Utilities.Vector2"/> <paramref name="a"/> by float <paramref name="f"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.op_Division(PixelEngine.Utilities.Vector2,System.Single)">
            <summary> Divide <see cref="T:PixelEngine.Utilities.Vector2"/> <paramref name="a"/> by <paramref name="f"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.op_Division(System.Single,PixelEngine.Utilities.Vector2)">
            <summary> Inverse divide <see cref="T:PixelEngine.Utilities.Vector2"/> <paramref name="a"/> by <paramref name="f"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.op_Equality(PixelEngine.Utilities.Vector2,PixelEngine.Utilities.Vector2)">
            <summary> Compare <see cref="T:PixelEngine.Utilities.Vector2"/>s <paramref name="a"/> and <paramref name="b"/>, by approximate equality, if their <see cref="P:PixelEngine.Utilities.Vector2.sqrMagnitude"/> of difference is within <see cref="F:PixelEngine.Utilities.Mathf.COMPARE_EPSILON"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.op_Inequality(PixelEngine.Utilities.Vector2,PixelEngine.Utilities.Vector2)">
            <summary> Inversion of comparison of <see cref="T:PixelEngine.Utilities.Vector2"/>s <paramref name="a"/> and <paramref name="b"/>, by approximate equality, if their <see cref="P:PixelEngine.Utilities.Vector2.sqrMagnitude"/> of difference is within <see cref="F:PixelEngine.Utilities.Mathf.COMPARE_EPSILON"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.op_Implicit(PixelEngine.Utilities.Vector3)~PixelEngine.Utilities.Vector2">
            <summary> Automatic coercion of <see cref="T:PixelEngine.Utilities.Vector3"/> to <see cref="T:PixelEngine.Utilities.Vector2"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2.op_Implicit(PixelEngine.Utilities.Vector2)~PixelEngine.Utilities.Vector3">
            <summary> Automatic coercion of <see cref="T:PixelEngine.Utilities.Vector2"/> to <see cref="T:PixelEngine.Utilities.Vector3"/> </summary>
        </member>
        <member name="T:PixelEngine.Utilities.Vector2Int">
            <summary> Surrogate class, similar to UnityEngine.Vector2Int. Stores two <see cref="T:System.Int32"/> components, and provides some math functions. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector2Int.zero">
            <summary> Zero <see cref="T:PixelEngine.Utilities.Vector2Int"/>, (0, 0). </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector2Int.one">
            <summary> One unit <see cref="T:PixelEngine.Utilities.Vector2Int"/>, (1, 1). </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector2Int.up">
            <summary> Up unit <see cref="T:PixelEngine.Utilities.Vector2Int"/>, (0, 1). </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector2Int.down">
            <summary> Down unit <see cref="T:PixelEngine.Utilities.Vector2Int"/>, (0, -1). </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector2Int.left">
            <summary> Left unit <see cref="T:PixelEngine.Utilities.Vector2Int"/>, (-1, 0). </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector2Int.right">
            <summary> Right unit <see cref="T:PixelEngine.Utilities.Vector2Int"/>, (1, 0). </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Vector2Int.x">
            <summary> Vector component </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Vector2Int.y">
            <summary> Vector component </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.#ctor(System.Int32,System.Int32)">
            <summary> Construct a <see cref="T:PixelEngine.Utilities.Vector2Int"/> with the given components. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector2Int.Item(System.Int32)">
            <summary> Index-wise access to <see cref="T:PixelEngine.Utilities.Vector2Int"/> components Index Must be in range [0, 1] </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.Equals(PixelEngine.Utilities.Vector2Int)">
            <summary> Compare by exact component values </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.ToString">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.Vector2Int.magnitude">
            <summary> <see cref="T:PixelEngine.Utilities.Vector2Int"/> length by distance formula (Sqrt(x*x + y*y)) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector2Int.sqrMagnitude">
            <summary> <see cref="T:PixelEngine.Utilities.Vector2Int"/> length by partial distance formula (x*x + y*y), faster without the <see cref="M:PixelEngine.Utilities.Mathf.Sqrt(System.Single)"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.Set(System.Int32,System.Int32)">
            <summary> Sets the x/y component of the vector in-place. Modifies the x/y in the memory location it is called on. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.Scale(PixelEngine.Utilities.Vector2Int)">
            <summary> Scales this <see cref="T:PixelEngine.Utilities.Vector2Int"/> in-place by another vector <paramref name="scale"/>, component wise. Modifies the x/y in the memory location it is called on. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.Clamp(PixelEngine.Utilities.Vector2,PixelEngine.Utilities.Vector2)">
            <summary> Clamp <see cref="T:PixelEngine.Utilities.Vector2Int"/> in-place between <paramref name="min"/> and <paramref name="max"/>. Modifies the x/y in the memory location it is called on.  </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.Abs">
            <summary> Get component-wise absolute value of this <see cref="T:PixelEngine.Utilities.Vector2Int"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.Abs(PixelEngine.Utilities.Vector2Int)">
            <summary> Get component-wise absolute value of given <see cref="T:PixelEngine.Utilities.Vector2Int"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.Min(PixelEngine.Utilities.Vector2Int,PixelEngine.Utilities.Vector2Int)">
            <summary> Component-wise minimum between <paramref name="a"/> and <paramref name="b"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.Max(PixelEngine.Utilities.Vector2Int,PixelEngine.Utilities.Vector2Int)">
            <summary> Component-wise maximum between <paramref name="a"/> and <paramref name="b"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.Scale(PixelEngine.Utilities.Vector2Int,PixelEngine.Utilities.Vector2Int)">
            <summary> Scale <paramref name="a"/> component-wise by <paramref name="b"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.Distance(PixelEngine.Utilities.Vector2Int,PixelEngine.Utilities.Vector2Int)">
            <summary> Get distance between <paramref name="a"/> and <paramref name="b"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.op_UnaryNegation(PixelEngine.Utilities.Vector2Int)">
            <summary> Negate each component of a <see cref="T:PixelEngine.Utilities.Vector2Int"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.op_Addition(PixelEngine.Utilities.Vector2Int,PixelEngine.Utilities.Vector2Int)">
            <summary> Add <paramref name="a"/> and <paramref name="b"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.op_Subtraction(PixelEngine.Utilities.Vector2Int,PixelEngine.Utilities.Vector2Int)">
            <summary> Add <paramref name="b"/> from <paramref name="a"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.op_Multiply(PixelEngine.Utilities.Vector2Int,PixelEngine.Utilities.Vector2Int)">
            <summary> Multiply <paramref name="a"/> and <paramref name="b"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.op_Division(PixelEngine.Utilities.Vector2Int,PixelEngine.Utilities.Vector2Int)">
            <summary> Divide<paramref name="a"/> by <paramref name="b"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.op_Multiply(PixelEngine.Utilities.Vector2Int,System.Int32)">
            <summary> Multiply <paramref name="a"/> and <paramref name="i"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.op_Multiply(System.Int32,PixelEngine.Utilities.Vector2Int)">
            <summary> Multiply <paramref name="a"/> and <paramref name="i"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.op_Division(PixelEngine.Utilities.Vector2Int,System.Int32)">
            <summary> Divide<paramref name="a"/> by <paramref name="i"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.op_Division(System.Int32,PixelEngine.Utilities.Vector2Int)">
            <summary> Inverse divide<paramref name="a"/> by <paramref name="i"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.op_Equality(PixelEngine.Utilities.Vector2Int,PixelEngine.Utilities.Vector2Int)">
            <summary> Compare components of <paramref name="a"/> and <paramref name="b"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.op_Inequality(PixelEngine.Utilities.Vector2Int,PixelEngine.Utilities.Vector2Int)">
            <summary> Inverse compare components of <paramref name="a"/> and <paramref name="b"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.op_Implicit(PixelEngine.Utilities.Vector2Int)~PixelEngine.Utilities.Vector2">
            <summary> Automatically promote a <see cref="T:PixelEngine.Utilities.Vector2Int"/> into  a <see cref="T:PixelEngine.Utilities.Vector2"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.op_Implicit(PixelEngine.Utilities.Vector2Int)~PixelEngine.Utilities.Vector3Int">
            <summary> Automatically promote a <see cref="T:PixelEngine.Utilities.Vector2Int"/> into  a <see cref="T:PixelEngine.Utilities.Vector3Int"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector2Int.op_Explicit(PixelEngine.Utilities.Vector3Int)~PixelEngine.Utilities.Vector2Int">
            <summary> Explicitly demote a <see cref="T:PixelEngine.Utilities.Vector3Int"/> into  a <see cref="T:PixelEngine.Utilities.Vector2Int"/> </summary>
        </member>
        <member name="T:PixelEngine.Utilities.Vector3">
            <summary> Surrogate class, similar to UnityEngine.Vector3. Stores three <see cref="T:System.Single"/> components, and provides some math functions. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector3.zero">
            <summary> Zero <see cref="T:PixelEngine.Utilities.Vector3"/> (0,0,0) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector3.one">
            <summary> One unit <see cref="T:PixelEngine.Utilities.Vector3"/> (1,1,1) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector3.right">
            <summary> Right unit <see cref="T:PixelEngine.Utilities.Vector3"/> (1,0,0) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector3.left">
            <summary> Left unit <see cref="T:PixelEngine.Utilities.Vector3"/> (-1,0,0) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector3.up">
            <summary> Up unit <see cref="T:PixelEngine.Utilities.Vector3"/> (0,1,0) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector3.down">
            <summary> Down unit <see cref="T:PixelEngine.Utilities.Vector3"/> (0,-1,0) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector3.forward">
            <summary> Forward unit <see cref="T:PixelEngine.Utilities.Vector3"/> (0,0,1) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector3.back">
            <summary> Backward unit <see cref="T:PixelEngine.Utilities.Vector3"/> (0,0,1) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector3.positiveInfinity">
            <summary> Infinity <see cref="T:PixelEngine.Utilities.Vector3"/> (+inf, +inf, +inf) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector3.negativeInfinity">
            <summary> Infinity <see cref="T:PixelEngine.Utilities.Vector3"/> (-inf, -inf, -inf) </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Vector3.x">
            <summary> Vector component </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Vector3.y">
            <summary> Vector component </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Vector3.z">
            <summary> Vector component </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary> Create a <see cref="T:PixelEngine.Utilities.Vector3"/> with the given components </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.#ctor(System.Single,System.Single)">
            <summary> Create a <see cref="T:PixelEngine.Utilities.Vector3"/> with the given components, and zero for z </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector3.Item(System.Int32)">
            <summary> Index this <see cref="T:PixelEngine.Utilities.Vector3"/> as an array. Index must be [0, 2] </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.Equals(PixelEngine.Utilities.Vector3)">
            <summary> Compare this <see cref="T:PixelEngine.Utilities.Vector3"/> to an<paramref name="other"/> <see cref="T:PixelEngine.Utilities.Vector3"/> component-wise for equality. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.ToString">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.Vector3.normalized">
            <summary> Get a <see cref="T:PixelEngine.Utilities.Vector3"/> in the same direction as this one, but with a length of one. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector3.magnitude">
            <summary> Get the length of this <see cref="T:PixelEngine.Utilities.Vector3"/> by distance formula. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector3.sqrMagnitude">
            <summary> Get the sqr length of this <see cref="T:PixelEngine.Utilities.Vector3"/> by partial distance formula. Leaving off the <see cref="M:PixelEngine.Utilities.Mathf.Sqrt(System.Single)"/>, is slightly faster for length comparisons. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.Set(System.Single,System.Single,System.Single)">
            <summary> Set the x/y/z components of this <see cref="T:PixelEngine.Utilities.Vector3"/>. Modifies the <see cref="T:PixelEngine.Utilities.Vector3"/> it was called on. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.Normalize">
            <summary> Normalize this <see cref="T:PixelEngine.Utilities.Vector3"/>. Modifies the <see cref="T:PixelEngine.Utilities.Vector3"/> it was called on. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.Scale(PixelEngine.Utilities.Vector3)">
            <summary> Scale this <see cref="T:PixelEngine.Utilities.Vector3"/> componentwise by another. Modifies the <see cref="T:PixelEngine.Utilities.Vector3"/> it was called on. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.Clamp(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Clamp this <see cref="T:PixelEngine.Utilities.Vector3"/> between two other <see cref="T:PixelEngine.Utilities.Vector3"/>s. Modifies the <see cref="T:PixelEngine.Utilities.Vector3"/> it was called on. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.FloorToInt">
            <summary> <see cref="M:PixelEngine.Utilities.Mathf.FloorToInt(System.Single)"/>'s each component in this <see cref="T:PixelEngine.Utilities.Vector3"/> to produce a <see cref="T:PixelEngine.Utilities.Vector3Int"/></summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.CeilToInt">
            <summary> <see cref="M:PixelEngine.Utilities.Mathf.CeilToInt(System.Single)"/>'s each component in this <see cref="T:PixelEngine.Utilities.Vector3"/> to produce a <see cref="T:PixelEngine.Utilities.Vector3Int"/></summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.RoundToInt">
            <summary> <see cref="M:PixelEngine.Utilities.Mathf.RoundToInt(System.Single)"/>'s each component in this <see cref="T:PixelEngine.Utilities.Vector3"/> to produce a <see cref="T:PixelEngine.Utilities.Vector3Int"/></summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.Abs">
            <summary> Get component-wise absolute value of this <see cref="T:PixelEngine.Utilities.Vector3"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.Abs(PixelEngine.Utilities.Vector3)">
            <summary> Get component-wise absolute value of given <see cref="T:PixelEngine.Utilities.Vector3"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.Min(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Componentwise Minimum of two <see cref="T:PixelEngine.Utilities.Vector3"/>s </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.Max(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Componentwise Maximum of two <see cref="T:PixelEngine.Utilities.Vector3"/>s </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.Cross(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Calculate <see cref="T:PixelEngine.Utilities.Vector3"/> Cross product, via left-hand rule. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.Dot(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Calculate dot product of two <see cref="T:PixelEngine.Utilities.Vector3"/>s </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.Reflect(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Reflect a <paramref name="dir"/>ection <see cref="T:PixelEngine.Utilities.Vector3"/> about the given <paramref name="normal"/></summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.Project(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Project a <paramref name="dir"/>ection <see cref="T:PixelEngine.Utilities.Vector3"/> along the given <paramref name="normal"/></summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.ProjectOnPlane(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Project the given <paramref name="v"/>ector onto a plane through the origin, defined by the given <paramref name="normal"/></summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.Angle(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Calculate the angle between two <see cref="T:PixelEngine.Utilities.Vector3"/>s. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.SignedAngle(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Get the signed angle between two <see cref="T:PixelEngine.Utilities.Vector3"/>s, in regards to the given <paramref name="axis"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.Distance(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Get the distance between two <see cref="T:PixelEngine.Utilities.Vector3"/>s </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.ClampMagnitude(PixelEngine.Utilities.Vector3,System.Single)">
            <summary> Clamp the magnitude of a <paramref name="vector"/> so it is not longer than <paramref name="maxLength"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.Lerp(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3,System.Single)">
            <summary> Lineraly interpolate between <see cref="T:PixelEngine.Utilities.Vector3"/>s <paramref name="a"/> and <paramref name="b"/> by proportion <paramref name="f"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.LerpUnclamped(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3,System.Single)">
            <summary> Lineraly interpolate between <see cref="T:PixelEngine.Utilities.Vector3"/>s <paramref name="a"/> and <paramref name="b"/> by proportion <paramref name="f"/>, without a <see cref="M:PixelEngine.Utilities.Mathf.Clamp01(System.Single)"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.MoveTowards(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3,System.Single)">
            <summary> Move <paramref name="current"/> <see cref="T:PixelEngine.Utilities.Vector3"/> towards <paramref name="target"/>, at most changing by <paramref name="maxDistanceDelta"/> units. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.op_UnaryNegation(PixelEngine.Utilities.Vector3)">
            <summary> Negate each component of the given <see cref="T:PixelEngine.Utilities.Vector3"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.op_Addition(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Add two <see cref="T:PixelEngine.Utilities.Vector3"/>s together </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.op_Subtraction(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Subtract one <see cref="T:PixelEngine.Utilities.Vector3"/> from another </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.op_Multiply(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Multiply two <see cref="T:PixelEngine.Utilities.Vector3"/>s together  </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.op_Division(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Divide one <see cref="T:PixelEngine.Utilities.Vector3"/> from another  </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.op_Multiply(PixelEngine.Utilities.Vector3,System.Single)">
            <summary> Multiply a <see cref="T:PixelEngine.Utilities.Vector3"/> by a scalar </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.op_Multiply(System.Single,PixelEngine.Utilities.Vector3)">
            <summary> Multiply a <see cref="T:PixelEngine.Utilities.Vector3"/> by a scalar </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.op_Division(PixelEngine.Utilities.Vector3,System.Single)">
            <summary> Divide a <see cref="T:PixelEngine.Utilities.Vector3"/> by a scalar </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.op_Division(System.Single,PixelEngine.Utilities.Vector3)">
            <summary> Inverse divide a <see cref="T:PixelEngine.Utilities.Vector3"/> by a scalar </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.op_Equality(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Compare two <see cref="T:PixelEngine.Utilities.Vector3"/>s by their square distance being below <see cref="F:PixelEngine.Utilities.Mathf.COMPARE_EPSILON"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3.op_Inequality(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Inverse compare two <see cref="T:PixelEngine.Utilities.Vector3"/>s by their square distance being below <see cref="F:PixelEngine.Utilities.Mathf.COMPARE_EPSILON"/>. </summary>
        </member>
        <member name="T:PixelEngine.Utilities.Vector3Int">
            <summary> Surrogate class, similar to UnityEngine.Vector3Int. Stores three <see cref="T:System.Int32"/> components, and provides some math functions. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector3Int.zero">
            <summary> Zero <see cref="T:PixelEngine.Utilities.Vector3Int"/> (0,0,0) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector3Int.one">
            <summary> One unit <see cref="T:PixelEngine.Utilities.Vector3Int"/> (1,1,1) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector3Int.right">
            <summary> Right unit <see cref="T:PixelEngine.Utilities.Vector3Int"/> (1,0,0) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector3Int.left">
            <summary> Left unit <see cref="T:PixelEngine.Utilities.Vector3Int"/> (-1,0,0) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector3Int.up">
            <summary> Up unit <see cref="T:PixelEngine.Utilities.Vector3Int"/> (0,1,0) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector3Int.down">
            <summary> Down unit <see cref="T:PixelEngine.Utilities.Vector3Int"/> (0,-1,0) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector3Int.forward">
            <summary> Forward unit <see cref="T:PixelEngine.Utilities.Vector3Int"/> (0,0,1) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector3Int.back">
            <summary> Down unit <see cref="T:PixelEngine.Utilities.Vector3Int"/> (0,0,-1) </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Vector3Int.x">
            <summary> Vector component </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Vector3Int.y">
            <summary> Vector component </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Vector3Int.z">
            <summary> Vector component </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary> Construct a <see cref="T:PixelEngine.Utilities.Vector3Int"/> with the given components </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector3Int.Item(System.Int32)">
            <summary> Index this <see cref="T:PixelEngine.Utilities.Vector3Int"/> as an array. Index must be in range [0, 2] </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.Equals(PixelEngine.Utilities.Vector3Int)">
            <summary> Compare <see cref="T:PixelEngine.Utilities.Vector3Int"/>s by their components being equal. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.ToString">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.Vector3Int.magnitude">
            <summary> <see cref="T:PixelEngine.Utilities.Vector3Int"/> length by distance formula </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector3Int.sqrMagnitude">
            <summary> Square <see cref="T:PixelEngine.Utilities.Vector3Int"/> length by partial distance formula. Slightly faster for length comparisons due to skipping the <see cref="M:PixelEngine.Utilities.Mathf.Sqrt(System.Single)"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.Set(System.Int32,System.Int32,System.Int32)">
            <summary> Set each component of this <see cref="T:PixelEngine.Utilities.Vector3Int"/>. Changes the <see cref="T:PixelEngine.Utilities.Vector3Int"/> it is called on. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.Scale(PixelEngine.Utilities.Vector3Int)">
            <summary> Scale this <see cref="T:PixelEngine.Utilities.Vector3Int"/> component-wise. Changes the <see cref="T:PixelEngine.Utilities.Vector3Int"/> it is called on. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.Clamp(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Clamp this <see cref="T:PixelEngine.Utilities.Vector3Int"/> between two other <see cref="T:PixelEngine.Utilities.Vector3Int"/>s. Changes the vector it is called on. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.Abs">
            <summary> Get component-wise absolute value of this <see cref="T:PixelEngine.Utilities.Vector3Int"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.Abs(PixelEngine.Utilities.Vector3Int)">
            <summary> Get component-wise absolute value of given <see cref="T:PixelEngine.Utilities.Vector3Int"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.Min(PixelEngine.Utilities.Vector3Int,PixelEngine.Utilities.Vector3Int)">
            <summary> Component-wise minimum of two <see cref="T:PixelEngine.Utilities.Vector3Int"/>s </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.Max(PixelEngine.Utilities.Vector3Int,PixelEngine.Utilities.Vector3Int)">
            <summary> Component-wise maximum of two <see cref="T:PixelEngine.Utilities.Vector3Int"/>s </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.Scale(PixelEngine.Utilities.Vector3Int,PixelEngine.Utilities.Vector3Int)">
            <summary> Component-wise scale a <see cref="T:PixelEngine.Utilities.Vector3Int"/> by another </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.Distance(PixelEngine.Utilities.Vector3Int,PixelEngine.Utilities.Vector3Int)">
            <summary> Get the distance between two <see cref="T:PixelEngine.Utilities.Vector3Int"/>s </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.op_UnaryNegation(PixelEngine.Utilities.Vector3Int)">
            <summary> Negate each component of the given <see cref="T:PixelEngine.Utilities.Vector3Int"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.op_Addition(PixelEngine.Utilities.Vector3Int,PixelEngine.Utilities.Vector3Int)">
            <summary> Add two <see cref="T:PixelEngine.Utilities.Vector3Int"/>s together </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.op_Subtraction(PixelEngine.Utilities.Vector3Int,PixelEngine.Utilities.Vector3Int)">
            <summary> Subtract one <see cref="T:PixelEngine.Utilities.Vector3Int"/> from another </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.op_Multiply(PixelEngine.Utilities.Vector3Int,PixelEngine.Utilities.Vector3Int)">
            <summary> Multiply two <see cref="T:PixelEngine.Utilities.Vector3Int"/>s together  </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.op_Division(PixelEngine.Utilities.Vector3Int,PixelEngine.Utilities.Vector3Int)">
            <summary> Divide one <see cref="T:PixelEngine.Utilities.Vector3Int"/> from another  </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.op_Multiply(PixelEngine.Utilities.Vector3Int,System.Int32)">
            <summary> Multiply a <see cref="T:PixelEngine.Utilities.Vector3Int"/> by a scalar </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.op_Multiply(System.Int32,PixelEngine.Utilities.Vector3Int)">
            <summary> Multiply a <see cref="T:PixelEngine.Utilities.Vector3Int"/> by a scalar </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.op_Division(PixelEngine.Utilities.Vector3Int,System.Int32)">
            <summary> Divide a <see cref="T:PixelEngine.Utilities.Vector3Int"/> by a scalar </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.op_Division(System.Int32,PixelEngine.Utilities.Vector3Int)">
            <summary> Inverse divide a <see cref="T:PixelEngine.Utilities.Vector3Int"/> by a scalar </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.op_Equality(PixelEngine.Utilities.Vector3Int,PixelEngine.Utilities.Vector3Int)">
            <summary> Compare two <see cref="T:PixelEngine.Utilities.Vector3Int"/>s by their components for equality. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.op_Inequality(PixelEngine.Utilities.Vector3Int,PixelEngine.Utilities.Vector3Int)">
            <summary> Inverse compare two <see cref="T:PixelEngine.Utilities.Vector3Int"/>s by their components for equality. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.op_Implicit(PixelEngine.Utilities.Vector3Int)~PixelEngine.Utilities.Vector3">
            <summary> Automatically promote a <see cref="T:PixelEngine.Utilities.Vector3Int"/> into a <see cref="T:PixelEngine.Utilities.Vector3"/></summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.op_Implicit(PixelEngine.Utilities.Vector2Int)~PixelEngine.Utilities.Vector3Int">
            <summary> Automatically promote a <see cref="T:PixelEngine.Utilities.Vector2Int"/> into a <see cref="T:PixelEngine.Utilities.Vector3Int"/></summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector3Int.op_Explicit(PixelEngine.Utilities.Vector3Int)~PixelEngine.Utilities.Vector2Int">
            <summary> Explicitly demote a <see cref="T:PixelEngine.Utilities.Vector3Int"/> into a <see cref="T:PixelEngine.Utilities.Vector2Int"/></summary>
        </member>
        <member name="T:PixelEngine.Utilities.Vector4">
            <summary> Surrogate class, similar to UnityEngine.Vector4. Stores four <see cref="T:System.Single"/> components, and provides some math functions. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector4.zero">
            <summary> Zero <see cref="T:PixelEngine.Utilities.Vector4"/> (0,0,0,0) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector4.one">
            <summary> One unit <see cref="T:PixelEngine.Utilities.Vector4"/> (1,1,1,1) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector4.positiveInfinity">
            <summary> Infinity <see cref="T:PixelEngine.Utilities.Vector4"/> (+inf, +inf, +inf, +inf) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector4.negativeInfinity">
            <summary> Infinity <see cref="T:PixelEngine.Utilities.Vector4"/> (-inf, -inf, -inf, -inf) </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Vector4.x">
            <summary> Vector component </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Vector4.y">
            <summary> Vector component </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Vector4.z">
            <summary> Vector component </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Vector4.w">
            <summary> Vector component </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary> Create a <see cref="T:PixelEngine.Utilities.Vector4"/> with the given components </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector4.Item(System.Int32)">
            <summary> Index this <see cref="T:PixelEngine.Utilities.Vector4"/> as if it was an array. Index must be [0, 3] </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.Equals(PixelEngine.Utilities.Vector4)">
            <summary> Compare two <see cref="T:PixelEngine.Utilities.Vector4"/> componentwise for equality </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.ToString">
            <inheritdoc />
        </member>
        <member name="P:PixelEngine.Utilities.Vector4.normalized">
            <summary> Get a <see cref="T:PixelEngine.Utilities.Vector4"/> in the same direction, with a length of 1. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector4.magnitude">
            <summary> Length by distance formula </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Vector4.sqrMagnitude">
            <summary> Squared length by partial distance formula. Slightly faster for comparisons due to skipping the <see cref="M:PixelEngine.Utilities.Mathf.Sqrt(System.Single)"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.Set(System.Single,System.Single,System.Single,System.Single)">
            <summary> Set each component of this <see cref="T:PixelEngine.Utilities.Vector4"/>. Modifies the <see cref="T:PixelEngine.Utilities.Vector4"/> this is called on. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.Normalize">
            <summary> Sets this <see cref="T:PixelEngine.Utilities.Vector4"/>'s length to 1. Modifies the <see cref="T:PixelEngine.Utilities.Vector4"/> this is called on. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.Scale(PixelEngine.Utilities.Vector4)">
            <summary> Scales the <see cref="T:PixelEngine.Utilities.Vector4"/> component-wise by the given vector. Modifies the <see cref="T:PixelEngine.Utilities.Vector4"/> this is called on. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.Clamp(PixelEngine.Utilities.Vector4,PixelEngine.Utilities.Vector4)">
            <summary> Clamps the <see cref="T:PixelEngine.Utilities.Vector4"/> between two other <see cref="T:PixelEngine.Utilities.Vector4"/>s. Modifies the <see cref="T:PixelEngine.Utilities.Vector4"/> this is called on. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.Abs">
            <summary> Get component-wise absolute value of this <see cref="T:PixelEngine.Utilities.Vector4"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.Abs(PixelEngine.Utilities.Vector4)">
            <summary> Get component-wise absolute value of given <see cref="T:PixelEngine.Utilities.Vector4"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.Min(PixelEngine.Utilities.Vector4,PixelEngine.Utilities.Vector4)">
            <summary> Componentwise minimum of two <see cref="T:PixelEngine.Utilities.Vector4"/>s. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.Max(PixelEngine.Utilities.Vector4,PixelEngine.Utilities.Vector4)">
            <summary> Componentwise maximum of two <see cref="T:PixelEngine.Utilities.Vector4"/>s. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.Dot(PixelEngine.Utilities.Vector4,PixelEngine.Utilities.Vector4)">
            <summary> Dot product between two <see cref="T:PixelEngine.Utilities.Vector4"/>s . </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.Reflect(PixelEngine.Utilities.Vector4,PixelEngine.Utilities.Vector4)">
            <summary> Reflect a <paramref name="dir"/>ection <see cref="T:PixelEngine.Utilities.Vector4"/> over the given <paramref name="normal"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.Project(PixelEngine.Utilities.Vector4,PixelEngine.Utilities.Vector4)">
            <summary> Project a <paramref name="dir"/>ection <see cref="T:PixelEngine.Utilities.Vector4"/> along the given <paramref name="normal"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.Distance(PixelEngine.Utilities.Vector4,PixelEngine.Utilities.Vector4)">
            <summary> Get the distance between two <see cref="T:PixelEngine.Utilities.Vector4"/>s </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.ClampMagnitude(PixelEngine.Utilities.Vector4,System.Single)">
            <summary> Get a <see cref="T:PixelEngine.Utilities.Vector4"/> in the same direction as the given <paramref name="vector"/>, but at maximum <paramref name="maxLength"/> units long. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.Lerp(PixelEngine.Utilities.Vector4,PixelEngine.Utilities.Vector4,System.Single)">
            <summary> Linearly interpolate between two <see cref="T:PixelEngine.Utilities.Vector4"/>s by proportion <paramref name="f"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.LerpUnclamped(PixelEngine.Utilities.Vector4,PixelEngine.Utilities.Vector4,System.Single)">
            <summary> Linearly interpolate between two <see cref="T:PixelEngine.Utilities.Vector4"/>s by proportion <paramref name="f"/>, without a <see cref="M:PixelEngine.Utilities.Mathf.Clamp01(System.Single)"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.MoveTowards(PixelEngine.Utilities.Vector4,PixelEngine.Utilities.Vector4,System.Single)">
            <summary> Move <paramref name="current"/> towards <paramref name="target"/>, at most changing its length by <paramref name="maxDistanceDelta"/> units. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.op_UnaryNegation(PixelEngine.Utilities.Vector4)">
            <summary> Negate each component of the given <see cref="T:PixelEngine.Utilities.Vector4"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.op_Addition(PixelEngine.Utilities.Vector4,PixelEngine.Utilities.Vector4)">
            <summary> Add two <see cref="T:PixelEngine.Utilities.Vector4"/>s together </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.op_Subtraction(PixelEngine.Utilities.Vector4,PixelEngine.Utilities.Vector4)">
            <summary> Subtract one <see cref="T:PixelEngine.Utilities.Vector4"/> from another </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.op_Multiply(PixelEngine.Utilities.Vector4,PixelEngine.Utilities.Vector4)">
            <summary> Multiply two <see cref="T:PixelEngine.Utilities.Vector4"/>s together  </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.op_Division(PixelEngine.Utilities.Vector4,PixelEngine.Utilities.Vector4)">
            <summary> Divide one <see cref="T:PixelEngine.Utilities.Vector4"/> from another  </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.op_Multiply(PixelEngine.Utilities.Vector4,System.Single)">
            <summary> Multiply a <see cref="T:PixelEngine.Utilities.Vector4"/> by a scalar </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.op_Multiply(System.Single,PixelEngine.Utilities.Vector4)">
            <summary> Multiply a <see cref="T:PixelEngine.Utilities.Vector4"/> by a scalar </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.op_Division(PixelEngine.Utilities.Vector4,System.Single)">
            <summary> Divide a <see cref="T:PixelEngine.Utilities.Vector4"/> by a scalar </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.op_Division(System.Single,PixelEngine.Utilities.Vector4)">
            <summary> Inverse divide a <see cref="T:PixelEngine.Utilities.Vector4"/> by a scalar </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.op_Equality(PixelEngine.Utilities.Vector4,PixelEngine.Utilities.Vector4)">
            <summary> Compare two <see cref="T:PixelEngine.Utilities.Vector4"/>s by their square distance being below <see cref="F:PixelEngine.Utilities.Mathf.COMPARE_EPSILON"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.op_Inequality(PixelEngine.Utilities.Vector4,PixelEngine.Utilities.Vector4)">
            <summary> Inverse compare two <see cref="T:PixelEngine.Utilities.Vector4"/>s by their square distance being below <see cref="F:PixelEngine.Utilities.Mathf.COMPARE_EPSILON"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.op_Implicit(PixelEngine.Utilities.Vector3)~PixelEngine.Utilities.Vector4">
            <summary> Automatically promote a <see cref="T:PixelEngine.Utilities.Vector3"/> to a <see cref="T:PixelEngine.Utilities.Vector4"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.op_Explicit(PixelEngine.Utilities.Vector4)~PixelEngine.Utilities.Vector3">
            <summary> Explicitly demote a <see cref="T:PixelEngine.Utilities.Vector4"/> to a <see cref="T:PixelEngine.Utilities.Vector3"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.op_Implicit(PixelEngine.Utilities.Vector2)~PixelEngine.Utilities.Vector4">
            <summary> Automatically promote a <see cref="T:PixelEngine.Utilities.Vector2"/> to a <see cref="T:PixelEngine.Utilities.Vector4"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Vector4.op_Implicit(PixelEngine.Utilities.Vector4)~PixelEngine.Utilities.Vector2">
            <summary> Explicitly demote a <see cref="T:PixelEngine.Utilities.Vector4"/> to a <see cref="T:PixelEngine.Utilities.Vector2"/> </summary>
        </member>
        <member name="T:PixelEngine.Utilities.Rect">
            <summary> Class similar to UnityEngine.Rect. Stores four <see cref="T:System.Single"/>s, like a <see cref="T:PixelEngine.Utilities.Vector4"/>, but interprets them as a Rectangle. (x,y) x (width, height) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Rect.zero">
            <summary> Zero rectangle. (0,0) x (0,0) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Rect.unit">
            <summary> Unit rectangle. (0,0) x (1,1) </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Rect.x">
            <summary> Position information </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Rect.y">
            <summary> Position information </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Rect.width">
            <summary> Size information </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Rect.height">
            <summary> Size information </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Rect.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary> Construct a <see cref="T:PixelEngine.Utilities.Rect"/> with the given location and size </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Rect.#ctor(PixelEngine.Utilities.Vector2,PixelEngine.Utilities.Vector2)">
            <summary> Construct a <see cref="T:PixelEngine.Utilities.Rect"/> with the given location and size </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Rect.#ctor(PixelEngine.Utilities.Rect)">
            <summary> Copy a <see cref="T:PixelEngine.Utilities.Rect"/> into another. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Rect.position">
            <summary> get/set the top-left position of this <see cref="T:PixelEngine.Utilities.Rect"/> as a <see cref="T:PixelEngine.Utilities.Vector2"/>. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Rect.center">
            <summary> get/set the center position of this <see cref="T:PixelEngine.Utilities.Rect"/> as a <see cref="T:PixelEngine.Utilities.Vector2"/>. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Rect.min">
            <summary> get/setthe minimum position of this <see cref="T:PixelEngine.Utilities.Rect"/> as a <see cref="T:PixelEngine.Utilities.Vector2"/> </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Rect.max">
            <summary> get/set  the maximum position of this <see cref="T:PixelEngine.Utilities.Rect"/> as a <see cref="T:PixelEngine.Utilities.Vector2"/> </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Rect.size">
            <summary> get/set the size of this <see cref="T:PixelEngine.Utilities.Rect"/> as a <see cref="T:PixelEngine.Utilities.Vector2"/> </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Rect.xMin">
            <summary> get/set the lowest x-coord in this <see cref="T:PixelEngine.Utilities.Rect"/>. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Rect.yMin">
            <summary> get/set the lowest y-coord in this <see cref="T:PixelEngine.Utilities.Rect"/>. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Rect.xMax">
            <summary> get/set the highest x-coord in this <see cref="T:PixelEngine.Utilities.Rect"/>. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Rect.yMax">
            <summary> get/set the highest y-coord in this <see cref="T:PixelEngine.Utilities.Rect"/>. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Rect.left">
            <summary> get the left edge of this <see cref="T:PixelEngine.Utilities.Rect"/>. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Rect.right">
            <summary> get the right edge of this <see cref="T:PixelEngine.Utilities.Rect"/>. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Rect.top">
            <summary> get the top edge of this <see cref="T:PixelEngine.Utilities.Rect"/>. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Rect.bottom">
            <summary> get the bottom edge of this <see cref="T:PixelEngine.Utilities.Rect"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Rect.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.Rect.Equals(PixelEngine.Utilities.Rect)">
            <summary> Compare two <see cref="T:PixelEngine.Utilities.Rect"/>s by their position and size for equality. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Rect.ToString">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.Rect.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.Rect.Set(System.Single,System.Single,System.Single,System.Single)">
            <summary> Directly set the position and size of this <see cref="T:PixelEngine.Utilities.Rect"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Rect.Contains(PixelEngine.Utilities.Vector2)">
            <summary> Does this <see cref="T:PixelEngine.Utilities.Rect"/> contain the given <paramref name="point"/>? </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Rect.Contains(PixelEngine.Utilities.Vector3)">
            <summary> Does this <see cref="T:PixelEngine.Utilities.Rect"/> contain the given <paramref name="point"/>? </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Rect.Overlaps(PixelEngine.Utilities.Rect)">
            <summary> Do two <see cref="T:PixelEngine.Utilities.Rect"/>s overlap, excluding cases where they just touch edges? </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Rect.Touches(PixelEngine.Utilities.Rect)">
            <summary> Do two <see cref="T:PixelEngine.Utilities.Rect"/>s overlap, including cases where they just touch edges? </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Rect.NormalizedToPoint(PixelEngine.Utilities.Vector2)">
            <summary> Get a point within the <see cref="T:PixelEngine.Utilities.Rect"/> at <paramref name="coords"/>. In normalized coords, (0,0) means top-left of rect, (1,1) means bottom-right </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Rect.PointToNormalized(PixelEngine.Utilities.Vector2)">
            <summary> Get the normalized coords within the <see cref="T:PixelEngine.Utilities.Rect"/> at the given <paramref name="point"/>. In normalized coords, (0,0) means top-left of rect, (1,1) means bottom-right </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Rect.SetMinMax(PixelEngine.Utilities.Vector2,PixelEngine.Utilities.Vector2)">
            <summary> Modifies this <see cref="T:PixelEngine.Utilities.Rect"/> so that it's <see cref="P:PixelEngine.Utilities.Rect.min"/> and <see cref="P:PixelEngine.Utilities.Rect.max"/> are <paramref name="min"/> and <paramref name="max"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Rect.ClampToBounds(PixelEngine.Utilities.Rect)">
            <summary> Forces this <see cref="T:PixelEngine.Utilities.Rect"/> to fit within the given <paramref name="bounds"/>. </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:PixelEngine.Utilities.Rect.MinMaxRect(System.Single,System.Single,System.Single,System.Single)">
            <summary> Create a new <see cref="T:PixelEngine.Utilities.Rect"/> from the given min/max values. </summary>
            <remarks> Has to be separated since it has the same signature as standard constructor. </remarks>
        </member>
        <member name="M:PixelEngine.Utilities.Rect.NormalizedToPoint(PixelEngine.Utilities.Rect,PixelEngine.Utilities.Vector2)">
            <summary> Get a point within the given <see cref="T:PixelEngine.Utilities.Rect"/> at <paramref name="coords"/>. In normalized coords, (0,0) means top-left of rect, (1,1) means bottom-right </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Rect.PointToNormalized(PixelEngine.Utilities.Rect,PixelEngine.Utilities.Vector2)">
            <summary> Get the normalized coords within the given <see cref="T:PixelEngine.Utilities.Rect"/> at the given <paramref name="point"/>. In normalized coords, (0,0) means top-left of rect, (1,1) means bottom-right </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Rect.op_Equality(PixelEngine.Utilities.Rect,PixelEngine.Utilities.Rect)">
            <summary> Compare the location and size of two <see cref="T:PixelEngine.Utilities.Rect"/>s for equality </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Rect.op_Inequality(PixelEngine.Utilities.Rect,PixelEngine.Utilities.Rect)">
            <summary> Inverse compare the location and size of two <see cref="T:PixelEngine.Utilities.Rect"/>s for equality </summary>
        </member>
        <member name="T:PixelEngine.Utilities.RectInt">
            <summary> Class similar to UnityEngine.RectInt. Stores four <see cref="T:System.Int32"/>s, like what would be Vector4Int, but interprets them as a Rectangle. (x,y) x (width, height) </summary>
        </member>
        <member name="F:PixelEngine.Utilities.RectInt.x">
            <summary> Position information </summary>
        </member>
        <member name="F:PixelEngine.Utilities.RectInt.y">
            <summary> Position information </summary>
        </member>
        <member name="F:PixelEngine.Utilities.RectInt.width">
            <summary> Size information </summary>
        </member>
        <member name="F:PixelEngine.Utilities.RectInt.height">
            <summary> Size information </summary>
        </member>
        <member name="M:PixelEngine.Utilities.RectInt.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Construct a <see cref="T:PixelEngine.Utilities.RectInt"/> with the given position/size </summary>
        </member>
        <member name="M:PixelEngine.Utilities.RectInt.#ctor(PixelEngine.Utilities.Vector2Int,PixelEngine.Utilities.Vector2Int)">
            <summary> Construct a <see cref="T:PixelEngine.Utilities.RectInt"/> with the given position/size </summary>
        </member>
        <member name="M:PixelEngine.Utilities.RectInt.#ctor(PixelEngine.Utilities.RectInt)">
            <summary> Construct a <see cref="T:PixelEngine.Utilities.RectInt"/> as a copy of another </summary>
        </member>
        <member name="P:PixelEngine.Utilities.RectInt.position">
            <summary> get/set the top-left position of this <see cref="T:PixelEngine.Utilities.RectInt"/> as a <see cref="T:PixelEngine.Utilities.Vector2Int"/>. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.RectInt.center">
            <summary> get/set the center position of this <see cref="T:PixelEngine.Utilities.RectInt"/> as a <see cref="T:PixelEngine.Utilities.Vector2Int"/>. </summary>
            <remarks> set may be a bit imprecise due to float conversions. </remarks>
        </member>
        <member name="P:PixelEngine.Utilities.RectInt.min">
            <summary> get/set the minimum position of this <see cref="T:PixelEngine.Utilities.RectInt"/> as a <see cref="T:PixelEngine.Utilities.Vector2Int"/>. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.RectInt.max">
            <summary> get/set the maximum position of this <see cref="T:PixelEngine.Utilities.RectInt"/> as a <see cref="T:PixelEngine.Utilities.Vector2Int"/>. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.RectInt.size">
            <summary> get/set the size of this <see cref="T:PixelEngine.Utilities.RectInt"/> as a <see cref="T:PixelEngine.Utilities.Vector2Int"/>. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.RectInt.xMin">
            <summary> get the min x-coord of this <see cref="T:PixelEngine.Utilities.RectInt"/> </summary>
        </member>
        <member name="P:PixelEngine.Utilities.RectInt.yMin">
            <summary> get the min y-coord of this <see cref="T:PixelEngine.Utilities.RectInt"/> </summary>
        </member>
        <member name="P:PixelEngine.Utilities.RectInt.xMax">
            <summary> get the max x-coord of this <see cref="T:PixelEngine.Utilities.RectInt"/> </summary>
        </member>
        <member name="P:PixelEngine.Utilities.RectInt.yMax">
            <summary> get the max y-coord of this <see cref="T:PixelEngine.Utilities.RectInt"/> </summary>
        </member>
        <member name="P:PixelEngine.Utilities.RectInt.left">
            <summary> get the left edge of this <see cref="T:PixelEngine.Utilities.RectInt"/> </summary>
        </member>
        <member name="P:PixelEngine.Utilities.RectInt.right">
            <summary> get the right edge of this <see cref="T:PixelEngine.Utilities.RectInt"/> </summary>
        </member>
        <member name="P:PixelEngine.Utilities.RectInt.top">
            <summary> get the top edge of this <see cref="T:PixelEngine.Utilities.RectInt"/> </summary>
        </member>
        <member name="P:PixelEngine.Utilities.RectInt.bottom">
            <summary> get the bottom edge of this <see cref="T:PixelEngine.Utilities.RectInt"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.RectInt.SetMinMax(PixelEngine.Utilities.Vector2Int,PixelEngine.Utilities.Vector2Int)">
            <summary> Modifies this <see cref="T:PixelEngine.Utilities.RectInt"/> so that it's <see cref="P:PixelEngine.Utilities.RectInt.min"/> and <see cref="P:PixelEngine.Utilities.RectInt.max"/> are <paramref name="min"/> and <paramref name="max"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.RectInt.ClampToBounds(PixelEngine.Utilities.RectInt)">
            <summary> Forces this <see cref="T:PixelEngine.Utilities.RectInt"/> to fit within the given <paramref name="bounds"/>. </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:PixelEngine.Utilities.RectInt.Points">
            <summary> Iterate all positions within this <see cref="T:PixelEngine.Utilities.RectInt"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.RectInt.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.RectInt.Equals(PixelEngine.Utilities.RectInt)">
            <summary> Test two <see cref="T:PixelEngine.Utilities.RectInt"/>s position and size for equality. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.RectInt.ToString">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.RectInt.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:PixelEngine.Utilities.Plane">
            <summary> Similar to UnityEngine.Plane, represents a 3d Plane object by a <see cref="P:PixelEngine.Utilities.Plane.normal"/> and <see cref="F:PixelEngine.Utilities.Plane.distance"/> along the normal from the origin. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Plane._normal">
            <summary> Internal field backing <see cref="P:PixelEngine.Utilities.Plane.normal"/> property. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Plane.distance">
            <summary> Distance from origin to <see cref="T:PixelEngine.Utilities.Plane"/> surface, along the given normal. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Plane.normal">
            <summary> Signed normal direction of the <see cref="T:PixelEngine.Utilities.Plane"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Plane.#ctor(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Construct a <see cref="T:PixelEngine.Utilities.Plane"/> with the given normal, and a point in space. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Plane.#ctor(PixelEngine.Utilities.Vector3,System.Single)">
            <summary> Construct a <see cref="T:PixelEngine.Utilities.Plane"/> with the given normal, and a distance along the normal. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Plane.#ctor(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Construct a <see cref="T:PixelEngine.Utilities.Plane"/> that contains the given verticies. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Plane.flipped">
            <summary> Create a <see cref="T:PixelEngine.Utilities.Plane"/> that is the 'flip' of this <see cref="T:PixelEngine.Utilities.Plane"/> (same position, opposite facing direction) </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Plane.ToString">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.Plane.SetNormalAndPosition(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Modify this <see cref="T:PixelEngine.Utilities.Plane"/> so it intersects <paramref name="point"/> and faces along <paramref name="normal"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Plane.Set3Points(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Modify this <see cref="T:PixelEngine.Utilities.Plane"/> so it intersects all 3 given points. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Plane.Flip">
            <summary> Modify this <see cref="T:PixelEngine.Utilities.Plane"/> so it faces the opposite way. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Plane.Translate(PixelEngine.Utilities.Vector3)">
            <summary> Translate this <see cref="T:PixelEngine.Utilities.Plane"/> along the given <paramref name="translation"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Plane.Translate(PixelEngine.Utilities.Plane,PixelEngine.Utilities.Vector3)">
            <summary> Derive a <see cref="T:PixelEngine.Utilities.Plane"/> from <paramref name="p"/> translated along <paramref name="translation"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Plane.ClosestPointOnPlane(PixelEngine.Utilities.Vector3)">
            <summary> Find the closest point on the <see cref="T:PixelEngine.Utilities.Plane"/> from a given <paramref name="point"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Plane.GetDistanceToPoint(PixelEngine.Utilities.Vector3)">
            <summary> Find the distance to the given <paramref name="point"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Plane.GetSide(PixelEngine.Utilities.Vector3)">
            <summary> Get if the given point is "above" (positive side, true) the <see cref="T:PixelEngine.Utilities.Plane"/> or "below" (negative side, false) </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Plane.SameSide(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Get if two points are on the same side of the given <see cref="T:PixelEngine.Utilities.Plane"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Plane.Raycast(PixelEngine.Utilities.Ray,System.Single@)">
            <summary> Cast a <paramref name="ray"/> against this plane, and get the <paramref name="enter"/> if it intersects. </summary>
            <param name="ray"> <see cref="T:PixelEngine.Utilities.Ray"/> to cast against plane </param>
            <param name="enter"> Output distance along <paramref name="ray"/> where intersection occured, if it occurred. </param>
            <returns> True, if <paramref name="ray"/> intersects this plane, false otherwise. </returns>
        </member>
        <member name="T:PixelEngine.Utilities.Ray">
            <summary> Similar to UnityEngine.Ray Represents a Ray in 3d Space, <see cref="F:PixelEngine.Utilities.Ray.origin"/>ating at some point, and firing in some <see cref="F:PixelEngine.Utilities.Ray.dir"/>ection. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Ray.origin">
            <summary> Origin point of <see cref="T:PixelEngine.Utilities.Ray"/> </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Ray.dir">
            <summary> Normalized direction of <see cref="T:PixelEngine.Utilities.Ray"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Ray.#ctor(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Constructs a <see cref="T:PixelEngine.Utilities.Ray"/> with the given <paramref name="origin"/> and <paramref name="dir"/>ection. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Ray.direction">
            <summary> Gets/sets the normalized direction of this <see cref="T:PixelEngine.Utilities.Ray"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Ray.ToString">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.Ray.GetPoint(System.Single)">
            <summary> Calculate the point <paramref name="distance"/> along the <see cref="F:PixelEngine.Utilities.Ray.dir"/>ection of this <see cref="T:PixelEngine.Utilities.Ray"/> from its <see cref="F:PixelEngine.Utilities.Ray.origin"/>. </summary>
        </member>
        <member name="T:PixelEngine.Utilities.Ray2D">
            <summary> Similar to UnityEngine.Ray2D Represents a Ray in 2d Space, <see cref="F:PixelEngine.Utilities.Ray2D.origin"/>ating at some point, and firing in some <see cref="F:PixelEngine.Utilities.Ray2D.dir"/>ection. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Ray2D.origin">
            <summary> Origin point of <see cref="T:PixelEngine.Utilities.Ray2D"/> </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Ray2D.dir">
            <summary> Normalized direction of <see cref="T:PixelEngine.Utilities.Ray2D"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Ray2D.#ctor(PixelEngine.Utilities.Vector2,PixelEngine.Utilities.Vector2)">
            <summary> Constructs a <see cref="T:PixelEngine.Utilities.Ray2D"/> with the given <paramref name="origin"/> and <paramref name="dir"/>ection. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Ray2D.direction">
            <summary> Gets/sets the normalized direction of this <see cref="T:PixelEngine.Utilities.Ray2D"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Ray2D.ToString">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.Ray2D.GetPoint(System.Single)">
            <summary> Calculate the point <paramref name="distance"/> along the <see cref="F:PixelEngine.Utilities.Ray2D.dir"/>ection of this <see cref="T:PixelEngine.Utilities.Ray2D"/> from its <see cref="F:PixelEngine.Utilities.Ray2D.origin"/>. </summary>
        </member>
        <member name="T:PixelEngine.Utilities.Bounds">
            <summary> Similar to UnityEngine.Bounds, represents an Axis-Aligned-Bounding-Box. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Bounds.center">
            <summary> Center of bounding box </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Bounds.extents">
            <summary> Half-size of bounding box. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Bounds.#ctor(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Create a new <see cref="T:PixelEngine.Utilities.Bounds"/>, centered at the given <paramref name="center"/>, and with the given total <paramref name="size"/>. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Bounds.size">
            <summary> Get the full size of the <see cref="T:PixelEngine.Utilities.Bounds"/> </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Bounds.min">
            <summary> Get the minimum point in the <see cref="T:PixelEngine.Utilities.Bounds"/> </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Bounds.max">
            <summary> Get the maximum point in the <see cref="T:PixelEngine.Utilities.Bounds"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Bounds.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.Bounds.Equals(PixelEngine.Utilities.Bounds)">
            <summary> Compare two <see cref="T:PixelEngine.Utilities.Bounds"/>'s <see cref="F:PixelEngine.Utilities.Bounds.center"/> and <see cref="P:PixelEngine.Utilities.Bounds.size"/> for equality </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Bounds.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.Bounds.ToString">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.Bounds.SetMinMax(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Directly modify both the min and max points of this <see cref="T:PixelEngine.Utilities.Bounds"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Bounds.Encapsulate(PixelEngine.Utilities.Vector3)">
            <summary> Grow the <see cref="T:PixelEngine.Utilities.Bounds"/> so it encapsulates the given <paramref name="point"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Bounds.Encapsulate(PixelEngine.Utilities.Bounds)">
            <summary> Grow the <see cref="T:PixelEngine.Utilities.Bounds"/> so it also encapsulates the entire given <paramref name="bounds"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Bounds.Expand(System.Single)">
            <summary> Expand the <see cref="T:PixelEngine.Utilities.Bounds"/> in all directions by <paramref name="amount"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Bounds.Expand(PixelEngine.Utilities.Vector3)">
            <summary> Expand the <see cref="T:PixelEngine.Utilities.Bounds"/> in the directions given by <paramref name="amount"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Bounds.Intersects(PixelEngine.Utilities.Bounds)">
            <summary> Does this <see cref="T:PixelEngine.Utilities.Bounds"/> intersect the other <paramref name="bounds"/>? </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Bounds.Contains(PixelEngine.Utilities.Vector3)">
            <summary> Does this <see cref="T:PixelEngine.Utilities.Bounds"/> contain the given <paramref name="point"/>? </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Bounds.Intersects(PixelEngine.Utilities.Ray)">
            <summary> Does the given <paramref name="r"/>ay intersect this <see cref="T:PixelEngine.Utilities.Bounds"/>? </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Bounds.ClosestPoint(PixelEngine.Utilities.Vector3)">
            <summary> Gets the point on this <see cref="T:PixelEngine.Utilities.Bounds"/> closest to the given <paramref name="point"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Bounds.Distance(PixelEngine.Utilities.Vector3)">
            <summary> Signed distance from the surface of this <see cref="T:PixelEngine.Utilities.Bounds"/> to the given <paramref name="point"/> </summary>
        </member>
        <member name="T:PixelEngine.Utilities.BoundsInt">
            <summary> Similar to UnityEngine.Bounds, represents an Axis-Aligned-Bounding-Box. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.BoundsInt.position">
            <summary> Minimum position of this <see cref="T:PixelEngine.Utilities.BoundsInt"/> </summary>
        </member>
        <member name="F:PixelEngine.Utilities.BoundsInt.size">
            <summary> Size of bounding box. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.BoundsInt.x">
            <summary> Directly get/set the x-position of this <see cref="T:PixelEngine.Utilities.BoundsInt"/> </summary>
        </member>
        <member name="P:PixelEngine.Utilities.BoundsInt.y">
            <summary> Directly get/set the y-position of this <see cref="T:PixelEngine.Utilities.BoundsInt"/> </summary>
        </member>
        <member name="P:PixelEngine.Utilities.BoundsInt.z">
            <summary> Directly get/set the z-position of this <see cref="T:PixelEngine.Utilities.BoundsInt"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.BoundsInt.#ctor(PixelEngine.Utilities.Vector3Int,PixelEngine.Utilities.Vector3Int)">
            <summary> Create a new <see cref="T:PixelEngine.Utilities.BoundsInt"/>, placed at the given <paramref name="position"/>, and with the given total <paramref name="size"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.BoundsInt.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Create a new <see cref="T:PixelEngine.Utilities.BoundsInt"/>, placed at the given position and with the given total size. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.BoundsInt.center">
            <summary> Calculate the center position of this <see cref="T:PixelEngine.Utilities.BoundsInt"/> </summary>
        </member>
        <member name="P:PixelEngine.Utilities.BoundsInt.xMin">
            <summary> Minimum x-coordinate in the <see cref="T:PixelEngine.Utilities.BoundsInt"/>. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.BoundsInt.yMin">
            <summary> Minimum y-coordinate in the <see cref="T:PixelEngine.Utilities.BoundsInt"/>. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.BoundsInt.zMin">
            <summary> Minimum z-coordinate in the <see cref="T:PixelEngine.Utilities.BoundsInt"/>. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.BoundsInt.xMax">
            <summary> Maximum x-coordinate in the <see cref="T:PixelEngine.Utilities.BoundsInt"/>. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.BoundsInt.yMax">
            <summary> Maximum y-coordinate in the <see cref="T:PixelEngine.Utilities.BoundsInt"/>. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.BoundsInt.zMax">
            <summary> Maximum z-coordinate in the <see cref="T:PixelEngine.Utilities.BoundsInt"/>. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.BoundsInt.min">
            <summary> Get the minimum point in the <see cref="T:PixelEngine.Utilities.BoundsInt"/> </summary>
        </member>
        <member name="P:PixelEngine.Utilities.BoundsInt.max">
            <summary> Get the maximum point in the <see cref="T:PixelEngine.Utilities.BoundsInt"/> </summary>
        </member>
        <member name="M:PixelEngine.Utilities.BoundsInt.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.BoundsInt.Equals(PixelEngine.Utilities.BoundsInt)">
            <summary> Compare two <see cref="T:PixelEngine.Utilities.BoundsInt"/>'s <see cref="F:PixelEngine.Utilities.BoundsInt.position"/> and <see cref="F:PixelEngine.Utilities.BoundsInt.size"/> for equality </summary>
        </member>
        <member name="M:PixelEngine.Utilities.BoundsInt.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.BoundsInt.ToString">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.BoundsInt.SetMinMax(PixelEngine.Utilities.Vector3Int,PixelEngine.Utilities.Vector3Int)">
            <summary> Directly modify both the min and max points of this <see cref="T:PixelEngine.Utilities.BoundsInt"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.BoundsInt.Encapsulate(PixelEngine.Utilities.Vector3Int)">
            <summary> Grow the <see cref="T:PixelEngine.Utilities.BoundsInt"/> so it encapsulates the given <paramref name="point"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.BoundsInt.Encapsulate(PixelEngine.Utilities.BoundsInt)">
            <summary> Grow the <see cref="T:PixelEngine.Utilities.BoundsInt"/> so it also encapsulates the entire given <paramref name="bounds"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.BoundsInt.Expand(System.Int32)">
            <summary> Expand the <see cref="T:PixelEngine.Utilities.BoundsInt"/> in all directions by <paramref name="amount"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.BoundsInt.Expand(PixelEngine.Utilities.Vector3Int)">
            <summary> Expand the <see cref="T:PixelEngine.Utilities.BoundsInt"/> in the directions given by <paramref name="amount"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.BoundsInt.Intersects(PixelEngine.Utilities.BoundsInt)">
            <summary> Does this <see cref="T:PixelEngine.Utilities.BoundsInt"/> intersect the other <paramref name="bounds"/>? </summary>
        </member>
        <member name="M:PixelEngine.Utilities.BoundsInt.Contains(PixelEngine.Utilities.Vector3Int)">
            <summary> Does this <see cref="T:PixelEngine.Utilities.BoundsInt"/> contain the given <paramref name="point"/>? </summary>
        </member>
        <member name="M:PixelEngine.Utilities.BoundsInt.Intersects(PixelEngine.Utilities.Ray)">
            <summary> Does the given <paramref name="r"/>ay intersect this <see cref="T:PixelEngine.Utilities.BoundsInt"/>? </summary>
        </member>
        <member name="M:PixelEngine.Utilities.BoundsInt.ClosestPoint(PixelEngine.Utilities.Vector3)">
            <summary> Gets the point on this <see cref="T:PixelEngine.Utilities.BoundsInt"/> closest to the given <paramref name="point"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.BoundsInt.Distance(PixelEngine.Utilities.Vector3)">
            <summary> Signed distance from the surface of this <see cref="T:PixelEngine.Utilities.BoundsInt"/> to the given <paramref name="point"/> </summary>
        </member>
        <member name="T:PixelEngine.Utilities.Matrix4x4">
            <summary> Similar to UnityEngine.Matrix4x4. 4-by-4 Matrix for 3d transformations. </summary> 
        </member>
        <member name="P:PixelEngine.Utilities.Matrix4x4.zero">
            <summary> Get zero (empty) <see cref="T:PixelEngine.Utilities.Matrix4x4"/></summary>
        </member>
        <member name="P:PixelEngine.Utilities.Matrix4x4.identity">
            <summary> Creates an identity matrix. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Matrix4x4.determinant">
            <summary> Calculate the determinant of this matrix. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Matrix4x4.m00">
            <summary> Matrix component. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Matrix4x4.m10">
            <summary> Matrix component. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Matrix4x4.m20">
            <summary> Matrix component. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Matrix4x4.m30">
            <summary> Matrix component. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Matrix4x4.m01">
            <summary> Matrix component. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Matrix4x4.m11">
            <summary> Matrix component. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Matrix4x4.m21">
            <summary> Matrix component. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Matrix4x4.m31">
            <summary> Matrix component. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Matrix4x4.m02">
            <summary> Matrix component. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Matrix4x4.m12">
            <summary> Matrix component. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Matrix4x4.m22">
            <summary> Matrix component. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Matrix4x4.m32">
            <summary> Matrix component. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Matrix4x4.m03">
            <summary> Matrix component. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Matrix4x4.m13">
            <summary> Matrix component. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Matrix4x4.m23">
            <summary> Matrix component. </summary>
        </member>
        <member name="F:PixelEngine.Utilities.Matrix4x4.m33">
            <summary> Matrix component. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Matrix4x4.Invertable(System.Single@)">
            <summary> Figure out if a matrix is invertable, and capture its <see cref="P:PixelEngine.Utilities.Matrix4x4.determinant"/>. </summary>
            <param name="detOut"> Output parameter for the captured <see cref="P:PixelEngine.Utilities.Matrix4x4.determinant"/></param>
        </member>
        <member name="P:PixelEngine.Utilities.Matrix4x4.inverse">
            <summary> Calculates the inverse <see cref="T:PixelEngine.Utilities.Matrix4x4"/> of this one, if possible. If not, returns <see cref="P:PixelEngine.Utilities.Matrix4x4.zero"/>. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Matrix4x4.transpose">
            <summary> Get the transpose of this matrix </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Matrix4x4.a">
            <summary> Alternate naming scheme accessor. (<see cref="F:PixelEngine.Utilities.Matrix4x4.m00"/>) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Matrix4x4.b">
            <summary> Alternate naming scheme accessor. (<see cref="F:PixelEngine.Utilities.Matrix4x4.m10"/>) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Matrix4x4.c">
            <summary> Alternate naming scheme accessor. (<see cref="F:PixelEngine.Utilities.Matrix4x4.m20"/>) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Matrix4x4.d">
            <summary> Alternate naming scheme accessor. (<see cref="F:PixelEngine.Utilities.Matrix4x4.m30"/>) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Matrix4x4.e">
            <summary> Alternate naming scheme accessor. (<see cref="F:PixelEngine.Utilities.Matrix4x4.m01"/>) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Matrix4x4.f">
            <summary> Alternate naming scheme accessor. (<see cref="F:PixelEngine.Utilities.Matrix4x4.m11"/>) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Matrix4x4.g">
            <summary> Alternate naming scheme accessor. (<see cref="F:PixelEngine.Utilities.Matrix4x4.m21"/>) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Matrix4x4.h">
            <summary> Alternate naming scheme accessor. (<see cref="F:PixelEngine.Utilities.Matrix4x4.m31"/>) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Matrix4x4.i">
            <summary> Alternate naming scheme accessor. (<see cref="F:PixelEngine.Utilities.Matrix4x4.m02"/>) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Matrix4x4.j">
            <summary> Alternate naming scheme accessor. (<see cref="F:PixelEngine.Utilities.Matrix4x4.m12"/>) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Matrix4x4.k">
            <summary> Alternate naming scheme accessor. (<see cref="F:PixelEngine.Utilities.Matrix4x4.m22"/>) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Matrix4x4.l">
            <summary> Alternate naming scheme accessor. (<see cref="F:PixelEngine.Utilities.Matrix4x4.m32"/>) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Matrix4x4.m">
            <summary> Alternate naming scheme accessor. (<see cref="F:PixelEngine.Utilities.Matrix4x4.m03"/>) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Matrix4x4.n">
            <summary> Alternate naming scheme accessor. (<see cref="F:PixelEngine.Utilities.Matrix4x4.m13"/>) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Matrix4x4.o">
            <summary> Alternate naming scheme accessor. (<see cref="F:PixelEngine.Utilities.Matrix4x4.m23"/>) </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Matrix4x4.p">
            <summary> Alternate naming scheme accessor. (<see cref="F:PixelEngine.Utilities.Matrix4x4.m33"/>) </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Matrix4x4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary> Construct a matrix from the given 16 components. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Matrix4x4.#ctor(PixelEngine.Utilities.Vector4,PixelEngine.Utilities.Vector4,PixelEngine.Utilities.Vector4,PixelEngine.Utilities.Vector4)">
            <summary> Construct a <see cref="T:PixelEngine.Utilities.Matrix4x4"/> from 4 column <see cref="T:PixelEngine.Utilities.Vector4"/>s </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Matrix4x4.Item(System.Int32,System.Int32)">
            <summary> Index this <see cref="T:PixelEngine.Utilities.Matrix4x4"/> with a two int indexes  in range [0, 3], in row-major order. </summary>
        </member>
        <member name="P:PixelEngine.Utilities.Matrix4x4.Item(System.Int32)">
            <summary> Index this <see cref="T:PixelEngine.Utilities.Matrix4x4"/> with a single int index in range [0, 15]. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Matrix4x4.MultiplyPoint(PixelEngine.Utilities.Vector3)">
            <summary> Multiplies this <see cref="T:PixelEngine.Utilities.Matrix4x4"/> by a given <see cref="T:PixelEngine.Utilities.Vector3"/> with an implicit 1 in the w-component. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Matrix4x4.MultiplyPointDirect(PixelEngine.Utilities.Vector3)">
            <summary> Multiplies this <see cref="T:PixelEngine.Utilities.Matrix4x4"/> by a given <see cref="T:PixelEngine.Utilities.Vector3"/> with an implicit 1 in the w-component, but discards the re-normalization process. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Matrix4x4.MultiplyVector(PixelEngine.Utilities.Vector3)">
            <summary> Multiplies this <see cref="T:PixelEngine.Utilities.Matrix4x4"/> by a given <see cref="T:PixelEngine.Utilities.Vector3"/>, ignoring the 4th dimension. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Matrix4x4.Scale(PixelEngine.Utilities.Vector3)">
            <summary> Create a <see cref="T:PixelEngine.Utilities.Matrix4x4"/> that scales by the given scale <see cref="T:PixelEngine.Utilities.Vector3"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Matrix4x4.Translate(PixelEngine.Utilities.Vector3)">
            <summary> Create a <see cref="T:PixelEngine.Utilities.Matrix4x4"/> that translates by the given <see cref="T:PixelEngine.Utilities.Vector3"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Matrix4x4.Rotate(System.Single,PixelEngine.Utilities.Vector3)">
            <summary> Create a <see cref="T:PixelEngine.Utilities.Matrix4x4"/> that rotates <paramref name="angle"/> degrees about the given <paramref name="axis"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Matrix4x4.Rotate(System.Single,System.Single,System.Single,System.Single)">
            <summary> Create a <see cref="T:PixelEngine.Utilities.Matrix4x4"/> that rotates <paramref name="angle"/> degrees about the axis formed by given <paramref name="x"/>, <paramref name="y"/>, <paramref name="z"/>. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Matrix4x4.Frustrum(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary> Creates a Perspective Frustrum <see cref="T:PixelEngine.Utilities.Matrix4x4"/>, looking through a window defined by 
            <paramref name="left"/>, <paramref name="right"/>, <paramref name="top"/>, <paramref name="bottom"/>, which is
            <paramref name="near"/> units away, up to <paramref name="far"/> units away </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Matrix4x4.LookAt(PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3,PixelEngine.Utilities.Vector3)">
            <summary> Create a matrix looking from <paramref name="eye"/> at <paramref name="target"/>, with the given <paramref name="up"/>wards direction. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Matrix4x4.ToString">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Utilities.Matrix4x4.op_Multiply(PixelEngine.Utilities.Matrix4x4,PixelEngine.Utilities.Matrix4x4)">
            <summary> Multiply two <see cref="T:PixelEngine.Utilities.Matrix4x4"/>s, order matters. </summary>
        </member>
        <member name="M:PixelEngine.Utilities.Matrix4x4.op_Multiply(PixelEngine.Utilities.Matrix4x4,PixelEngine.Utilities.Vector4)">
            <summary> Multiply this <see cref="T:PixelEngine.Utilities.Matrix4x4"/> by the given <see cref="T:PixelEngine.Utilities.Vector4"/>. </summary>
        </member>
        <member name="T:PixelEngine.Extensions.Extension">
            <summary> PixelEngine Extension framework base class. </summary>
        </member>
        <member name="M:PixelEngine.Extensions.Extension.Init(PixelEngine.Game)">
            <summary> Statically initialize this extension </summary>
            <param name="game"> Game to bind extension to </param>
        </member>
        <member name="P:PixelEngine.Extensions.Extension.Game">
            <summary> Bound Game object</summary>
        </member>
        <member name="T:PixelEngine.Extensions.Transforms.Transform">
            <summary> Example Extension for `Examples.Transformations`.</summary>
        </member>
        <member name="M:PixelEngine.Extensions.Transforms.Transform.#ctor">
            <summary> Initialize the extension by creating 4 3x3 matricies. </summary>
        </member>
        <member name="M:PixelEngine.Extensions.Transforms.Transform.Reset">
            <summary> Resets the internal state back to identity matricies (no transformation). </summary>
        </member>
        <member name="M:PixelEngine.Extensions.Transforms.Transform.Rotate(System.Single)">
            <summary> Applies a rotation to the current state  </summary>
            <param name="angle"> Angle, in radians, to rotate by. </param>
        </member>
        <member name="M:PixelEngine.Extensions.Transforms.Transform.Translate(System.Single,System.Single)">
            <summary> Applies a translation by the given x/y coords to the current state </summary>
            <param name="ox"> X to translate by </param>
            <param name="oy"> Y to translate by </param>
        </member>
        <member name="M:PixelEngine.Extensions.Transforms.Transform.Scale(System.Single,System.Single)">
            <summary> Applies a scale by the given x/y coords, to the current state</summary>
            <param name="sx"> X to scale by </param>
            <param name="sy"> Y to scale by </param>
        </member>
        <member name="M:PixelEngine.Extensions.Transforms.Transform.Shear(System.Single,System.Single)">
            <summary> Applies a shear by the given x/y coords to the current state </summary>
            <param name="sx"> X to shear by </param>
            <param name="sy"> Y to shear by </param>
        </member>
        <member name="M:PixelEngine.Extensions.Transforms.Transform.DrawSprite(PixelEngine.ISprite,PixelEngine.Extensions.Transforms.Transform)">
            <summary> Draws a sprite, using the current transform state of the given <see cref="T:PixelEngine.Extensions.Transforms.Transform"/> </summary>
            <param name="spr"> <see cref="T:PixelEngine.ISprite"/> to draw </param>
            <param name="transform"> Transformation to apply </param>
        </member>
        <member name="M:PixelEngine.Extensions.Transforms.Transform.Invert">
            <summary> Sets the 4th matrix to be the inverse of the source matrix. </summary>
        </member>
        <member name="M:PixelEngine.Extensions.Transforms.Transform.Multiply">
            <summary> Applies multiplication between source and temp matricies </summary>
        </member>
        <member name="M:PixelEngine.Extensions.Transforms.Transform.Forward(System.Single,System.Single,System.Single@,System.Single@)">
            <summary> Applies matrix times input x/y coordinates </summary>
            <param name="ix"> Input x </param> <param name="iy"> Input y </param>
            <param name="ox"> Output x </param> <param name="oy"> Output y </param>
        </member>
        <member name="M:PixelEngine.Extensions.Transforms.Transform.Backward(System.Single,System.Single,System.Single@,System.Single@)">
            <summary> Applies inverse matrix times input x/y coordinates </summary>
            <param name="ix"> Input x </param> <param name="iy"> Input y </param>
            <param name="ox"> Output x </param> <param name="oy"> Output y </param>
        </member>
        <member name="F:PixelEngine.Extensions.Transforms.Transform.matrix">
            <summary> 3d array of floats representing multiple matricies. </summary>
        </member>
        <member name="F:PixelEngine.Extensions.Transforms.Transform.targetMat">
            <summary> Current target matrix </summary>
        </member>
        <member name="F:PixelEngine.Extensions.Transforms.Transform.sourceMat">
            <summary> Current source matrix </summary>
        </member>
        <member name="F:PixelEngine.Extensions.Transforms.Transform.TEMP_MATRIX">
            <summary> Constant temp matrix index </summary>
        </member>
        <member name="F:PixelEngine.Extensions.Transforms.Transform.INVERSE_MATRIX">
            <summary> Constant inverse matrix index </summary>
        </member>
        <member name="F:PixelEngine.Extensions.Transforms.Transform.inverseDirty">
            <summary> Dirty flag for inverse matrix </summary>
        </member>
        <member name="T:PixelEngine.Input">
            <summary> Struct representing a snapshot of the state of an input key. </summary>
        </member>
        <member name="F:PixelEngine.Input.data">
            <summary> Data byte... Still a bit wasteful, but less than before. </summary>
            <remarks> With 3 bool fields, an Input was 3 bytes before, now it is just one. </remarks>
        </member>
        <member name="F:PixelEngine.Input.PRESSED">
            <summary> Mask for pressed bit </summary>
        </member>
        <member name="F:PixelEngine.Input.RELEASED">
            <summary> Mask for released bit </summary>
        </member>
        <member name="F:PixelEngine.Input.DOWN">
            <summary> Mask for down bit </summary>
        </member>
        <member name="P:PixelEngine.Input.Pressed">
            <summary> Is the key pressed this frame? </summary>
        </member>
        <member name="P:PixelEngine.Input.Released">
            <summary> Is the key released this frame? </summary>
        </member>
        <member name="P:PixelEngine.Input.Down">
            <summary> Is the key held down? </summary>
        </member>
        <member name="P:PixelEngine.Input.Up">
            <summary> Is the key not held down? </summary>
        </member>
        <member name="T:PixelEngine.Display">
            <summary> PixelEngine base class holding logic for interacting with the display window. </summary>
        </member>
        <member name="F:PixelEngine.Display.proc">
            <summary> Callback for windows to send the window messages </summary>
        </member>
        <member name="F:PixelEngine.Display.init">
            <summary> Has the window been initialized yet? </summary>
        </member>
        <member name="F:PixelEngine.Display.text">
            <summary> Window title text </summary>
        </member>
        <member name="M:PixelEngine.Display.#ctor">
            <summary> Create a new display with default <see cref="M:PixelEngine.Display.WndProc(System.IntPtr,System.UInt32,System.Int32,System.Int32)"/> handler.</summary>
        </member>
        <member name="P:PixelEngine.Display.ScreenWidth">
            <summary> Pixels from left to right of screen </summary>
        </member>
        <member name="P:PixelEngine.Display.ScreenHeight">
            <summary> Pixels from top to bottom of screen </summary>
        </member>
        <member name="P:PixelEngine.Display.PixWidth">
            <summary> Width per pixel </summary>
        </member>
        <member name="P:PixelEngine.Display.PixHeight">
            <summary> Height per pixel </summary>
        </member>
        <member name="F:PixelEngine.Display.windowWidth">
            <summary> Width of window </summary>
        </member>
        <member name="F:PixelEngine.Display.windowHeight">
            <summary> Height of window </summary>
        </member>
        <member name="P:PixelEngine.Display.AppName">
            <summary> Window title </summary>
        </member>
        <member name="P:PixelEngine.Display.ClassName">
            <summary> Name of overriding class, used as the default window title text. </summary>
        </member>
        <member name="P:PixelEngine.Display.ClientRect">
            <summary> Area of client window </summary>
        </member>
        <member name="P:PixelEngine.Display.Handle">
            <summary> Native pointer to window handle </summary>
        </member>
        <member name="M:PixelEngine.Display.Construct(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Constructs a window. </summary>
            <param name="width"> Width, in pixels. Default = 100 </param>
            <param name="height"> Height, in pixels. Default = 100</param>
            <param name="pixWidth"> Width in screen pixels of a single game pixel. Default = 5 </param>
            <param name="pixHeight"> Height in screen pixels of a single game pixel. Default = 5 </param>
        </member>
        <member name="M:PixelEngine.Display.MessagePump">
            <summary> Start the windows message pump </summary>
        </member>
        <member name="M:PixelEngine.Display.CreateWindow">
            <summary> Create the window using the winapi </summary>
        </member>
        <member name="M:PixelEngine.Display.RegisterClass">
            <summary> Register the class with the winapi </summary>
        </member>
        <member name="M:PixelEngine.Display.WndProc(System.IntPtr,System.UInt32,System.Int32,System.Int32)">
            <summary> Windows message processor </summary>
        </member>
        <member name="T:PixelEngine.ResxHelper">
            <summary> Helper class to extract builtin resource files </summary>
        </member>
        <member name="F:PixelEngine.ResxHelper.DllName">
            <summary> DLL files are stored in </summary>
        </member>
        <member name="F:PixelEngine.ResxHelper.dllHandle">
            <summary> Native pointer to loaded dll </summary>
        </member>
        <member name="M:PixelEngine.ResxHelper.LoadDll">
            <summary> Call to initialize dll </summary>
        </member>
        <member name="M:PixelEngine.ResxHelper.LoadFonts">
            <summary> Extract all font files into temp folder . </summary>
        </member>
        <member name="M:PixelEngine.ResxHelper.LoadFile(System.String)">
            <summary> Extract a file into the temp folder </summary>
            <param name="file"> File name to extract </param>
            <returns> Path where the file was loaded </returns>
        </member>
        <member name="M:PixelEngine.ResxHelper.DestroyDll">
            <summary> Call to unload dll </summary>
        </member>
        <member name="T:PixelEngine.Key">
            <summary> Enum for possible keyboard keys </summary>
        </member>
        <member name="T:PixelEngine.Mouse">
            <summary> Enum for possible mouse buttons </summary>
        </member>
        <member name="T:PixelEngine.Scroll">
            <summary> Enum for possible scroll directions </summary>
        </member>
        <member name="T:PixelEngine.Game">
            <summary> Fully functional Game boilerplate. </summary>
        </member>
        <member name="P:PixelEngine.Game.MouseX">
            <summary> last x position of mouse </summary>
        </member>
        <member name="P:PixelEngine.Game.MouseY">
            <summary> last y position of mouse </summary>
        </member>
        <member name="P:PixelEngine.Game.PixelMode">
            <summary> Current pixel blend mode </summary>
        </member>
        <member name="P:PixelEngine.Game.Font">
            <summary> Current Font </summary>
        </member>
        <member name="P:PixelEngine.Game.PixelBlend">
            <summary> Alpha % to apply during alpha blend mode </summary>
        </member>
        <member name="P:PixelEngine.Game.FrameCount">
            <summary> Current frame count </summary>
        </member>
        <member name="P:PixelEngine.Game.Focus">
            <summary> Does this window have focus? </summary>
        </member>
        <member name="P:PixelEngine.Game.ClampMouse">
            <summary> Does the mouse get clamped to the window? </summary>
        </member>
        <member name="P:PixelEngine.Game.FrameRate">
            <summary> Current framerate </summary>
        </member>
        <member name="P:PixelEngine.Game.MouseScroll">
            <summary> Current mouse scroll setting  </summary>
        </member>
        <member name="P:PixelEngine.Game.Clock">
            <summary> Clock since game start  </summary>
        </member>
        <member name="P:PixelEngine.Game.Volume">
            <summary> Master audio volume </summary>
        </member>
        <member name="P:PixelEngine.Game.AudioTime">
            <summary> Time for audio sync </summary>
        </member>
        <member name="P:PixelEngine.Game.Shader">
            <summary> Current pixel shader </summary>
        </member>
        <member name="P:PixelEngine.Game.DrawTarget">
            <summary> Current Draw target </summary>
        </member>
        <member name="P:PixelEngine.Game.AppName">
            <summary> Window name </summary>
        </member>
        <member name="F:PixelEngine.Game.gameLoop">
            <summary> Thread hosting the game loop </summary>
        </member>
        <member name="F:PixelEngine.Game.audio">
            <summary> Audio engine bound to this game </summary>
        </member>
        <member name="F:PixelEngine.Game.canvas">
            <summary> Graphics object bound to this game </summary>
        </member>
        <member name="F:PixelEngine.Game.pixBlend">
            <summary> field backing <see cref="P:PixelEngine.Game.PixelBlend"/> property </summary>
        </member>
        <member name="F:PixelEngine.Game.frameTimer">
            <summary> Timer for frame ticks </summary>
        </member>
        <member name="F:PixelEngine.Game.proc">
            <summary> Windows message processing handler </summary>
        </member>
        <member name="F:PixelEngine.Game.timeProc">
            <summary> Mouse message processing handler  </summary>
        </member>
        <member name="F:PixelEngine.Game.hrText">
            <summary> Highres text </summary>
        </member>
        <member name="F:PixelEngine.Game.active">
            <summary> Game currently active? </summary>
        </member>
        <member name="F:PixelEngine.Game.paused">
            <summary> Game currently paused? </summary>
        </member>
        <member name="F:PixelEngine.Game.mapKeys">
            <summary> Keystate dictionary for fast lookup </summary>
        </member>
        <member name="F:PixelEngine.Game.drawTarget">
            <summary> Current draw surface </summary>
        </member>
        <member name="F:PixelEngine.Game.textTarget">
            <summary> Text drawing surface </summary>
        </member>
        <member name="F:PixelEngine.Game.defDrawTarget">
            <summary> Default draw surface </summary>
        </member>
        <member name="F:PixelEngine.Game.anyKey">
            <summary> Any key's state </summary>
        </member>
        <member name="F:PixelEngine.Game.noneKey">
            <summary> No key's state </summary>
        </member>
        <member name="F:PixelEngine.Game.anyMouse">
            <summary> Any mouse button's state </summary>
        </member>
        <member name="F:PixelEngine.Game.noneMouse">
            <summary> No mouse button's state </summary>
        </member>
        <member name="F:PixelEngine.Game.delaying">
            <summary> Is the game currently delaying the next frame? </summary>
        </member>
        <member name="F:PixelEngine.Game.delayTime">
            <summary> Time to wait before updating the next frame, if delaying. </summary>
        </member>
        <member name="F:PixelEngine.Game.shader">
            <summary> Current pixel-shader function </summary>
        </member>
        <member name="F:PixelEngine.Game.mouseOutOfWindow">
            <summary> Is the mouse outside of the window? </summary>
        </member>
        <member name="F:PixelEngine.Game.keyboard">
            <summary> Keyboard state snapshot for reading </summary>
        </member>
        <member name="F:PixelEngine.Game.newKeyboard">
            <summary> Packed bitflags for current keyboard state </summary>
        </member>
        <member name="F:PixelEngine.Game.oldKeyboard">
            <summary> Packed bitflags for previous keyboard state </summary>
        </member>
        <member name="F:PixelEngine.Game.mouse">
            <summary> Mouse state snapshot for reading </summary>
        </member>
        <member name="F:PixelEngine.Game.newMouse">
            <summary> Packed bitflags for current mouse state </summary>
        </member>
        <member name="F:PixelEngine.Game.oldMouse">
            <summary> Packed bitflags for previous mouse state </summary>
        </member>
        <member name="M:PixelEngine.Game.Start">
            <summary> Entry point for game </summary>
        </member>
        <member name="M:PixelEngine.Game.Construct(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Constructs the window for the game </summary>
            <param name="width"> Width, in pixels. Default = 100 </param>
            <param name="height"> Height, in pixels. Default = 100</param>
            <param name="pixWidth"> Width in screen pixels of a single game pixel. Default = 5 </param>
            <param name="pixHeight"> Height in screen pixels of a single game pixel. Default = 5 </param>
            <param name="frameRate"> Target FrameRate, or -1 to run at sanic speed. Default = -1 </param>
        </member>
        <member name="M:PixelEngine.Game.GameLoop">
            <summary> Actual game loop. Runs in its own thread. </summary>
        </member>
        <member name="M:PixelEngine.Game.HandleMouse">
            <summary> Update mouse states </summary>
        </member>
        <member name="M:PixelEngine.Game.HandleKeyboard">
            <summary> Update keyboard states </summary>
        </member>
        <member name="M:PixelEngine.Game.HandleDrawTarget">
            <summary> Resets draw target to default draw target. </summary>
        </member>
        <member name="M:PixelEngine.Game.WndProc(System.IntPtr,System.UInt32,System.Int32,System.Int32)">
            <summary> Windows message handler </summary>
        </member>
        <member name="M:PixelEngine.Game.GetKey(PixelEngine.Key)">
            <summary> Polls the current state of a single key. </summary>
            <param name="k"> Key to poll for </param>
            <returns> State of given key on current frame </returns>
        </member>
        <member name="M:PixelEngine.Game.GetMouse(PixelEngine.Mouse)">
            <summary> Polls the current state of a single mouse button. </summary>
            <param name="m"> Mouse button to poll for </param>
            <returns> State of given mouse button on current frame </returns>
        </member>
        <member name="M:PixelEngine.Game.Delay(System.Single)">
            <summary> Delay the next frame for <paramref name="time"/> seconds. </summary>
            <param name="time"> Seconds to delay next frame for. </param>
        </member>
        <member name="M:PixelEngine.Game.Continue">
            <summary> Reactivate game. Use in <see cref="M:PixelEngine.Game.OnDestroy"/> to rescue the game if you don't want it to stop. </summary>
        </member>
        <member name="M:PixelEngine.Game.Finish">
            <summary> Deactivate game. </summary>
        </member>
        <member name="M:PixelEngine.Game.NoLoop">
            <summary> Pause the game loop. </summary>
        </member>
        <member name="M:PixelEngine.Game.Loop">
            <summary> Restart the game loop. </summary>
        </member>
        <member name="M:PixelEngine.Game.CreateFont(System.Collections.Generic.Dictionary{System.Char,PixelEngine.Sprite})">
            <summary> Helper method to create a <see cref="P:PixelEngine.Game.Font"/> out of a new sequence of <see cref="T:PixelEngine.Sprite"/> glyphs mapped to characters. </summary>
            <param name="glyphs"> Dictionary of <see cref="T:System.Char"/> to <see cref="T:PixelEngine.Sprite"/> to generate <see cref="P:PixelEngine.Game.Font"/> from </param>
            <returns> Created <see cref="P:PixelEngine.Game.Font"/> </returns>
        </member>
        <member name="M:PixelEngine.Game.GetScreenPixel(System.Int32,System.Int32)">
            <summary> Get the last <see cref="T:PixelEngine.Pixel"/> color drawn to the screen at a given place </summary>
            <param name="x"> x coord to read </param>
            <param name="y"> y coord to read </param>
            <returns> <see cref="T:PixelEngine.Pixel"/> color value drawn at given x/y </returns>
        </member>
        <member name="M:PixelEngine.Game.GetScreen">
            <summary> Read the entire screen's <see cref="T:PixelEngine.Pixel"/>s into a 2d array </summary>
            <returns> 2d array of <see cref="T:PixelEngine.Pixel"/>s from the screen </returns>
        </member>
        <member name="F:PixelEngine.Game.PI">
            <summary> PI constant </summary>
        </member>
        <member name="M:PixelEngine.Game.Sin(System.Single)">
            <summary> Wrapper for <see cref="M:System.Math.Sin(System.Double)"/> </summary>
        </member>
        <member name="M:PixelEngine.Game.Cos(System.Single)">
            <summary> Wrapper for <see cref="M:System.Math.Cos(System.Double)"/> </summary>
        </member>
        <member name="M:PixelEngine.Game.Tan(System.Single)">
            <summary> Wrapper for <see cref="M:System.Math.Tan(System.Double)"/> </summary>
        </member>
        <member name="M:PixelEngine.Game.Power(System.Single,System.Single)">
            <summary> Wrapper for <see cref="M:System.Math.Pow(System.Double,System.Double)"/> </summary>
        </member>
        <member name="M:PixelEngine.Game.Sqrt(System.Single)">
            <summary> Wrapper for <see cref="M:System.Math.Sqrt(System.Double)"/> </summary>
        </member>
        <member name="M:PixelEngine.Game.Round(System.Single,System.Int32)">
            <summary> Wrapper for <see cref="M:System.Math.Round(System.Double)"/> </summary>
        </member>
        <member name="M:PixelEngine.Game.Map(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary> Remap <paramref name="val"/> from [<paramref name="oMin"/>, <paramref name="oMax"/>] space to [<paramref name="nMin"/>, <paramref name="nMax"/>] space. </summary>
        </member>
        <member name="M:PixelEngine.Game.Clamp(System.Single,System.Single,System.Single)">
            <summary> Clamp <paramref name="val"/> between [<paramref name="min"/>, <paramref name="max"/>] </summary>
        </member>
        <member name="M:PixelEngine.Game.Lerp(System.Single,System.Single,System.Single)">
            <summary> Linearly Interpolate <paramref name="amt"/> between [<paramref name="start"/>, <paramref name="end"/>] </summary>
        </member>
        <member name="M:PixelEngine.Game.Wrap(System.Single,System.Single,System.Single)">
            <summary> Wrap <paramref name="val"/> so it stays inside of [<paramref name="min"/>, <paramref name="max"/>] </summary>
        </member>
        <member name="M:PixelEngine.Game.Distance(System.Single,System.Single,System.Single,System.Single)">
            <summary> Crude distance between 2d points </summary>
            <param name="x1"> first x coord </param> <param name="y1"> first y coord</param>
            <param name="x2"> second x coord </param> <param name="y2"> second y coord</param>
            <returns> Distance between points </returns>
        </member>
        <member name="M:PixelEngine.Game.Magnitude(System.Single,System.Single)">
            <summary> Crude magnitude of given 2d vector  </summary>
            <param name="x"> x coord </param> <param name="y"> y coord</param>
            <returns> Distance from point to origin </returns>
        </member>
        <member name="M:PixelEngine.Game.Between(System.Single,System.Single,System.Single)">
            <summary> Test if <paramref name="val"/> is between [<paramref name="min"/>, <paramref name="max"/>] </summary>
        </member>
        <member name="M:PixelEngine.Game.Seed">
            <summary> Reseed the RNG with the current Tick count </summary>
        </member>
        <member name="M:PixelEngine.Game.Seed(System.Int32)">
            <summary> Reseed the RNG with the given seed </summary>
        </member>
        <member name="M:PixelEngine.Game.Random(System.Int32)">
            <summary> Get a random int from [0, <paramref name="max"/>) </summary>
        </member>
        <member name="M:PixelEngine.Game.Random(System.Int32,System.Int32)">
            <summary> Get a random int from [<paramref name="min"/>, <paramref name="max"/>) </summary>
        </member>
        <member name="M:PixelEngine.Game.Random">
            <summary> Get a random float from [0, 1) </summary>
        </member>
        <member name="M:PixelEngine.Game.Random(System.Single)">
            <summary> Get a random float from [0, <paramref name="max"/>) </summary>
        </member>
        <member name="M:PixelEngine.Game.Random(System.Single,System.Single)">
            <summary> Get a random float from [<paramref name="min"/>, <paramref name="max"/>) </summary>
        </member>
        <member name="M:PixelEngine.Game.Random``1(``0[])">
            <summary> Choose a random element from a given Array </summary>
        </member>
        <member name="M:PixelEngine.Game.Random``1(System.Collections.Generic.List{``0})">
            <summary> Choose a random element from a given List </summary>
        </member>
        <member name="M:PixelEngine.Game.Random``1(System.Collections.Generic.IEnumerable{``0})">
            <summary> Choose a random element from a given Collection </summary>
        </member>
        <member name="M:PixelEngine.Game.Degrees(System.Single)">
            <summary> Convert radians to degrees </summary>
        </member>
        <member name="M:PixelEngine.Game.Radians(System.Single)">
            <summary> Convert degrees to radians </summary>
        </member>
        <member name="M:PixelEngine.Game.MakeArray``1(``0[])">
            <summary> Helper that packs a comma separated list of parameters into an array </summary>
        </member>
        <member name="M:PixelEngine.Game.MakeArray``1(System.Int32,System.Func{System.Int32,``0})">
            <summary> Helper that takes a <paramref name="selector"/> function and generates an array of <paramref name="count"/> elements </summary>
        </member>
        <member name="M:PixelEngine.Game.MakeList``1(``0[])">
            <summary> Helper that packs a comma separated list of parameters into a List</summary>
        </member>
        <member name="M:PixelEngine.Game.MakeList``1(System.Int32,System.Func{System.Int32,``0})">
            <summary> Helper that takes a <paramref name="selector"/> function and generates a List of <paramref name="count"/> elements </summary>
        </member>
        <member name="M:PixelEngine.Game.MouseTimer(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32)">
            <summary> Windows event handler callback. </summary>
        </member>
        <member name="M:PixelEngine.Game.UpdateMouse(System.Int32,System.Int32)">
            <summary> Update mouse x/y, and bind mouse to window if configured </summary>
        </member>
        <member name="M:PixelEngine.Game.CreateWindow">
            <summary> Window initialization logic </summary>
        </member>
        <member name="M:PixelEngine.Game.RegisterClass">
            <summary> Windows class registration </summary>
        </member>
        <member name="M:PixelEngine.Game.MapKeyboard">
            <summary> Assign all <see cref="T:PixelEngine.Windows.VK"/> "Virtual Key" codes into a dictionary for lookup as <see cref="T:PixelEngine.Key"/> enums </summary>
        </member>
        <member name="M:PixelEngine.Game.Draw(System.Int32,System.Int32,PixelEngine.Pixel)">
            <summary> Put a <see cref="T:PixelEngine.Pixel"/> somewhere on the screen </summary>
            <param name="x"> x coord </param>
            <param name="y"> y coord </param>
            <param name="col"> color of pixel to draw </param>
            <remarks> Applies any blendmode settings configured by <see cref="P:PixelEngine.Game.PixelMode"/> when drawing the pixel. </remarks>
        </member>
        <member name="M:PixelEngine.Game.Draw(PixelEngine.Point,PixelEngine.Pixel)">
            <summary> Put a <see cref="T:PixelEngine.Pixel"/> somewhere on the screen </summary>
            <param name="p"> coordinate points </param>
            <param name="col"> color of pixel to draw </param>
            <remarks> Applies any blendmode settings configured by <see cref="P:PixelEngine.Game.PixelMode"/> when drawing the pixel. </remarks>
        </member>
        <member name="M:PixelEngine.Game.DrawLine(PixelEngine.Point,PixelEngine.Point,PixelEngine.Pixel)">
            <summary> Draw a line of <see cref="T:PixelEngine.Pixel"/>s betwen the given <see cref="T:PixelEngine.Point"/>s </summary>
            <param name="p1"> First <see cref="T:PixelEngine.Point"/> </param>
            <param name="p2"> Second <see cref="T:PixelEngine.Point"/> </param>
            <param name="col"> <see cref="T:PixelEngine.Pixel"/> color to draw </param>
        </member>
        <member name="M:PixelEngine.Game.DrawCircle(PixelEngine.Point,System.Int32,PixelEngine.Pixel)">
            <summary> Draw an empty cirlce of <see cref="T:PixelEngine.Pixel"/>s centered around a <see cref="T:PixelEngine.Point"/></summary>
            <param name="p"> <see cref="T:PixelEngine.Point"/> at center </param>
            <param name="radius"> Radius around center </param>
            <param name="col"> <see cref="T:PixelEngine.Pixel"/> color to draw </param>
        </member>
        <member name="M:PixelEngine.Game.FillCircle(PixelEngine.Point,System.Int32,PixelEngine.Pixel)">
            <summary> Draw a filled cirlce of <see cref="T:PixelEngine.Pixel"/>s centered around a <see cref="T:PixelEngine.Point"/></summary>
            <param name="p"> <see cref="T:PixelEngine.Point"/> at center </param>
            <param name="radius"> Radius around center </param>
            <param name="col"> <see cref="T:PixelEngine.Pixel"/> color to draw </param>
        </member>
        <member name="M:PixelEngine.Game.DrawEllipse(PixelEngine.Point,System.Int32,System.Int32,PixelEngine.Pixel)">
            <summary> Draw an empty elipse of <see cref="T:PixelEngine.Pixel"/>s centered around a <see cref="T:PixelEngine.Point"/></summary>
            <param name="p"> <see cref="T:PixelEngine.Point"/> at center </param>
            <param name="width"> Width around center </param>
            <param name="height"> Height around center </param>
            <param name="col"> <see cref="T:PixelEngine.Pixel"/> color to draw </param>
        </member>
        <member name="M:PixelEngine.Game.FillEllipse(PixelEngine.Point,System.Int32,System.Int32,PixelEngine.Pixel)">
            <summary> Draw a filled elipse of <see cref="T:PixelEngine.Pixel"/>s centered around a <see cref="T:PixelEngine.Point"/></summary>
            <param name="p"> <see cref="T:PixelEngine.Point"/> at center </param>
            <param name="width"> Width around center </param>
            <param name="height"> Height around center </param>
            <param name="col"> <see cref="T:PixelEngine.Pixel"/> color to draw </param>
        </member>
        <member name="M:PixelEngine.Game.DrawRect(PixelEngine.Point,System.Int32,System.Int32,PixelEngine.Pixel)">
            <summary> Draw an empty rectangle of <see cref="T:PixelEngine.Pixel"/>s </summary>
            <param name="p"> "Top Left" <see cref="T:PixelEngine.Point"/> </param>
            <param name="w"> Width of rectangle </param>
            <param name="h"> Height of rectangle </param>
            <param name="col"> <see cref="T:PixelEngine.Pixel"/> color to draw </param>
        </member>
        <member name="M:PixelEngine.Game.DrawRect(PixelEngine.Point,PixelEngine.Point,PixelEngine.Pixel)">
            <summary> Draw an empty rectangle of <see cref="T:PixelEngine.Pixel"/>s between two <see cref="T:PixelEngine.Point"/>s </summary>
            <param name="p1"> First bounding <see cref="T:PixelEngine.Point"/> </param>
            <param name="p2"> Second bounding <see cref="T:PixelEngine.Point"/> </param>
            <param name="col"> <see cref="T:PixelEngine.Pixel"/> color to draw </param>
        </member>
        <member name="M:PixelEngine.Game.FillRect(PixelEngine.Point,System.Int32,System.Int32,PixelEngine.Pixel)">
            <summary> Draw a filled rectangle of <see cref="T:PixelEngine.Pixel"/>s </summary>
            <param name="p"> "Top Left" <see cref="T:PixelEngine.Point"/> </param>
            <param name="w"> Width of rectangle </param>
            <param name="h"> Height of rectangle </param>
            <param name="col"> <see cref="T:PixelEngine.Pixel"/> color to draw </param>
        </member>
        <member name="M:PixelEngine.Game.FillRect(PixelEngine.Point,PixelEngine.Point,PixelEngine.Pixel)">
            <summary> Draw a filled rectangle of <see cref="T:PixelEngine.Pixel"/>s between two <see cref="T:PixelEngine.Point"/>s </summary>
            <param name="p1"> First bounding <see cref="T:PixelEngine.Point"/> </param>
            <param name="p2"> Second bounding <see cref="T:PixelEngine.Point"/> </param>
            <param name="col"> <see cref="T:PixelEngine.Pixel"/> color to draw </param>
        </member>
        <member name="M:PixelEngine.Game.DrawTriangle(PixelEngine.Point,PixelEngine.Point,PixelEngine.Point,PixelEngine.Pixel)">
            <summary> Draw an empty triangle of <see cref="T:PixelEngine.Pixel"/>s between three <see cref="T:PixelEngine.Point"/>s </summary>
            <param name="p1"> First bounding <see cref="T:PixelEngine.Point"/> </param>
            <param name="p2"> Second bounding <see cref="T:PixelEngine.Point"/> </param>
            <param name="p3"> Third bounding <see cref="T:PixelEngine.Point"/> </param>
            <param name="col"> <see cref="T:PixelEngine.Pixel"/> color to draw </param>
        </member>
        <member name="M:PixelEngine.Game.FillTriangle(PixelEngine.Point,PixelEngine.Point,PixelEngine.Point,PixelEngine.Pixel)">
            <summary> Draw a filled triangle of <see cref="T:PixelEngine.Pixel"/>s between three <see cref="T:PixelEngine.Point"/>s </summary>
            <param name="p1"> First bounding <see cref="T:PixelEngine.Point"/> </param>
            <param name="p2"> Second bounding <see cref="T:PixelEngine.Point"/> </param>
            <param name="p3"> Third bounding <see cref="T:PixelEngine.Point"/> </param>
            <param name="col"> <see cref="T:PixelEngine.Pixel"/> color to draw </param>
        </member>
        <member name="M:PixelEngine.Game.DrawPolygon(PixelEngine.Point[],PixelEngine.Pixel)">
            <summary> Draws a wireframe polygon defined by the given list of <see cref="T:PixelEngine.Point"/>s </summary>
            <param name="verts"> <see cref="T:PixelEngine.Point"/>[] to connect with lines </param>
            <param name="col"> <see cref="T:PixelEngine.Pixel"/> color to draw </param>
        </member>
        <member name="M:PixelEngine.Game.FillPolygon(PixelEngine.Point[],PixelEngine.Pixel)">
            <summary> Draws a filled polygon defined by the given list of <see cref="T:PixelEngine.Point"/>s </summary>
            <param name="verts"> <see cref="T:PixelEngine.Point"/>[] to connect with triangles</param>
            <param name="col"> <see cref="T:PixelEngine.Pixel"/> color to draw </param>
        </member>
        <member name="M:PixelEngine.Game.DrawPath(PixelEngine.Point[],PixelEngine.Pixel)">
            <summary> Draws a wireframe path defined by the given list of <see cref="T:PixelEngine.Point"/>s </summary>
            <param name="points"> <see cref="T:PixelEngine.Point"/>[] to connect with lines </param>
            <param name="col"> <see cref="T:PixelEngine.Pixel"/> color to draw </param>
        </member>
        <member name="M:PixelEngine.Game.DrawSprite(PixelEngine.Point,PixelEngine.ISprite)">
            <summary> Draw all the <see cref="T:PixelEngine.Pixel"/>s in a given <see cref="T:PixelEngine.ISprite"/> to the screen </summary>
            <param name="p"> World origin <see cref="T:PixelEngine.Point"/> of given sprite </param>
            <param name="spr"> Given <see cref="T:PixelEngine.ISprite"/> to draw </param>
        </member>
        <member name="M:PixelEngine.Game.DrawPartialSprite(PixelEngine.Point,PixelEngine.ISprite,PixelEngine.Point,System.Int32,System.Int32)">
            <summary> Draws a subset of <see cref="T:PixelEngine.Pixel"/>s in a <see cref="T:PixelEngine.ISprite"/> to the screen. Useful for Spritesheets. </summary>
            <param name="p"> World origin <see cref="T:PixelEngine.Point"/> of drawn <see cref="T:PixelEngine.Pixel"/>s </param>
            <param name="spr"> Source <see cref="T:PixelEngine.ISprite"/> to draw from </param>
            <param name="op"> Offset <see cref="T:PixelEngine.Point"/> into given <see cref="T:PixelEngine.ISprite"/> to start copying pixels from </param>
            <param name="w"> Width of region to draw </param>
            <param name="h"> Height of region to draw </param>
        </member>
        <member name="M:PixelEngine.Game.Clear(PixelEngine.Pixel)">
            <summary> Clears the screen, so it has a given color. </summary>
            <param name="p"> <see cref="T:PixelEngine.Pixel"/> color to clear to </param>
        </member>
        <member name="T:PixelEngine.Game.Subsystem">
            <summary> Enum of built-in subsystems </summary>
        </member>
        <member name="M:PixelEngine.Game.Enable(PixelEngine.Game.Subsystem)">
            <summary> Enable a given <see cref="T:PixelEngine.Game.Subsystem"/>. </summary>
            <param name="subsystem"> <see cref="T:PixelEngine.Game.Subsystem"/> to enable. </param>
        </member>
        <member name="M:PixelEngine.Game.DrawText(PixelEngine.Point,System.String,PixelEngine.Pixel,System.Int32)">
            <summary> Draws text to the screen. </summary>
            <param name="p"> Screen <see cref="T:PixelEngine.Point"/> to draw text to </param>
            <param name="text"> Text to draw </param>
            <param name="col"> <see cref="T:PixelEngine.Pixel"/> color to draw text with </param>
            <param name="scale"> Scale to apply to resize text </param>
        </member>
        <member name="M:PixelEngine.Game.DrawTextHr(PixelEngine.Point,System.String,PixelEngine.Pixel,System.Int32)">
            <summary> Draws High-res text to the screen. Requires the <see cref="F:PixelEngine.Game.Subsystem.HrText"/> to be <see cref="M:PixelEngine.Game.Enable(PixelEngine.Game.Subsystem)"/>'d </summary>
            <param name="p"> Screen <see cref="T:PixelEngine.Point"/> to draw text to </param>
            <param name="text"> Text to draw </param>
            <param name="col"> <see cref="T:PixelEngine.Pixel"/> color to draw text with </param>
            <param name="scale"> Scale to apply to resize text </param>
        </member>
        <member name="M:PixelEngine.Game.OnSoundCreate(System.Int32,System.Single,System.Single)">
            <summary> Overide this to generate constant audio. </summary>
            <remarks> Callback passed to <see cref="T:PixelEngine.AudioEngine"/> when <see cref="F:PixelEngine.Game.Subsystem.Audio"/> is <see cref="M:PixelEngine.Game.Enable(PixelEngine.Game.Subsystem)"/>'d </remarks>
            <param name="channels"> Channel audio sample requested for </param>
            <param name="globalTime"> Current global time </param>
            <param name="timeStep"> Time between audio steps </param>
            <returns> Audio Sample at given <paramref name="globalTime"/> </returns>
        </member>
        <member name="M:PixelEngine.Game.OnSoundFilter(System.Int32,System.Single,System.Single)">
            <summary> Overide this to filter audio. </summary>
            <remarks> Callback passed to <see cref="T:PixelEngine.AudioEngine"/> when <see cref="F:PixelEngine.Game.Subsystem.Audio"/> is <see cref="M:PixelEngine.Game.Enable(PixelEngine.Game.Subsystem)"/>'d </remarks>
            <param name="channels"> Channel audio filter requested for </param>
            <param name="globalTime"> Current global time </param>
            <param name="sample"> Input sample to filter </param>
            <returns> Final filtered sample </returns>
        </member>
        <member name="M:PixelEngine.Game.LoadSound(System.String)">
            <summary> Helper to ask the <see cref="T:PixelEngine.AudioEngine"/> <see cref="T:PixelEngine.Game.Subsystem"/> to load a <see cref="T:PixelEngine.Sound"/> </summary>
            <param name="path"> Filename of sound to load </param>
            <returns> Loaded <see cref="T:PixelEngine.Sound"/> if successful, null if failed </returns>
        </member>
        <member name="M:PixelEngine.Game.PlaySound(PixelEngine.Sound)">
            <summary> Helper to ask the <see cref="T:PixelEngine.AudioEngine"/> <see cref="T:PixelEngine.Game.Subsystem"/> to play a <see cref="T:PixelEngine.Sound"/> </summary>
            <param name="s"> <see cref="T:PixelEngine.Sound"/> to play </param>
        </member>
        <member name="M:PixelEngine.Game.StopSound(PixelEngine.Sound)">
            <summary> Helper to ask the <see cref="T:PixelEngine.AudioEngine"/> <see cref="T:PixelEngine.Game.Subsystem"/> to stop a <see cref="T:PixelEngine.Sound"/> </summary>
            <param name="s"> <see cref="T:PixelEngine.Sound"/> to play </param>
        </member>
        <member name="M:PixelEngine.Game.OnCreate">
            <summary> Override this to insert logic before the Game loop begins </summary>
        </member>
        <member name="M:PixelEngine.Game.OnUpdate(System.Single)">
            <summary> Override this to have logic run every frame </summary>
        </member>
        <member name="M:PixelEngine.Game.OnMousePress(PixelEngine.Mouse)">
            <summary> Override this to have logic run when any mouse button is pressed </summary>
        </member>
        <member name="M:PixelEngine.Game.OnMouseRelease(PixelEngine.Mouse)">
            <summary> Override this to have logic run when any mouse button is released </summary>
        </member>
        <member name="M:PixelEngine.Game.OnMouseDown(PixelEngine.Mouse)">
            <summary> Override this to have logic run while any mouse key is held </summary>
        </member>
        <member name="M:PixelEngine.Game.OnMouseScroll">
            <summary> Override this to have logic run when the mouse wheel is spun </summary>
        </member>
        <member name="M:PixelEngine.Game.OnKeyPress(PixelEngine.Key)">
            <summary> Override this to have logic run when any key is pressed </summary>
        </member>
        <member name="M:PixelEngine.Game.OnKeyRelease(PixelEngine.Key)">
            <summary> Override this to have logic run when any key is released </summary>
        </member>
        <member name="M:PixelEngine.Game.OnKeyDown(PixelEngine.Key)">
            <summary> Override this to have logic run when any key is held down </summary>
        </member>
        <member name="M:PixelEngine.Game.OnDestroy">
            <summary> Override this to have logic run before the game is destroyed. </summary>
        </member>
        <member name="T:PixelEngine.OpenGL">
            <summary> Class holding rendering hooks and information </summary>
        </member>
        <member name="F:PixelEngine.OpenGL.game">
            <summary> Bound Game instance </summary>
        </member>
        <member name="F:PixelEngine.OpenGL.deviceContext">
            <summary> Pointer to device's context </summary>
        </member>
        <member name="F:PixelEngine.OpenGL.renderContext">
            <summary> Pointer to rendering context </summary>
        </member>
        <member name="F:PixelEngine.OpenGL.pw">
            <summary> Pixel size </summary>
        </member>
        <member name="F:PixelEngine.OpenGL.ph">
            <summary> Pixel size </summary>
        </member>
        <member name="F:PixelEngine.OpenGL.ww">
            <summary> Inverse float size </summary>
        </member>
        <member name="F:PixelEngine.OpenGL.wh">
            <summary> Inverse float size </summary>
        </member>
        <member name="M:PixelEngine.OpenGL.Create(PixelEngine.Game)">
            <summary> Setup in regards to a Game instance </summary>
            <param name="game"> Game instance to setup </param>
        </member>
        <member name="M:PixelEngine.OpenGL.Initialize(PixelEngine.Sprite,PixelEngine.Sprite)">
            <summary> Initialize with sprites to render to </summary>
            <param name="drawTarget"> Sprite to render plain draw calls to </param>
            <param name="textTarget"> Sprite to render text to </param>
        </member>
        <member name="M:PixelEngine.OpenGL.Draw(PixelEngine.Sprite,PixelEngine.Sprite)">
            <summary> Draw given sprites to the screen </summary>
            <param name="drawTarget"> Sprite layer </param>
            <param name="textTarget"> Text layer </param>
        </member>
        <member name="M:PixelEngine.OpenGL.Destroy">
            <summary> Releases resources when finished. </summary>
        </member>
        <member name="T:PixelEngine.Pixel">
            <summary> Struct holding color and transparency information for a single pixel </summary>
        </member>
        <member name="F:PixelEngine.Pixel.Initialized">
            <summary> Workaround to avoid static constructor. </summary>
        </member>
        <member name="M:PixelEngine.Pixel.Init">
            <summary> Workaround to avoid static constructor. </summary>
        </member>
        <member name="P:PixelEngine.Pixel.R">
            <summary> Red channel </summary>
        </member>
        <member name="P:PixelEngine.Pixel.G">
            <summary> Green channel </summary>
        </member>
        <member name="P:PixelEngine.Pixel.B">
            <summary> Blue channel </summary>
        </member>
        <member name="P:PixelEngine.Pixel.A">
            <summary> Alpha (typically transparency) channel </summary>
        </member>
        <member name="M:PixelEngine.Pixel.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary> Create a <see cref="T:PixelEngine.Pixel"/> with the given color information </summary>
            <param name="red"> Red channel (0-255) </param>
            <param name="green"> Green channel (0-255) </param>
            <param name="blue"> Blue channel (0-255) </param>
            <param name="alpha"> Alpha (transparency) channel (0-255), Default = 255 </param>
        </member>
        <member name="T:PixelEngine.Pixel.Mode">
            <summary> Pixel blending modes </summary>
        </member>
        <member name="M:PixelEngine.Pixel.Random">
            <summary> Create a randomly colored, opaque pixel. </summary>
        </member>
        <member name="M:PixelEngine.Pixel.RandomAlpha">
            <summary> Create a randomly colored, randomly transparent pixel. </summary>
        </member>
        <member name="T:PixelEngine.Pixel.Presets">
            <summary> Color presets. </summary>
        </member>
        <member name="M:PixelEngine.Pixel.RGBA(System.UInt32)">
            <summary> Create a <see cref="T:PixelEngine.Pixel"/> color from an integer. </summary>
            <param name="rgba"><see cref="T:System.UInt32"/>[] value treated as 0xRRGGBBAA </param>
            <returns> <see cref="T:PixelEngine.Pixel"/> representing value of given RGBA </returns>
        </member>
        <member name="M:PixelEngine.Pixel.ARGB(System.UInt32)">
            <summary> Create a <see cref="T:PixelEngine.Pixel"/> color from an integer. </summary>
            <param name="argb"><see cref="T:System.UInt32"/>[] value treated as 0xAARRGGBB </param>
            <returns> <see cref="T:PixelEngine.Pixel"/> representing value of given ARGB </returns>
        </member>
        <member name="M:PixelEngine.Pixel.PaletteARGB(System.UInt32[])">
            <summary> Convert a list of ARGB values into a <see cref="T:PixelEngine.Pixel"/>[] for ease of creating palettes. </summary>
            <param name="argb"> <see cref="T:System.UInt32"/>[] to use as ARGB color source </param>
            <returns> <see cref="T:PixelEngine.Pixel"/>[] created from source </returns>
        </member>
        <member name="M:PixelEngine.Pixel.PaletteRGBA(System.UInt32[])">
            <summary> Convert a list of RGBA values into a <see cref="T:PixelEngine.Pixel"/>[] for ease of creating palettes. </summary>
            <param name="rgba"> <see cref="T:System.UInt32"/>[] to use as RGBA color source </param>
            <returns> <see cref="T:PixelEngine.Pixel"/>[] created from source </returns>
        </member>
        <member name="F:PixelEngine.Pixel.Empty">
            <summary> Clear pixel (is same as default(Pixel) or new Pixel() ) </summary>
        </member>
        <member name="F:PixelEngine.Pixel.presetPixels">
            <summary> Dictionary for preset pixels </summary>
        </member>
        <member name="P:PixelEngine.Pixel.PresetPixels">
            <summary> Array for preset pixels </summary>
        </member>
        <member name="M:PixelEngine.Pixel.FromRgb(System.UInt32)">
            <summary> Create a color from an integer, as RGBA. </summary>
            <param name="rgba">uint value treated as 0xRRGGBBAA </param>
            <returns> Pixel representing value of given RGBA </returns>
        </member>
        <member name="M:PixelEngine.Pixel.FromHsv(System.Single,System.Single,System.Single)">
            <summary> Create a color from HSV space coordinates </summary>
            <param name="h"> Hue (Angle of color, [0, 1]) </param>
            <param name="s"> Saturation (Grayscale or Vibrant [0, 1]) </param>
            <param name="v"> Value (Dark or Bright [0, 1]) </param>
            <returns> Pixel representing value of given HSV </returns>
        </member>
        <member name="M:PixelEngine.Pixel.op_Equality(PixelEngine.Pixel,PixelEngine.Pixel)">
            <summary> Compare two pixels by all color channels </summary> <returns> True if the two are completely equal, false otherwise </returns>
        </member>
        <member name="M:PixelEngine.Pixel.op_Inequality(PixelEngine.Pixel,PixelEngine.Pixel)">
            <summary> Compare two pixels by all color channels </summary> <returns> False if the two are completely equal, true otherwise </returns>
        </member>
        <member name="M:PixelEngine.Pixel.op_Implicit(PixelEngine.Pixel.Presets)~PixelEngine.Pixel">
            <summary> Implicit conversion from a Preset enum value to a Pixel color value. </summary>
            <param name="p"> Preset value </param>
            <returns> Converted color, or <see cref="F:PixelEngine.Pixel.Empty"/> if invalid. </returns>
        </member>
        <member name="M:PixelEngine.Pixel.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Pixel.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:PixelEngine.Pixel.ToHexARGB">
            <summary> Returns hex-formatted string in ARGB order </summary>
        </member>
        <member name="M:PixelEngine.Pixel.ToHexRGBA">
            <summary> Returns hex-formatted string in RGBA order </summary>
        </member>
        <member name="T:PixelEngine.Point">
            <summary> Holds an x/y pair. </summary>
        </member>
        <member name="M:PixelEngine.Point.#ctor(System.Int32,System.Int32)">
            <summary> Create a <see cref="T:PixelEngine.Point"/> with the given x/y pair </summary>
            <param name="x"> x coord </param>
            <param name="y"> y coord </param>
        </member>
        <member name="P:PixelEngine.Point.X">
            <summary> x Coordinate </summary>
        </member>
        <member name="P:PixelEngine.Point.Y">
            <summary> y Coordinate </summary>
        </member>
        <member name="P:PixelEngine.Point.Origin">
            <summary> Always (0, 0) </summary>
        </member>
        <member name="M:PixelEngine.Point.op_Addition(PixelEngine.Point,PixelEngine.Point)">
            <summary> Add two <see cref="T:PixelEngine.Point"/>s component-wise </summary>
        </member>
        <member name="M:PixelEngine.Point.op_Subtraction(PixelEngine.Point,PixelEngine.Point)">
            <summary> Subtract two <see cref="T:PixelEngine.Point"/>s component-wise </summary>
        </member>
        <member name="M:PixelEngine.Point.op_Multiply(PixelEngine.Point,PixelEngine.Point)">
            <summary> Multiply two <see cref="T:PixelEngine.Point"/>s component-wise </summary>
        </member>
        <member name="M:PixelEngine.Point.op_Division(PixelEngine.Point,PixelEngine.Point)">
            <summary> Divide two <see cref="T:PixelEngine.Point"/>s component-wise </summary>
        </member>
        <member name="M:PixelEngine.Point.op_Multiply(PixelEngine.Point,System.Int32)">
            <summary> Multiply a <see cref="T:PixelEngine.Point"/> by an <see cref="T:System.Int32"/> </summary>
        </member>
        <member name="M:PixelEngine.Point.op_Multiply(System.Int32,PixelEngine.Point)">
            <summary> Multiply a <see cref="T:PixelEngine.Point"/> by an <see cref="T:System.Int32"/> </summary>
        </member>
        <member name="M:PixelEngine.Point.op_Division(PixelEngine.Point,System.Int32)">
            <summary> Divide a <see cref="T:PixelEngine.Point"/> by an <see cref="T:System.Int32"/> </summary>
        </member>
        <member name="M:PixelEngine.Point.op_Implicit(PixelEngine.Utilities.Vector2)~PixelEngine.Point">
            <summary> Implicitly coerce a <see cref="T:PixelEngine.Utilities.Vector2"/> into a <see cref="T:PixelEngine.Point"/> by casting its x,y components into <see cref="T:System.Int32"/>s. </summary>
        </member>
        <member name="M:PixelEngine.Point.op_Implicit(PixelEngine.Utilities.Vector2Int)~PixelEngine.Point">
            <summary> Implicitly coerce a <see cref="T:PixelEngine.Utilities.Vector2Int"/> into a <see cref="T:PixelEngine.Point"/> by capturing its x,y components. </summary>
        </member>
        <member name="M:PixelEngine.Point.op_Implicit(PixelEngine.Utilities.Vector3)~PixelEngine.Point">
            <summary> Implicitly coerce a <see cref="T:PixelEngine.Utilities.Vector3"/> into a <see cref="T:PixelEngine.Point"/> by casting its x,y components into <see cref="T:System.Int32"/>s. </summary>
        </member>
        <member name="M:PixelEngine.Point.op_Implicit(PixelEngine.Utilities.Vector3Int)~PixelEngine.Point">
            <summary> Implicitly coerce a <see cref="T:PixelEngine.Utilities.Vector3Int"/> into a <see cref="T:PixelEngine.Point"/> by capturing its x,y components. </summary>
        </member>
        <member name="M:PixelEngine.Point.op_Implicit(PixelEngine.Utilities.Vector4)~PixelEngine.Point">
            <summary> Implicitly coerce a <see cref="T:PixelEngine.Utilities.Vector4"/> into a <see cref="T:PixelEngine.Point"/> by casting its x,y components into <see cref="T:System.Int32"/>s. </summary>
        </member>
        <member name="F:PixelEngine.Randoms.Initialized">
            <summary> Workaround to avoid static constructor penalty </summary>
        </member>
        <member name="M:PixelEngine.Randoms.Init">
            <summary> Workaround to avoid static constructor penalty </summary>
        </member>
        <member name="F:PixelEngine.Randoms.rnd">
            <summary> Current random state. </summary>
        </member>
        <member name="F:PixelEngine.Randoms.seed">
            <summary> Last random seed used to initialize with </summary>
        </member>
        <member name="P:PixelEngine.Randoms.Seed">
            <summary> Change the random seed. </summary>
        </member>
        <member name="M:PixelEngine.Randoms.RandomByte">
            <summary> Get a single random value between [0, 255] </summary>
            <returns> Single number between 0 and 255 </returns>
        </member>
        <member name="M:PixelEngine.Randoms.RandomBytes(System.Int32)">
            <summary> Get some number of random byte values </summary>
            <param name="count"> Number of bytes to get </param>
            <returns> Array of <paramref name="count"/> random bytes </returns>
        </member>
        <member name="M:PixelEngine.Randoms.RandomInt(System.Int32,System.Int32)">
            <summary> Get a single random int between [<paramref name="min" />, <paramref name="max"/>) </summary>
            <param name="min"> Min int value </param>
            <param name="max"> Max int value </param>
            <returns> Value at least equal to <paramref name="min"/>, up to but not including <paramref name="max"/>. </returns>
        </member>
        <member name="M:PixelEngine.Randoms.RandomFloat(System.Single,System.Single)">
            <summary> Get a single random float between [<paramref name="min" />, <paramref name="max"/>) </summary>
            <param name="min"> Min float value </param>
            <param name="max"> Max float value </param>
            <returns> Value at least equal to <paramref name="min"/>, up to but not including <paramref name="max"/>. </returns>
        </member>
        <member name="T:PixelEngine.Sound">
            <summary> Class holding a sound sample to play. Holds logic to load the sound from disk. </summary>
        </member>
        <member name="P:PixelEngine.Sound.Loop">
            <summary> Should this sound loop? </summary>
        </member>
        <member name="F:PixelEngine.Sound.WavHeader">
            <summary> Header information </summary>
        </member>
        <member name="F:PixelEngine.Sound.Samples">
            <summary> Sound waveform sample data </summary>
        </member>
        <member name="F:PixelEngine.Sound.SampleCount">
            <summary> Number of samples </summary>
        </member>
        <member name="F:PixelEngine.Sound.Channels">
            <summary> Number of channels </summary>
        </member>
        <member name="F:PixelEngine.Sound.Valid">
            <summary> True if successfully loaded, false otherwise. </summary>
        </member>
        <member name="M:PixelEngine.Sound.#ctor(System.String)">
            <summary> Read a sound from a file. Currently only supports .wav and .mp3 files. </summary>
            <param name="file"> File to load. </param>
        </member>
        <member name="M:PixelEngine.Sound.LoadFromWav(System.IO.BinaryReader,System.Boolean)">
            <summary> Loads a wave file </summary>
            <param name="reader"> Stream reader. </param>
            <param name="isFromMp3"> Flag if converted from mp3 </param>
            <returns> True if success, false if failed </returns>
        </member>
        <member name="M:PixelEngine.Sound.LoadFromMp3(System.IO.BinaryReader,System.String)">
            <summary> Loads a sound from an MP3 file. </summary>
            <param name="reader"> Stream reader </param>
            <param name="file"> File to read </param>
            <returns> true if successful, false if failed. </returns>
        </member>
        <member name="T:PixelEngine.PlayingSample">
            <summary> Struct to track progress of playing a sound </summary>
        </member>
        <member name="P:PixelEngine.PlayingSample.AudioSample">
            <summary> Sample being played </summary>
        </member>
        <member name="P:PixelEngine.PlayingSample.SamplePosition">
            <summary> Current position in samples </summary>
        </member>
        <member name="P:PixelEngine.PlayingSample.Finished">
            <summary> Did it finish by itself? </summary>
        </member>
        <member name="P:PixelEngine.PlayingSample.Loop">
            <summary> Should it loop? </summary>
        </member>
        <member name="T:PixelEngine.AudioEngine">
            <summary> Class holding actual audio engine logic </summary>
        </member>
        <member name="P:PixelEngine.AudioEngine.OnSoundCreate">
            <summary> Function to process sounds. </summary>
        </member>
        <member name="P:PixelEngine.AudioEngine.OnSoundFilter">
            <summary> Function to filter sounds. </summary>
        </member>
        <member name="P:PixelEngine.AudioEngine.Active">
            <summary> Is the sound engine currently active? </summary>
        </member>
        <member name="P:PixelEngine.AudioEngine.GlobalTime">
            <summary> Current global sound playback time </summary>
        </member>
        <member name="F:PixelEngine.AudioEngine.Volume">
            <summary> Current sound system volume </summary>
        </member>
        <member name="F:PixelEngine.AudioEngine.samples">
            <summary> All sound samples loaded through the system. Keys are file names, values are sounds loaded from file.  </summary>
        </member>
        <member name="F:PixelEngine.AudioEngine.playingSamples">
            <summary> Samples that are currently playing. </summary>
        </member>
        <member name="F:PixelEngine.AudioEngine.waveProc">
            <summary> Callback for Windows when sound system updates.  </summary>
        </member>
        <member name="F:PixelEngine.AudioEngine.sampleRate">
            <summary> Sample rate of sound system </summary>
        </member>
        <member name="F:PixelEngine.AudioEngine.channels">
            <summary> Channels in sound system </summary>
        </member>
        <member name="F:PixelEngine.AudioEngine.blockCount">
            <summary> Number of blocks in buffer </summary>
        </member>
        <member name="F:PixelEngine.AudioEngine.blockSamples">
            <summary> Number samples per block </summary>
        </member>
        <member name="F:PixelEngine.AudioEngine.blockCurrent">
            <summary> Current block index </summary>
        </member>
        <member name="F:PixelEngine.AudioEngine.blockMemory">
            <summary> Blocks of samples </summary>
        </member>
        <member name="F:PixelEngine.AudioEngine.waveHeaders">
            <summary> Headers of sounds </summary>
        </member>
        <member name="F:PixelEngine.AudioEngine.device">
            <summary> Native pointer to sound device </summary>
        </member>
        <member name="F:PixelEngine.AudioEngine.audioThread">
            <summary> Thread handling audio updates </summary>
        </member>
        <member name="F:PixelEngine.AudioEngine.blockFree">
            <summary> Free blocks </summary>
        </member>
        <member name="F:PixelEngine.AudioEngine.SoundInterval">
            <summary> delay between sound thread updates. </summary>
        </member>
        <member name="M:PixelEngine.AudioEngine.LoadSound(System.String)">
            <summary> Loads a sound from a file. </summary>
            <param name="file"> Filename to load </param>
            <returns> <see cref="T:PixelEngine.Sound"/> object representing sound if load is successful, or null if it fails. </returns>
        </member>
        <member name="M:PixelEngine.AudioEngine.PlaySound(PixelEngine.Sound)">
            <summary> Play a given sound object. </summary>
            <param name="s"> Sound to play </param>
        </member>
        <member name="M:PixelEngine.AudioEngine.StopSound(PixelEngine.Sound)">
            <summary> Stop the first instance of the given sound. </summary>
            <param name="s"> Sound to stop </param>
        </member>
        <member name="M:PixelEngine.AudioEngine.CreateAudio(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary> Initializes the audio system with given settings </summary>
            <param name="sampleRate"> Sample rate (default is 44.1kHz) </param>
            <param name="channels"> Number of channels (default is 1) </param>
            <param name="blocks"> Number of blocks in buffer (default is 8) </param>
            <param name="blockSamples"> Number of samples per block (default is 512) </param>
        </member>
        <member name="M:PixelEngine.AudioEngine.DestroyAudio">
            <summary> Stops audio system, and makes audio thread exit sometime in future. </summary>
        </member>
        <member name="M:PixelEngine.AudioEngine.WaveOutProc(System.IntPtr,System.Int32,System.Int32,PixelEngine.Windows.WaveHdr@,System.Int32)">
            <summary> Hook for <see cref="T:PixelEngine.Windows.WaveDelegate"/> to find when sounds are finished. </summary>
        </member>
        <member name="M:PixelEngine.AudioEngine.GetMixerOutput(System.Int32,System.Single,System.Single)">
            <summary> Sound-mixer function </summary>
            <param name="channel"> Channel to mix </param>
            <param name="globalTime"> Global timestamp </param>
            <param name="timeStep"> Time between updates </param>
            <returns> Mixed audio output </returns>
        </member>
        <member name="M:PixelEngine.AudioEngine.AudioThread">
            <summary> Audio thread loop. Pipes waveform to windows for playback. </summary>
        </member>
        <member name="T:PixelEngine.ISprite">
            <summary> Core interface for a sprite to fufill to be drawable. </summary>
        </member>
        <member name="P:PixelEngine.ISprite.Width">
            <summary> Width of sprite </summary>
        </member>
        <member name="P:PixelEngine.ISprite.Height">
            <summary> Height of sprite </summary>
        </member>
        <member name="P:PixelEngine.ISprite.Item(System.Int32,System.Int32)">
            <summary> 2d Accessor to read <see cref="T:PixelEngine.Pixel"/>s in sprite </summary>
            <param name="x">x coord to read at </param>
            <param name="y">y coord to read at </param>
            <returns> <see cref="T:PixelEngine.Pixel"/> color at x/y </returns>
        </member>
        <member name="T:PixelEngine.ISpriteExt">
            <summary> Class containing extension methods common for any <see cref="T:PixelEngine.ISprite"/> implementation. </summary>
        </member>
        <member name="M:PixelEngine.ISpriteExt.Size(PixelEngine.ISprite)">
            <summary> Gets the <see cref="P:PixelEngine.ISprite.Width"/> and <see cref="P:PixelEngine.ISprite.Height"/> of the given <paramref name="sprite"/> packed as a <see cref="T:PixelEngine.Point"/>. </summary>
        </member>
        <member name="T:PixelEngine.Sprite">
            <summary> Class holding sprite information as an array of <see cref="T:PixelEngine.Pixel"/>s </summary>
        </member>
        <member name="M:PixelEngine.Sprite.GetPixels">
            <summary> Get reference to pixel data </summary>
            <returns> Reference to pixel array </returns>
        </member>
        <member name="F:PixelEngine.Sprite.colorData">
            <summary> Pixels in this sprite. </summary>
        </member>
        <member name="P:PixelEngine.Sprite.Width">
            <summary> Width of sprite </summary>
        </member>
        <member name="P:PixelEngine.Sprite.Height">
            <summary> Height of sprite </summary>
        </member>
        <member name="P:PixelEngine.Sprite.Item(System.Int32,System.Int32)">
            <summary> 2d Accessor to directly read/write <see cref="T:PixelEngine.Pixel"/>s in sprite </summary>
            <param name="x">x coord to read/write at </param>
            <param name="y">y coord to read/write at </param>
            <returns> <see cref="T:PixelEngine.Pixel"/> color at x/y </returns>
        </member>
        <member name="M:PixelEngine.Sprite.#ctor(System.Int32,System.Int32)">
            <summary> Constructs an empty (transparent) sprite with given width/height </summary>
            <param name="w"> Width of sprite </param>
            <param name="h"> Height of sprite </param>
        </member>
        <member name="M:PixelEngine.Sprite.GetPixel(System.Int32,System.Int32)">
            <summary> Logic for reading <see cref="T:PixelEngine.Pixel"/>s from Sprite. </summary>
            <param name="x"> x coord to read </param>
            <param name="y"> y coord to read </param>
            <returns> Pixel at x/y, or <see cref="F:PixelEngine.Pixel.Empty"/> if x/y are invalid  </returns>
        </member>
        <member name="M:PixelEngine.Sprite.SetPixel(System.Int32,System.Int32,PixelEngine.Pixel)">
            <summary> Logic for writing <see cref="T:PixelEngine.Pixel"/>s from Sprite. </summary>
            <param name="x"> x coord to read </param>
            <param name="y"> y coord to read </param>
            <param name="p"> Pixel to write into sprite. </param>
        </member>
        <member name="M:PixelEngine.Sprite.LoadFromBitmap(System.Drawing.Bitmap)">
            <summary> Load a given sprite from a BMP format file </summary>
            <param name="bmp"> bitmap to load from </param>
        </member>
        <member name="M:PixelEngine.Sprite.LoadFromSpr(System.String)">
            <summary> Load from an SPR file </summary>
            <param name="path"> Path to load from </param>
            <returns> Sprite loaded from SPR file </returns>
        </member>
        <member name="M:PixelEngine.Sprite.Load(System.String)">
            <summary> Loads a sprite from a file. Currently .SPR and anything that <see cref="M:System.Drawing.Image.FromFile(System.String)"/> can load is supported. 
            BMP, PNG, JPG, GIF, and TIFF Should be expected to work. YMMV on other formats. </summary>
            <param name="path"> Filename to load </param>
            <returns> Loaded sprite. </returns>
        </member>
        <member name="M:PixelEngine.Sprite.Save(PixelEngine.Sprite,System.String)">
            <summary> Converts the given <see cref="T:PixelEngine.Sprite"/> into a bitmap and saves it to a file. </summary>
            <param name="spr"> Sprite to save </param>
            <param name="path"> Path to save file to </param>
        </member>
        <member name="M:PixelEngine.Sprite.Copy(PixelEngine.Sprite,PixelEngine.Sprite)">
            <summary> Copies <see cref="T:PixelEngine.Pixel"/> data from src <see cref="T:PixelEngine.Sprite"/> to dest <see cref="T:PixelEngine.Sprite"/> </summary>
            <param name="src"> Source Sprite </param>
            <param name="dest"> Destination Sprite </param>
        </member>
        <member name="T:PixelEngine.PalettedSprite">
            <summary> Class holding palatted sprite information. for 
            <para>Supports up to 255 colors in a Palette. </para>
            <para> 0 is reserved for <see cref="F:PixelEngine.Pixel.Empty"/>, regardless of what it is set to internally. </para>
            </summary>
        </member>
        <member name="F:PixelEngine.PalettedSprite.colors">
            <summary> Information about what colors are in what positions. 0 is always transparent. </summary>
        </member>
        <member name="F:PixelEngine.PalettedSprite.palette">
            <summary> Palette of <see cref="T:PixelEngine.Pixel"/> colors. </summary>
        </member>
        <member name="P:PixelEngine.PalettedSprite.Width">
            <summary> Width of sprite </summary>
        </member>
        <member name="P:PixelEngine.PalettedSprite.Height">
            <summary> Height of sprite </summary>
        </member>
        <member name="P:PixelEngine.PalettedSprite.Item(System.Int32,System.Int32)">
            <summary> 2d Accessor to directly read/write <see cref="T:PixelEngine.Pixel"/>s in sprite </summary>
            <param name="x">x coord to read/write at </param>
            <param name="y">y coord to read/write at </param>
            <returns> <see cref="T:PixelEngine.Pixel"/> color at x/y </returns>
        </member>
        <member name="M:PixelEngine.PalettedSprite.GetIndex(System.Int32,System.Int32)">
            <summary> Gets a palette index at the given x/y coordinate </summary>
            <param name="x"> x coord </param>
            <param name="y"> y coord </param>
            <returns> Palette index at given coordinate </returns>
        </member>
        <member name="M:PixelEngine.PalettedSprite.SetIndex(System.Int32,System.Int32,System.Int32)">
            <summary> Sets a palette index at the given x/y coordinate </summary>
            <param name="x"> x coord </param>
            <param name="y"> y coord </param>
            <param name="ci"> color index into Palette to set. </param>
        </member>
        <member name="M:PixelEngine.PalettedSprite.#ctor(System.Int32,System.Int32,PixelEngine.Pixel[])">
            <summary> Create a new, empty <see cref="T:PixelEngine.PalettedSprite"/> with the given dimensions and <see cref="T:PixelEngine.Pixel"/>[] palette </summary>
            <param name="w"> Width of sprite </param>
            <param name="h"></param>
            <param name="palette"></param>
        </member>
        <member name="M:PixelEngine.PalettedSprite.#ctor(PixelEngine.PalettedSprite,PixelEngine.Pixel[])">
            <summary> Create a copy of a given <see cref="T:PixelEngine.PalettedSprite"/> with the given <paramref name="palette"/> </summary>
            <param name="orig"> Orignal <see cref="T:PixelEngine.PalettedSprite"/> to share palette indexes with </param>
            <param name="palette"> <see cref="T:PixelEngine.Pixel"/>[] to use as this sprite's Palette. </param>
        </member>
        <member name="T:PixelEngine.Shader">
            <summary> Helper class for wrapping a <see cref="T:PixelEngine.ShaderFunc"/>. </summary>
        </member>
        <member name="P:PixelEngine.Shader.Calculate">
            <summary> Wrapped <see cref="T:PixelEngine.ShaderFunc"/> </summary>
        </member>
        <member name="M:PixelEngine.Shader.#ctor(PixelEngine.ShaderFunc)">
            <summary> Wrap a <see cref="T:PixelEngine.ShaderFunc"/> </summary>
        </member>
        <member name="T:PixelEngine.ShaderFunc">
            <summary> Delegate class for applying a shader-function per-pixel. </summary>
            <param name="x"> x Coord of pixel </param>
            <param name="y"> y Coord of pixel </param>
            <param name="prev"> Last pixel value </param>
            <param name="cur"> Input pixel value </param>
            <returns> Color of pixel with regards to location/previous </returns>
        </member>
        <member name="T:PixelEngine.Timer">
            <summary> Helper class for calculating ticks over time at different intervals </summary>
        </member>
        <member name="M:PixelEngine.Timer.#ctor(System.Single)">
            <summary> Create a timer that ticks at the given interval </summary>
            <param name="interval"> Milliseconds per tick </param>
        </member>
        <member name="P:PixelEngine.Timer.Interval">
            <summary> Milliseconds per tick </summary>
        </member>
        <member name="F:PixelEngine.Timer.last">
            <summary> Timestamp of last tick </summary>
        </member>
        <member name="M:PixelEngine.Timer.Tick">
            <summary> Update timer and see if a tick-point was passed. </summary>
            <returns> True if a tick was passed, false otherwise </returns>
        </member>
        <member name="M:PixelEngine.Timer.Init">
            <summary> Initialize this timer to the current time </summary>
        </member>
        <member name="M:PixelEngine.Timer.Init(System.DateTime)">
            <summary> Initialize this timer to the given time </summary>
        </member>
        <member name="T:PixelEngine.WindowsInfo">
            <summary> Class holding read access to some information in <see cref="T:PixelEngine.Windows"/>. </summary>
        </member>
        <member name="P:PixelEngine.WindowsInfo.TempPath">
            <summary> Temporary directory path </summary>
        </member>
        <member name="M:PixelEngine.WindowsInfo.SourceFileDirectory(System.String)">
            <summary> Helper macro to get the directory from a given source file. </summary>
            <param name="callerPath"> Autofilled by compiler. Is the path of the source file. </param>
            <returns> Forward-slash version of the autofilled filepath. </returns>
        </member>
        <member name="P:PixelEngine.WindowsInfo.AppDataPath">
            <summary> Path for application data. This folder is unique to the logged in user. Good for stuff that should be slightly hidden. </summary>
        </member>
        <member name="P:PixelEngine.WindowsInfo.UserDataPath">
            <summary> Path for user data. This folder is unique to the logged in user. Good for saves that are visible to the user. </summary>
        </member>
        <member name="T:PixelEngine.Windows">
            <summary> Class holding external bindings and other information for interacting with the Windows operating system. </summary>
        </member>
        <member name="F:PixelEngine.Windows.Initialized">
            <summary> Workaround to avoid static initializer </summary>
        </member>
        <member name="M:PixelEngine.Windows.Init">
            <summary> Workaround to avoid static initializer </summary>
        </member>
        <member name="P:PixelEngine.Windows.TempPath">
            <summary> Path for temporary directory. </summary>
        </member>
        <member name="P:PixelEngine.Windows.AppDataPath">
            <summary> Path for application data, this folder is system wide. Good for stuff that should be slightly hidden. </summary>
        </member>
        <member name="P:PixelEngine.Windows.UserDataPath">
            <summary> Path for user data, this folder is unique to the logged in user. Good for saves that are visible to the user. </summary>
        </member>
        <member name="M:PixelEngine.Windows.DestroyTempPath">
            <summary> Kill all files in temp path. </summary>
        </member>
        <member name="T:PixelEngine.Windows.GL">
            <summary> Some GL Constants </summary>
        </member>
        <member name="T:PixelEngine.Windows.WM">
            <summary> WIndows Message Enumeration </summary>
        </member>
        <member name="T:PixelEngine.Windows.VK">
            <summary> Virtual Key enumeration </summary>
        </member>
        <member name="T:PixelEngine.Windows.WaveDelegate">
            <summary> Windows sound processing delegate. </summary>
        </member>
        <member name="T:PixelEngine.Windows.WindowProcess">
            <summary> Window delegate </summary>
        </member>
        <member name="T:PixelEngine.Windows.WaveFormatEx">
            <summary> Wave format information to communicate with windows </summary>
        </member>
        <member name="F:PixelEngine.Windows.WaveFormatEx.FormatTag">
            <summary> Tag for specific format information </summary>
        </member>
        <member name="F:PixelEngine.Windows.WaveFormatEx.Channels">
            <summary> Number of channels </summary>
        </member>
        <member name="F:PixelEngine.Windows.WaveFormatEx.SamplesPerSec">
            <summary> Samples per second </summary>
        </member>
        <member name="F:PixelEngine.Windows.WaveFormatEx.AvgBytesPerSec">
            <summary> Average bytes per second </summary>
        </member>
        <member name="F:PixelEngine.Windows.WaveFormatEx.BlockAlign">
            <summary> Alignment </summary>
        </member>
        <member name="F:PixelEngine.Windows.WaveFormatEx.BitsPerSample">
            <summary> Bits per sample </summary>
        </member>
        <member name="F:PixelEngine.Windows.WaveFormatEx.Size">
            <summary> Total size, if known </summary>
        </member>
    </members>
</doc>
